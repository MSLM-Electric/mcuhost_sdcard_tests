
host_sdcard.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f8c  080001f8  080001f8  000101f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000500  08008184  08008184  00018184  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008684  08008684  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08008684  08008684  00018684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800868c  0800868c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800868c  0800868c  0001868c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008690  08008690  00018690  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08008694  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000858  2000000c  080086a0  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000c04  20000864  080086a0  00020864  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000173b1  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002e68  00000000  00000000  000373eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000011d8  00000000  00000000  0003a258  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001060  00000000  00000000  0003b430  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029ae8  00000000  00000000  0003c490  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000112b0  00000000  00000000  00065f78  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000fbdd3  00000000  00000000  00077228  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00172ffb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  00173078  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	; (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	; (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000000c 	.word	0x2000000c
 8000214:	00000000 	.word	0x00000000
 8000218:	0800816c 	.word	0x0800816c

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	; (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	; (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	; (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000010 	.word	0x20000010
 8000234:	0800816c 	.word	0x0800816c

08000238 <__aeabi_uldivmod>:
 8000238:	b953      	cbnz	r3, 8000250 <__aeabi_uldivmod+0x18>
 800023a:	b94a      	cbnz	r2, 8000250 <__aeabi_uldivmod+0x18>
 800023c:	2900      	cmp	r1, #0
 800023e:	bf08      	it	eq
 8000240:	2800      	cmpeq	r0, #0
 8000242:	bf1c      	itt	ne
 8000244:	f04f 31ff 	movne.w	r1, #4294967295
 8000248:	f04f 30ff 	movne.w	r0, #4294967295
 800024c:	f000 b972 	b.w	8000534 <__aeabi_idiv0>
 8000250:	f1ad 0c08 	sub.w	ip, sp, #8
 8000254:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000258:	f000 f806 	bl	8000268 <__udivmoddi4>
 800025c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000260:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000264:	b004      	add	sp, #16
 8000266:	4770      	bx	lr

08000268 <__udivmoddi4>:
 8000268:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800026c:	9e08      	ldr	r6, [sp, #32]
 800026e:	4604      	mov	r4, r0
 8000270:	4688      	mov	r8, r1
 8000272:	2b00      	cmp	r3, #0
 8000274:	d14b      	bne.n	800030e <__udivmoddi4+0xa6>
 8000276:	428a      	cmp	r2, r1
 8000278:	4615      	mov	r5, r2
 800027a:	d967      	bls.n	800034c <__udivmoddi4+0xe4>
 800027c:	fab2 f282 	clz	r2, r2
 8000280:	b14a      	cbz	r2, 8000296 <__udivmoddi4+0x2e>
 8000282:	f1c2 0720 	rsb	r7, r2, #32
 8000286:	fa01 f302 	lsl.w	r3, r1, r2
 800028a:	fa20 f707 	lsr.w	r7, r0, r7
 800028e:	4095      	lsls	r5, r2
 8000290:	ea47 0803 	orr.w	r8, r7, r3
 8000294:	4094      	lsls	r4, r2
 8000296:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800029a:	0c23      	lsrs	r3, r4, #16
 800029c:	fbb8 f7fe 	udiv	r7, r8, lr
 80002a0:	fa1f fc85 	uxth.w	ip, r5
 80002a4:	fb0e 8817 	mls	r8, lr, r7, r8
 80002a8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002ac:	fb07 f10c 	mul.w	r1, r7, ip
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d909      	bls.n	80002c8 <__udivmoddi4+0x60>
 80002b4:	18eb      	adds	r3, r5, r3
 80002b6:	f107 30ff 	add.w	r0, r7, #4294967295
 80002ba:	f080 811b 	bcs.w	80004f4 <__udivmoddi4+0x28c>
 80002be:	4299      	cmp	r1, r3
 80002c0:	f240 8118 	bls.w	80004f4 <__udivmoddi4+0x28c>
 80002c4:	3f02      	subs	r7, #2
 80002c6:	442b      	add	r3, r5
 80002c8:	1a5b      	subs	r3, r3, r1
 80002ca:	b2a4      	uxth	r4, r4
 80002cc:	fbb3 f0fe 	udiv	r0, r3, lr
 80002d0:	fb0e 3310 	mls	r3, lr, r0, r3
 80002d4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002d8:	fb00 fc0c 	mul.w	ip, r0, ip
 80002dc:	45a4      	cmp	ip, r4
 80002de:	d909      	bls.n	80002f4 <__udivmoddi4+0x8c>
 80002e0:	192c      	adds	r4, r5, r4
 80002e2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002e6:	f080 8107 	bcs.w	80004f8 <__udivmoddi4+0x290>
 80002ea:	45a4      	cmp	ip, r4
 80002ec:	f240 8104 	bls.w	80004f8 <__udivmoddi4+0x290>
 80002f0:	3802      	subs	r0, #2
 80002f2:	442c      	add	r4, r5
 80002f4:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002f8:	eba4 040c 	sub.w	r4, r4, ip
 80002fc:	2700      	movs	r7, #0
 80002fe:	b11e      	cbz	r6, 8000308 <__udivmoddi4+0xa0>
 8000300:	40d4      	lsrs	r4, r2
 8000302:	2300      	movs	r3, #0
 8000304:	e9c6 4300 	strd	r4, r3, [r6]
 8000308:	4639      	mov	r1, r7
 800030a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0xbe>
 8000312:	2e00      	cmp	r6, #0
 8000314:	f000 80eb 	beq.w	80004ee <__udivmoddi4+0x286>
 8000318:	2700      	movs	r7, #0
 800031a:	e9c6 0100 	strd	r0, r1, [r6]
 800031e:	4638      	mov	r0, r7
 8000320:	4639      	mov	r1, r7
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f783 	clz	r7, r3
 800032a:	2f00      	cmp	r7, #0
 800032c:	d147      	bne.n	80003be <__udivmoddi4+0x156>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0xd0>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80fa 	bhi.w	800052c <__udivmoddi4+0x2c4>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0303 	sbc.w	r3, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	4698      	mov	r8, r3
 8000342:	2e00      	cmp	r6, #0
 8000344:	d0e0      	beq.n	8000308 <__udivmoddi4+0xa0>
 8000346:	e9c6 4800 	strd	r4, r8, [r6]
 800034a:	e7dd      	b.n	8000308 <__udivmoddi4+0xa0>
 800034c:	b902      	cbnz	r2, 8000350 <__udivmoddi4+0xe8>
 800034e:	deff      	udf	#255	; 0xff
 8000350:	fab2 f282 	clz	r2, r2
 8000354:	2a00      	cmp	r2, #0
 8000356:	f040 808f 	bne.w	8000478 <__udivmoddi4+0x210>
 800035a:	1b49      	subs	r1, r1, r5
 800035c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000360:	fa1f f885 	uxth.w	r8, r5
 8000364:	2701      	movs	r7, #1
 8000366:	fbb1 fcfe 	udiv	ip, r1, lr
 800036a:	0c23      	lsrs	r3, r4, #16
 800036c:	fb0e 111c 	mls	r1, lr, ip, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb08 f10c 	mul.w	r1, r8, ip
 8000378:	4299      	cmp	r1, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x124>
 800037c:	18eb      	adds	r3, r5, r3
 800037e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x122>
 8000384:	4299      	cmp	r1, r3
 8000386:	f200 80cd 	bhi.w	8000524 <__udivmoddi4+0x2bc>
 800038a:	4684      	mov	ip, r0
 800038c:	1a59      	subs	r1, r3, r1
 800038e:	b2a3      	uxth	r3, r4
 8000390:	fbb1 f0fe 	udiv	r0, r1, lr
 8000394:	fb0e 1410 	mls	r4, lr, r0, r1
 8000398:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800039c:	fb08 f800 	mul.w	r8, r8, r0
 80003a0:	45a0      	cmp	r8, r4
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0x14c>
 80003a4:	192c      	adds	r4, r5, r4
 80003a6:	f100 33ff 	add.w	r3, r0, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0x14a>
 80003ac:	45a0      	cmp	r8, r4
 80003ae:	f200 80b6 	bhi.w	800051e <__udivmoddi4+0x2b6>
 80003b2:	4618      	mov	r0, r3
 80003b4:	eba4 0408 	sub.w	r4, r4, r8
 80003b8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003bc:	e79f      	b.n	80002fe <__udivmoddi4+0x96>
 80003be:	f1c7 0c20 	rsb	ip, r7, #32
 80003c2:	40bb      	lsls	r3, r7
 80003c4:	fa22 fe0c 	lsr.w	lr, r2, ip
 80003c8:	ea4e 0e03 	orr.w	lr, lr, r3
 80003cc:	fa01 f407 	lsl.w	r4, r1, r7
 80003d0:	fa20 f50c 	lsr.w	r5, r0, ip
 80003d4:	fa21 f30c 	lsr.w	r3, r1, ip
 80003d8:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003dc:	4325      	orrs	r5, r4
 80003de:	fbb3 f9f8 	udiv	r9, r3, r8
 80003e2:	0c2c      	lsrs	r4, r5, #16
 80003e4:	fb08 3319 	mls	r3, r8, r9, r3
 80003e8:	fa1f fa8e 	uxth.w	sl, lr
 80003ec:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003f0:	fb09 f40a 	mul.w	r4, r9, sl
 80003f4:	429c      	cmp	r4, r3
 80003f6:	fa02 f207 	lsl.w	r2, r2, r7
 80003fa:	fa00 f107 	lsl.w	r1, r0, r7
 80003fe:	d90b      	bls.n	8000418 <__udivmoddi4+0x1b0>
 8000400:	eb1e 0303 	adds.w	r3, lr, r3
 8000404:	f109 30ff 	add.w	r0, r9, #4294967295
 8000408:	f080 8087 	bcs.w	800051a <__udivmoddi4+0x2b2>
 800040c:	429c      	cmp	r4, r3
 800040e:	f240 8084 	bls.w	800051a <__udivmoddi4+0x2b2>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4473      	add	r3, lr
 8000418:	1b1b      	subs	r3, r3, r4
 800041a:	b2ad      	uxth	r5, r5
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3310 	mls	r3, r8, r0, r3
 8000424:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000428:	fb00 fa0a 	mul.w	sl, r0, sl
 800042c:	45a2      	cmp	sl, r4
 800042e:	d908      	bls.n	8000442 <__udivmoddi4+0x1da>
 8000430:	eb1e 0404 	adds.w	r4, lr, r4
 8000434:	f100 33ff 	add.w	r3, r0, #4294967295
 8000438:	d26b      	bcs.n	8000512 <__udivmoddi4+0x2aa>
 800043a:	45a2      	cmp	sl, r4
 800043c:	d969      	bls.n	8000512 <__udivmoddi4+0x2aa>
 800043e:	3802      	subs	r0, #2
 8000440:	4474      	add	r4, lr
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	fba0 8902 	umull	r8, r9, r0, r2
 800044a:	eba4 040a 	sub.w	r4, r4, sl
 800044e:	454c      	cmp	r4, r9
 8000450:	46c2      	mov	sl, r8
 8000452:	464b      	mov	r3, r9
 8000454:	d354      	bcc.n	8000500 <__udivmoddi4+0x298>
 8000456:	d051      	beq.n	80004fc <__udivmoddi4+0x294>
 8000458:	2e00      	cmp	r6, #0
 800045a:	d069      	beq.n	8000530 <__udivmoddi4+0x2c8>
 800045c:	ebb1 050a 	subs.w	r5, r1, sl
 8000460:	eb64 0403 	sbc.w	r4, r4, r3
 8000464:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000468:	40fd      	lsrs	r5, r7
 800046a:	40fc      	lsrs	r4, r7
 800046c:	ea4c 0505 	orr.w	r5, ip, r5
 8000470:	e9c6 5400 	strd	r5, r4, [r6]
 8000474:	2700      	movs	r7, #0
 8000476:	e747      	b.n	8000308 <__udivmoddi4+0xa0>
 8000478:	f1c2 0320 	rsb	r3, r2, #32
 800047c:	fa20 f703 	lsr.w	r7, r0, r3
 8000480:	4095      	lsls	r5, r2
 8000482:	fa01 f002 	lsl.w	r0, r1, r2
 8000486:	fa21 f303 	lsr.w	r3, r1, r3
 800048a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800048e:	4338      	orrs	r0, r7
 8000490:	0c01      	lsrs	r1, r0, #16
 8000492:	fbb3 f7fe 	udiv	r7, r3, lr
 8000496:	fa1f f885 	uxth.w	r8, r5
 800049a:	fb0e 3317 	mls	r3, lr, r7, r3
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb07 f308 	mul.w	r3, r7, r8
 80004a6:	428b      	cmp	r3, r1
 80004a8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ac:	d907      	bls.n	80004be <__udivmoddi4+0x256>
 80004ae:	1869      	adds	r1, r5, r1
 80004b0:	f107 3cff 	add.w	ip, r7, #4294967295
 80004b4:	d22f      	bcs.n	8000516 <__udivmoddi4+0x2ae>
 80004b6:	428b      	cmp	r3, r1
 80004b8:	d92d      	bls.n	8000516 <__udivmoddi4+0x2ae>
 80004ba:	3f02      	subs	r7, #2
 80004bc:	4429      	add	r1, r5
 80004be:	1acb      	subs	r3, r1, r3
 80004c0:	b281      	uxth	r1, r0
 80004c2:	fbb3 f0fe 	udiv	r0, r3, lr
 80004c6:	fb0e 3310 	mls	r3, lr, r0, r3
 80004ca:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004ce:	fb00 f308 	mul.w	r3, r0, r8
 80004d2:	428b      	cmp	r3, r1
 80004d4:	d907      	bls.n	80004e6 <__udivmoddi4+0x27e>
 80004d6:	1869      	adds	r1, r5, r1
 80004d8:	f100 3cff 	add.w	ip, r0, #4294967295
 80004dc:	d217      	bcs.n	800050e <__udivmoddi4+0x2a6>
 80004de:	428b      	cmp	r3, r1
 80004e0:	d915      	bls.n	800050e <__udivmoddi4+0x2a6>
 80004e2:	3802      	subs	r0, #2
 80004e4:	4429      	add	r1, r5
 80004e6:	1ac9      	subs	r1, r1, r3
 80004e8:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004ec:	e73b      	b.n	8000366 <__udivmoddi4+0xfe>
 80004ee:	4637      	mov	r7, r6
 80004f0:	4630      	mov	r0, r6
 80004f2:	e709      	b.n	8000308 <__udivmoddi4+0xa0>
 80004f4:	4607      	mov	r7, r0
 80004f6:	e6e7      	b.n	80002c8 <__udivmoddi4+0x60>
 80004f8:	4618      	mov	r0, r3
 80004fa:	e6fb      	b.n	80002f4 <__udivmoddi4+0x8c>
 80004fc:	4541      	cmp	r1, r8
 80004fe:	d2ab      	bcs.n	8000458 <__udivmoddi4+0x1f0>
 8000500:	ebb8 0a02 	subs.w	sl, r8, r2
 8000504:	eb69 020e 	sbc.w	r2, r9, lr
 8000508:	3801      	subs	r0, #1
 800050a:	4613      	mov	r3, r2
 800050c:	e7a4      	b.n	8000458 <__udivmoddi4+0x1f0>
 800050e:	4660      	mov	r0, ip
 8000510:	e7e9      	b.n	80004e6 <__udivmoddi4+0x27e>
 8000512:	4618      	mov	r0, r3
 8000514:	e795      	b.n	8000442 <__udivmoddi4+0x1da>
 8000516:	4667      	mov	r7, ip
 8000518:	e7d1      	b.n	80004be <__udivmoddi4+0x256>
 800051a:	4681      	mov	r9, r0
 800051c:	e77c      	b.n	8000418 <__udivmoddi4+0x1b0>
 800051e:	3802      	subs	r0, #2
 8000520:	442c      	add	r4, r5
 8000522:	e747      	b.n	80003b4 <__udivmoddi4+0x14c>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	442b      	add	r3, r5
 800052a:	e72f      	b.n	800038c <__udivmoddi4+0x124>
 800052c:	4638      	mov	r0, r7
 800052e:	e708      	b.n	8000342 <__udivmoddi4+0xda>
 8000530:	4637      	mov	r7, r6
 8000532:	e6e9      	b.n	8000308 <__udivmoddi4+0xa0>

08000534 <__aeabi_idiv0>:
 8000534:	4770      	bx	lr
 8000536:	bf00      	nop

08000538 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000538:	b5b0      	push	{r4, r5, r7, lr}
 800053a:	f5ad 7d08 	sub.w	sp, sp, #544	; 0x220
 800053e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	FRESULT res; /* FatFs function common result code */
	uint32_t byteswritten, bytesread; /* File write/read counts */
	uint8_t wtext[] = "STM32 FATFS works great!"; /* File write buffer */
 8000540:	4b38      	ldr	r3, [pc, #224]	; (8000624 <main+0xec>)
 8000542:	f507 7400 	add.w	r4, r7, #512	; 0x200
 8000546:	461d      	mov	r5, r3
 8000548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800054a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800054c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000550:	c403      	stmia	r4!, {r0, r1}
 8000552:	7022      	strb	r2, [r4, #0]
	uint8_t rtext[_MAX_SS];/* File read buffer */
	uint8_t testCMDVar = 0, testVar = 0; uint16_t delayVar = 10;
 8000554:	2300      	movs	r3, #0
 8000556:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
 800055a:	2300      	movs	r3, #0
 800055c:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
 8000560:	230a      	movs	r3, #10
 8000562:	f8a7 321c 	strh.w	r3, [r7, #540]	; 0x21c
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000566:	f000 fbe2 	bl	8000d2e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800056a:	f000 f869 	bl	8000640 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800056e:	f000 f939 	bl	80007e4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000572:	f000 f911 	bl	8000798 <MX_DMA_Init>
  MX_SDMMC2_SD_Init();
 8000576:	f000 f8ef 	bl	8000758 <MX_SDMMC2_SD_Init>
  MX_FATFS_Init();
 800057a:	f004 feb5 	bl	80052e8 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  if(f_mount(&SDFatFS, (TCHAR const*)SDPath, 0) != FR_OK)
 800057e:	2200      	movs	r2, #0
 8000580:	4929      	ldr	r1, [pc, #164]	; (8000628 <main+0xf0>)
 8000582:	482a      	ldr	r0, [pc, #168]	; (800062c <main+0xf4>)
 8000584:	f007 f9f8 	bl	8007978 <f_mount>
 8000588:	4603      	mov	r3, r0
 800058a:	2b00      	cmp	r3, #0
 800058c:	d001      	beq.n	8000592 <main+0x5a>
    {
        Error_Handler();
 800058e:	f000 f997 	bl	80008c0 <Error_Handler>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	testVar = BSP_SD_IsDetected();
 8000592:	f004 ff60 	bl	8005456 <BSP_SD_IsDetected>
 8000596:	4603      	mov	r3, r0
 8000598:	f887 321e 	strb.w	r3, [r7, #542]	; 0x21e
	HAL_Delay(delayVar);
 800059c:	f8b7 321c 	ldrh.w	r3, [r7, #540]	; 0x21c
 80005a0:	4618      	mov	r0, r3
 80005a2:	f000 fbf1 	bl	8000d88 <HAL_Delay>
  	switch(testCMDVar * testVar)
 80005a6:	f897 321f 	ldrb.w	r3, [r7, #543]	; 0x21f
 80005aa:	f897 221e 	ldrb.w	r2, [r7, #542]	; 0x21e
 80005ae:	fb02 f303 	mul.w	r3, r2, r3
 80005b2:	3b01      	subs	r3, #1
 80005b4:	2b03      	cmp	r3, #3
 80005b6:	d82c      	bhi.n	8000612 <main+0xda>
 80005b8:	a201      	add	r2, pc, #4	; (adr r2, 80005c0 <main+0x88>)
 80005ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005be:	bf00      	nop
 80005c0:	080005d1 	.word	0x080005d1
 80005c4:	080005e3 	.word	0x080005e3
 80005c8:	080005f5 	.word	0x080005f5
 80005cc:	08000607 	.word	0x08000607
  	{
  	case 1:
  		res = f_open(&SDFile, "LCLDEBUG.LOG", /*FA_OPEN_EXISTING	|*/ FA_READ);
 80005d0:	2201      	movs	r2, #1
 80005d2:	4917      	ldr	r1, [pc, #92]	; (8000630 <main+0xf8>)
 80005d4:	4817      	ldr	r0, [pc, #92]	; (8000634 <main+0xfc>)
 80005d6:	f007 fa15 	bl	8007a04 <f_open>
 80005da:	4603      	mov	r3, r0
 80005dc:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
  		if(res != FR_OK)
		{
			;//Error_Handler();
		}break;
 80005e0:	e018      	b.n	8000614 <main+0xdc>
  	case 2:
  		res = f_open(&SDFile, "VersionInfo.txt", FA_OPEN_EXISTING	| FA_READ);
 80005e2:	2201      	movs	r2, #1
 80005e4:	4914      	ldr	r1, [pc, #80]	; (8000638 <main+0x100>)
 80005e6:	4813      	ldr	r0, [pc, #76]	; (8000634 <main+0xfc>)
 80005e8:	f007 fa0c 	bl	8007a04 <f_open>
 80005ec:	4603      	mov	r3, r0
 80005ee:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
  		if(res != FR_OK)
		{
			;//Error_Handler();
		}break;
 80005f2:	e00f      	b.n	8000614 <main+0xdc>
  	case 3:
  		res = f_open(&SDFile, "LOG.CFG", /*FA_OPEN_EXISTING	|*/ FA_READ);
 80005f4:	2201      	movs	r2, #1
 80005f6:	4911      	ldr	r1, [pc, #68]	; (800063c <main+0x104>)
 80005f8:	480e      	ldr	r0, [pc, #56]	; (8000634 <main+0xfc>)
 80005fa:	f007 fa03 	bl	8007a04 <f_open>
 80005fe:	4603      	mov	r3, r0
 8000600:	f887 321b 	strb.w	r3, [r7, #539]	; 0x21b
  		if(res != FR_OK)
		{
			;//Error_Handler();
		}break;
 8000604:	e006      	b.n	8000614 <main+0xdc>
  	case 4:
  		f_mount(&SDFatFS, (TCHAR const*)NULL, 0);
 8000606:	2200      	movs	r2, #0
 8000608:	2100      	movs	r1, #0
 800060a:	4808      	ldr	r0, [pc, #32]	; (800062c <main+0xf4>)
 800060c:	f007 f9b4 	bl	8007978 <f_mount>
  		break;
 8000610:	e000      	b.n	8000614 <main+0xdc>
		default: break;
 8000612:	bf00      	nop
  	}
  	f_close(&SDFile);
 8000614:	4807      	ldr	r0, [pc, #28]	; (8000634 <main+0xfc>)
 8000616:	f007 fc31 	bl	8007e7c <f_close>
  	testCMDVar = 0;
 800061a:	2300      	movs	r3, #0
 800061c:	f887 321f 	strb.w	r3, [r7, #543]	; 0x21f
	testVar = BSP_SD_IsDetected();
 8000620:	e7b7      	b.n	8000592 <main+0x5a>
 8000622:	bf00      	nop
 8000624:	080081ac 	.word	0x080081ac
 8000628:	200003fc 	.word	0x200003fc
 800062c:	20000630 	.word	0x20000630
 8000630:	08008184 	.word	0x08008184
 8000634:	20000400 	.word	0x20000400
 8000638:	08008194 	.word	0x08008194
 800063c:	080081a4 	.word	0x080081a4

08000640 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b0b8      	sub	sp, #224	; 0xe0
 8000644:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000646:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 800064a:	2234      	movs	r2, #52	; 0x34
 800064c:	2100      	movs	r1, #0
 800064e:	4618      	mov	r0, r3
 8000650:	f007 fd84 	bl	800815c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000654:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
 8000662:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000664:	f107 0308 	add.w	r3, r7, #8
 8000668:	2290      	movs	r2, #144	; 0x90
 800066a:	2100      	movs	r1, #0
 800066c:	4618      	mov	r0, r3
 800066e:	f007 fd75 	bl	800815c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000672:	4b37      	ldr	r3, [pc, #220]	; (8000750 <SystemClock_Config+0x110>)
 8000674:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000676:	4a36      	ldr	r2, [pc, #216]	; (8000750 <SystemClock_Config+0x110>)
 8000678:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800067c:	6413      	str	r3, [r2, #64]	; 0x40
 800067e:	4b34      	ldr	r3, [pc, #208]	; (8000750 <SystemClock_Config+0x110>)
 8000680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000682:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000686:	607b      	str	r3, [r7, #4]
 8000688:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800068a:	4b32      	ldr	r3, [pc, #200]	; (8000754 <SystemClock_Config+0x114>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000692:	4a30      	ldr	r2, [pc, #192]	; (8000754 <SystemClock_Config+0x114>)
 8000694:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000698:	6013      	str	r3, [r2, #0]
 800069a:	4b2e      	ldr	r3, [pc, #184]	; (8000754 <SystemClock_Config+0x114>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006a2:	603b      	str	r3, [r7, #0]
 80006a4:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80006a6:	2301      	movs	r3, #1
 80006a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80006ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80006b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006b4:	2302      	movs	r3, #2
 80006b6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80006ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80006be:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 6;
 80006c2:	2306      	movs	r3, #6
 80006c4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 96;
 80006c8:	2360      	movs	r3, #96	; 0x60
 80006ca:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006ce:	2304      	movs	r3, #4
 80006d0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 80006de:	4618      	mov	r0, r3
 80006e0:	f001 f9bc 	bl	8001a5c <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0xae>
  {
    Error_Handler();
 80006ea:	f000 f8e9 	bl	80008c0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f4:	2302      	movs	r3, #2
 80006f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000700:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000704:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000708:	2300      	movs	r3, #0
 800070a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800070e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000712:	2101      	movs	r1, #1
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fc4f 	bl	8001fb8 <HAL_RCC_ClockConfig>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <SystemClock_Config+0xe4>
  {
    Error_Handler();
 8000720:	f000 f8ce 	bl	80008c0 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SDMMC2;
 8000724:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8000728:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Sdmmc2ClockSelection = RCC_SDMMC2CLKSOURCE_SYSCLK;
 800072a:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 800072e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000732:	f107 0308 	add.w	r3, r7, #8
 8000736:	4618      	mov	r0, r3
 8000738:	f001 fe2e 	bl	8002398 <HAL_RCCEx_PeriphCLKConfig>
 800073c:	4603      	mov	r3, r0
 800073e:	2b00      	cmp	r3, #0
 8000740:	d001      	beq.n	8000746 <SystemClock_Config+0x106>
  {
    Error_Handler();
 8000742:	f000 f8bd 	bl	80008c0 <Error_Handler>
  }
}
 8000746:	bf00      	nop
 8000748:	37e0      	adds	r7, #224	; 0xe0
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40023800 	.word	0x40023800
 8000754:	40007000 	.word	0x40007000

08000758 <MX_SDMMC2_SD_Init>:
  * @brief SDMMC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SDMMC2_SD_Init(void)
{
 8000758:	b480      	push	{r7}
 800075a:	af00      	add	r7, sp, #0
  /* USER CODE END SDMMC2_Init 0 */

  /* USER CODE BEGIN SDMMC2_Init 1 */

  /* USER CODE END SDMMC2_Init 1 */
  hsd2.Instance = SDMMC2;
 800075c:	4b0c      	ldr	r3, [pc, #48]	; (8000790 <MX_SDMMC2_SD_Init+0x38>)
 800075e:	4a0d      	ldr	r2, [pc, #52]	; (8000794 <MX_SDMMC2_SD_Init+0x3c>)
 8000760:	601a      	str	r2, [r3, #0]
  hsd2.Init.ClockEdge = SDMMC_CLOCK_EDGE_RISING;
 8000762:	4b0b      	ldr	r3, [pc, #44]	; (8000790 <MX_SDMMC2_SD_Init+0x38>)
 8000764:	2200      	movs	r2, #0
 8000766:	605a      	str	r2, [r3, #4]
  hsd2.Init.ClockBypass = SDMMC_CLOCK_BYPASS_DISABLE;
 8000768:	4b09      	ldr	r3, [pc, #36]	; (8000790 <MX_SDMMC2_SD_Init+0x38>)
 800076a:	2200      	movs	r2, #0
 800076c:	609a      	str	r2, [r3, #8]
  hsd2.Init.ClockPowerSave = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 800076e:	4b08      	ldr	r3, [pc, #32]	; (8000790 <MX_SDMMC2_SD_Init+0x38>)
 8000770:	2200      	movs	r2, #0
 8000772:	60da      	str	r2, [r3, #12]
  hsd2.Init.BusWide = SDMMC_BUS_WIDE_1B;
 8000774:	4b06      	ldr	r3, [pc, #24]	; (8000790 <MX_SDMMC2_SD_Init+0x38>)
 8000776:	2200      	movs	r2, #0
 8000778:	611a      	str	r2, [r3, #16]
  hsd2.Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 800077a:	4b05      	ldr	r3, [pc, #20]	; (8000790 <MX_SDMMC2_SD_Init+0x38>)
 800077c:	2200      	movs	r2, #0
 800077e:	615a      	str	r2, [r3, #20]
  hsd2.Init.ClockDiv = 0;
 8000780:	4b03      	ldr	r3, [pc, #12]	; (8000790 <MX_SDMMC2_SD_Init+0x38>)
 8000782:	2200      	movs	r2, #0
 8000784:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN SDMMC2_Init 2 */

  /* USER CODE END SDMMC2_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr
 8000790:	200002c4 	.word	0x200002c4
 8000794:	40011c00 	.word	0x40011c00

08000798 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b082      	sub	sp, #8
 800079c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800079e:	4b10      	ldr	r3, [pc, #64]	; (80007e0 <MX_DMA_Init+0x48>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	4a0f      	ldr	r2, [pc, #60]	; (80007e0 <MX_DMA_Init+0x48>)
 80007a4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80007a8:	6313      	str	r3, [r2, #48]	; 0x30
 80007aa:	4b0d      	ldr	r3, [pc, #52]	; (80007e0 <MX_DMA_Init+0x48>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80007b2:	607b      	str	r3, [r7, #4]
 80007b4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80007b6:	2200      	movs	r2, #0
 80007b8:	2100      	movs	r1, #0
 80007ba:	2038      	movs	r0, #56	; 0x38
 80007bc:	f000 fbbe 	bl	8000f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80007c0:	2038      	movs	r0, #56	; 0x38
 80007c2:	f000 fbd7 	bl	8000f74 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 0, 0);
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	2044      	movs	r0, #68	; 0x44
 80007cc:	f000 fbb6 	bl	8000f3c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 80007d0:	2044      	movs	r0, #68	; 0x44
 80007d2:	f000 fbcf 	bl	8000f74 <HAL_NVIC_EnableIRQ>

}
 80007d6:	bf00      	nop
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	40023800 	.word	0x40023800

080007e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b08a      	sub	sp, #40	; 0x28
 80007e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ea:	f107 0314 	add.w	r3, r7, #20
 80007ee:	2200      	movs	r2, #0
 80007f0:	601a      	str	r2, [r3, #0]
 80007f2:	605a      	str	r2, [r3, #4]
 80007f4:	609a      	str	r2, [r3, #8]
 80007f6:	60da      	str	r2, [r3, #12]
 80007f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <MX_GPIO_Init+0xb0>)
 80007fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007fe:	4a25      	ldr	r2, [pc, #148]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000800:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000804:	6313      	str	r3, [r2, #48]	; 0x30
 8000806:	4b23      	ldr	r3, [pc, #140]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000808:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800080a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800080e:	613b      	str	r3, [r7, #16]
 8000810:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b20      	ldr	r3, [pc, #128]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000816:	4a1f      	ldr	r2, [pc, #124]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	; 0x30
 800081e:	4b1d      	ldr	r3, [pc, #116]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800082a:	4b1a      	ldr	r3, [pc, #104]	; (8000894 <MX_GPIO_Init+0xb0>)
 800082c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082e:	4a19      	ldr	r2, [pc, #100]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000830:	f043 0308 	orr.w	r3, r3, #8
 8000834:	6313      	str	r3, [r2, #48]	; 0x30
 8000836:	4b17      	ldr	r3, [pc, #92]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800083a:	f003 0308 	and.w	r3, r3, #8
 800083e:	60bb      	str	r3, [r7, #8]
 8000840:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000842:	4b14      	ldr	r3, [pc, #80]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000846:	4a13      	ldr	r2, [pc, #76]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000848:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800084c:	6313      	str	r3, [r2, #48]	; 0x30
 800084e:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000852:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000856:	607b      	str	r3, [r7, #4]
 8000858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_GPIO_Init+0xb0>)
 800085c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800085e:	4a0d      	ldr	r2, [pc, #52]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000860:	f043 0302 	orr.w	r3, r3, #2
 8000864:	6313      	str	r3, [r2, #48]	; 0x30
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_GPIO_Init+0xb0>)
 8000868:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800086a:	f003 0302 	and.w	r3, r3, #2
 800086e:	603b      	str	r3, [r7, #0]
 8000870:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000872:	2320      	movs	r3, #32
 8000874:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000876:	2300      	movs	r3, #0
 8000878:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP; //GPIO_PULLDOWN;//GPIO_NOPULL;
 800087a:	2301      	movs	r3, #1
 800087c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800087e:	f107 0314 	add.w	r3, r7, #20
 8000882:	4619      	mov	r1, r3
 8000884:	4804      	ldr	r0, [pc, #16]	; (8000898 <MX_GPIO_Init+0xb4>)
 8000886:	f000 ff27 	bl	80016d8 <HAL_GPIO_Init>

}
 800088a:	bf00      	nop
 800088c:	3728      	adds	r7, #40	; 0x28
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40023800 	.word	0x40023800
 8000898:	40020400 	.word	0x40020400

0800089c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a04      	ldr	r2, [pc, #16]	; (80008bc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008aa:	4293      	cmp	r3, r2
 80008ac:	d101      	bne.n	80008b2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008ae:	f000 fa4b 	bl	8000d48 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008b2:	bf00      	nop
 80008b4:	3708      	adds	r7, #8
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	40000400 	.word	0x40000400

080008c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c0:	b480      	push	{r7}
 80008c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008c4:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008c6:	e7fe      	b.n	80008c6 <Error_Handler+0x6>

080008c8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80008ce:	4b0f      	ldr	r3, [pc, #60]	; (800090c <HAL_MspInit+0x44>)
 80008d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008d2:	4a0e      	ldr	r2, [pc, #56]	; (800090c <HAL_MspInit+0x44>)
 80008d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008d8:	6413      	str	r3, [r2, #64]	; 0x40
 80008da:	4b0c      	ldr	r3, [pc, #48]	; (800090c <HAL_MspInit+0x44>)
 80008dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008e2:	607b      	str	r3, [r7, #4]
 80008e4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008e6:	4b09      	ldr	r3, [pc, #36]	; (800090c <HAL_MspInit+0x44>)
 80008e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008ea:	4a08      	ldr	r2, [pc, #32]	; (800090c <HAL_MspInit+0x44>)
 80008ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80008f0:	6453      	str	r3, [r2, #68]	; 0x44
 80008f2:	4b06      	ldr	r3, [pc, #24]	; (800090c <HAL_MspInit+0x44>)
 80008f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80008fa:	603b      	str	r3, [r7, #0]
 80008fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40023800 	.word	0x40023800

08000910 <HAL_SD_MspInit>:
* This function configures the hardware resources used in this example
* @param hsd: SD handle pointer
* @retval None
*/
void HAL_SD_MspInit(SD_HandleTypeDef* hsd)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	b08c      	sub	sp, #48	; 0x30
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000918:	f107 031c 	add.w	r3, r7, #28
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
 8000922:	609a      	str	r2, [r3, #8]
 8000924:	60da      	str	r2, [r3, #12]
 8000926:	611a      	str	r2, [r3, #16]
  if(hsd->Instance==SDMMC2)
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a83      	ldr	r2, [pc, #524]	; (8000b3c <HAL_SD_MspInit+0x22c>)
 800092e:	4293      	cmp	r3, r2
 8000930:	f040 8100 	bne.w	8000b34 <HAL_SD_MspInit+0x224>
  {
  /* USER CODE BEGIN SDMMC2_MspInit 0 */

  /* USER CODE END SDMMC2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SDMMC2_CLK_ENABLE();
 8000934:	4b82      	ldr	r3, [pc, #520]	; (8000b40 <HAL_SD_MspInit+0x230>)
 8000936:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000938:	4a81      	ldr	r2, [pc, #516]	; (8000b40 <HAL_SD_MspInit+0x230>)
 800093a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093e:	6453      	str	r3, [r2, #68]	; 0x44
 8000940:	4b7f      	ldr	r3, [pc, #508]	; (8000b40 <HAL_SD_MspInit+0x230>)
 8000942:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000944:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000948:	61bb      	str	r3, [r7, #24]
 800094a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800094c:	4b7c      	ldr	r3, [pc, #496]	; (8000b40 <HAL_SD_MspInit+0x230>)
 800094e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000950:	4a7b      	ldr	r2, [pc, #492]	; (8000b40 <HAL_SD_MspInit+0x230>)
 8000952:	f043 0308 	orr.w	r3, r3, #8
 8000956:	6313      	str	r3, [r2, #48]	; 0x30
 8000958:	4b79      	ldr	r3, [pc, #484]	; (8000b40 <HAL_SD_MspInit+0x230>)
 800095a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095c:	f003 0308 	and.w	r3, r3, #8
 8000960:	617b      	str	r3, [r7, #20]
 8000962:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000964:	4b76      	ldr	r3, [pc, #472]	; (8000b40 <HAL_SD_MspInit+0x230>)
 8000966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000968:	4a75      	ldr	r2, [pc, #468]	; (8000b40 <HAL_SD_MspInit+0x230>)
 800096a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800096e:	6313      	str	r3, [r2, #48]	; 0x30
 8000970:	4b73      	ldr	r3, [pc, #460]	; (8000b40 <HAL_SD_MspInit+0x230>)
 8000972:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000974:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000978:	613b      	str	r3, [r7, #16]
 800097a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800097c:	4b70      	ldr	r3, [pc, #448]	; (8000b40 <HAL_SD_MspInit+0x230>)
 800097e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000980:	4a6f      	ldr	r2, [pc, #444]	; (8000b40 <HAL_SD_MspInit+0x230>)
 8000982:	f043 0302 	orr.w	r3, r3, #2
 8000986:	6313      	str	r3, [r2, #48]	; 0x30
 8000988:	4b6d      	ldr	r3, [pc, #436]	; (8000b40 <HAL_SD_MspInit+0x230>)
 800098a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098c:	f003 0302 	and.w	r3, r3, #2
 8000990:	60fb      	str	r3, [r7, #12]
 8000992:	68fb      	ldr	r3, [r7, #12]
    PG9     ------> SDMMC2_D0
    PG10     ------> SDMMC2_D1
    PG11     ------> SDMMC2_D2
    PB4     ------> SDMMC2_D3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000994:	2340      	movs	r3, #64	; 0x40
 8000996:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000998:	2302      	movs	r3, #2
 800099a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a0:	2303      	movs	r3, #3
 80009a2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80009a4:	230b      	movs	r3, #11
 80009a6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009a8:	f107 031c 	add.w	r3, r7, #28
 80009ac:	4619      	mov	r1, r3
 80009ae:	4865      	ldr	r0, [pc, #404]	; (8000b44 <HAL_SD_MspInit+0x234>)
 80009b0:	f000 fe92 	bl	80016d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009b4:	2380      	movs	r3, #128	; 0x80
 80009b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009bc:	2301      	movs	r3, #1
 80009be:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80009c4:	230b      	movs	r3, #11
 80009c6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	485d      	ldr	r0, [pc, #372]	; (8000b44 <HAL_SD_MspInit+0x234>)
 80009d0:	f000 fe82 	bl	80016d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009d4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80009d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009de:	2301      	movs	r3, #1
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF11_SDMMC2;
 80009e6:	230b      	movs	r3, #11
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4855      	ldr	r0, [pc, #340]	; (8000b48 <HAL_SD_MspInit+0x238>)
 80009f2:	f000 fe71 	bl	80016d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80009f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80009fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a00:	2301      	movs	r3, #1
 8000a02:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a04:	2303      	movs	r3, #3
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000a08:	230a      	movs	r3, #10
 8000a0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0c:	f107 031c 	add.w	r3, r7, #28
 8000a10:	4619      	mov	r1, r3
 8000a12:	484d      	ldr	r0, [pc, #308]	; (8000b48 <HAL_SD_MspInit+0x238>)
 8000a14:	f000 fe60 	bl	80016d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000a18:	2310      	movs	r3, #16
 8000a1a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1c:	2302      	movs	r3, #2
 8000a1e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a20:	2301      	movs	r3, #1
 8000a22:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a24:	2303      	movs	r3, #3
 8000a26:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SDMMC2;
 8000a28:	230a      	movs	r3, #10
 8000a2a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a2c:	f107 031c 	add.w	r3, r7, #28
 8000a30:	4619      	mov	r1, r3
 8000a32:	4846      	ldr	r0, [pc, #280]	; (8000b4c <HAL_SD_MspInit+0x23c>)
 8000a34:	f000 fe50 	bl	80016d8 <HAL_GPIO_Init>

    /* SDMMC2 DMA Init */
    /* SDMMC2_RX Init */
    hdma_sdmmc2_rx.Instance = DMA2_Stream0;
 8000a38:	4b45      	ldr	r3, [pc, #276]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a3a:	4a46      	ldr	r2, [pc, #280]	; (8000b54 <HAL_SD_MspInit+0x244>)
 8000a3c:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_rx.Init.Channel = DMA_CHANNEL_11;
 8000a3e:	4b44      	ldr	r3, [pc, #272]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a40:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8000a44:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000a46:	4b42      	ldr	r3, [pc, #264]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000a4c:	4b40      	ldr	r3, [pc, #256]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000a52:	4b3f      	ldr	r3, [pc, #252]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a54:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000a58:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000a5a:	4b3d      	ldr	r3, [pc, #244]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a5c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a60:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000a62:	4b3b      	ldr	r3, [pc, #236]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a64:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a68:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_rx.Init.Mode = DMA_PFCTRL;
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a6c:	2220      	movs	r2, #32
 8000a6e:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000a70:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000a76:	4b36      	ldr	r3, [pc, #216]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a78:	2204      	movs	r2, #4
 8000a7a:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000a7c:	4b34      	ldr	r3, [pc, #208]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a7e:	2203      	movs	r2, #3
 8000a80:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_rx.Init.MemBurst = DMA_MBURST_INC4;
 8000a82:	4b33      	ldr	r3, [pc, #204]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a84:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000a88:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_rx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000a8a:	4b31      	ldr	r3, [pc, #196]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a8c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000a90:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_rx) != HAL_OK)
 8000a92:	482f      	ldr	r0, [pc, #188]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000a94:	f000 fa7c 	bl	8000f90 <HAL_DMA_Init>
 8000a98:	4603      	mov	r3, r0
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d001      	beq.n	8000aa2 <HAL_SD_MspInit+0x192>
    {
      Error_Handler();
 8000a9e:	f7ff ff0f 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmarx,hdma_sdmmc2_rx);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	4a2a      	ldr	r2, [pc, #168]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8000aa8:	4a29      	ldr	r2, [pc, #164]	; (8000b50 <HAL_SD_MspInit+0x240>)
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2_TX Init */
    hdma_sdmmc2_tx.Instance = DMA2_Stream5;
 8000aae:	4b2a      	ldr	r3, [pc, #168]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000ab0:	4a2a      	ldr	r2, [pc, #168]	; (8000b5c <HAL_SD_MspInit+0x24c>)
 8000ab2:	601a      	str	r2, [r3, #0]
    hdma_sdmmc2_tx.Init.Channel = DMA_CHANNEL_11;
 8000ab4:	4b28      	ldr	r3, [pc, #160]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000ab6:	f04f 52b0 	mov.w	r2, #369098752	; 0x16000000
 8000aba:	605a      	str	r2, [r3, #4]
    hdma_sdmmc2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000abc:	4b26      	ldr	r3, [pc, #152]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000abe:	2240      	movs	r2, #64	; 0x40
 8000ac0:	609a      	str	r2, [r3, #8]
    hdma_sdmmc2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000ac2:	4b25      	ldr	r3, [pc, #148]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	60da      	str	r2, [r3, #12]
    hdma_sdmmc2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000ac8:	4b23      	ldr	r3, [pc, #140]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000aca:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000ace:	611a      	str	r2, [r3, #16]
    hdma_sdmmc2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000ad0:	4b21      	ldr	r3, [pc, #132]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000ad2:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ad6:	615a      	str	r2, [r3, #20]
    hdma_sdmmc2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000ad8:	4b1f      	ldr	r3, [pc, #124]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000ada:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ade:	619a      	str	r2, [r3, #24]
    hdma_sdmmc2_tx.Init.Mode = DMA_PFCTRL;
 8000ae0:	4b1d      	ldr	r3, [pc, #116]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000ae2:	2220      	movs	r2, #32
 8000ae4:	61da      	str	r2, [r3, #28]
    hdma_sdmmc2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000ae8:	2200      	movs	r2, #0
 8000aea:	621a      	str	r2, [r3, #32]
    hdma_sdmmc2_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000aee:	2204      	movs	r2, #4
 8000af0:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_sdmmc2_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_FULL;
 8000af2:	4b19      	ldr	r3, [pc, #100]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000af4:	2203      	movs	r2, #3
 8000af6:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_sdmmc2_tx.Init.MemBurst = DMA_MBURST_INC4;
 8000af8:	4b17      	ldr	r3, [pc, #92]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000afa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000afe:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_sdmmc2_tx.Init.PeriphBurst = DMA_PBURST_INC4;
 8000b00:	4b15      	ldr	r3, [pc, #84]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000b02:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8000b06:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_sdmmc2_tx) != HAL_OK)
 8000b08:	4813      	ldr	r0, [pc, #76]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000b0a:	f000 fa41 	bl	8000f90 <HAL_DMA_Init>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <HAL_SD_MspInit+0x208>
    {
      Error_Handler();
 8000b14:	f7ff fed4 	bl	80008c0 <Error_Handler>
    }

    __HAL_LINKDMA(hsd,hdmatx,hdma_sdmmc2_tx);
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4a0f      	ldr	r2, [pc, #60]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000b1c:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_SD_MspInit+0x248>)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6393      	str	r3, [r2, #56]	; 0x38

    /* SDMMC2 interrupt Init */
    HAL_NVIC_SetPriority(SDMMC2_IRQn, 0, 0);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2100      	movs	r1, #0
 8000b28:	2067      	movs	r0, #103	; 0x67
 8000b2a:	f000 fa07 	bl	8000f3c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC2_IRQn);
 8000b2e:	2067      	movs	r0, #103	; 0x67
 8000b30:	f000 fa20 	bl	8000f74 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SDMMC2_MspInit 1 */

  /* USER CODE END SDMMC2_MspInit 1 */
  }

}
 8000b34:	bf00      	nop
 8000b36:	3730      	adds	r7, #48	; 0x30
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	bd80      	pop	{r7, pc}
 8000b3c:	40011c00 	.word	0x40011c00
 8000b40:	40023800 	.word	0x40023800
 8000b44:	40020c00 	.word	0x40020c00
 8000b48:	40021800 	.word	0x40021800
 8000b4c:	40020400 	.word	0x40020400
 8000b50:	20000348 	.word	0x20000348
 8000b54:	40026410 	.word	0x40026410
 8000b58:	20000264 	.word	0x20000264
 8000b5c:	40026488 	.word	0x40026488

08000b60 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b08c      	sub	sp, #48	; 0x30
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0);
 8000b70:	2200      	movs	r2, #0
 8000b72:	6879      	ldr	r1, [r7, #4]
 8000b74:	201d      	movs	r0, #29
 8000b76:	f000 f9e1 	bl	8000f3c <HAL_NVIC_SetPriority>

  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000b7a:	201d      	movs	r0, #29
 8000b7c:	f000 f9fa 	bl	8000f74 <HAL_NVIC_EnableIRQ>
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 8000b80:	4b1f      	ldr	r3, [pc, #124]	; (8000c00 <HAL_InitTick+0xa0>)
 8000b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b84:	4a1e      	ldr	r2, [pc, #120]	; (8000c00 <HAL_InitTick+0xa0>)
 8000b86:	f043 0302 	orr.w	r3, r3, #2
 8000b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8000b8c:	4b1c      	ldr	r3, [pc, #112]	; (8000c00 <HAL_InitTick+0xa0>)
 8000b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b90:	f003 0302 	and.w	r3, r3, #2
 8000b94:	60fb      	str	r3, [r7, #12]
 8000b96:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b98:	f107 0210 	add.w	r2, r7, #16
 8000b9c:	f107 0314 	add.w	r3, r7, #20
 8000ba0:	4611      	mov	r1, r2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f001 fbc6 	bl	8002334 <HAL_RCC_GetClockConfig>

  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000ba8:	f001 fbb0 	bl	800230c <HAL_RCC_GetPCLK1Freq>
 8000bac:	4603      	mov	r3, r0
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bb4:	4a13      	ldr	r2, [pc, #76]	; (8000c04 <HAL_InitTick+0xa4>)
 8000bb6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bba:	0c9b      	lsrs	r3, r3, #18
 8000bbc:	3b01      	subs	r3, #1
 8000bbe:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8000bc0:	4b11      	ldr	r3, [pc, #68]	; (8000c08 <HAL_InitTick+0xa8>)
 8000bc2:	4a12      	ldr	r2, [pc, #72]	; (8000c0c <HAL_InitTick+0xac>)
 8000bc4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000U / 1000U) - 1U;
 8000bc6:	4b10      	ldr	r3, [pc, #64]	; (8000c08 <HAL_InitTick+0xa8>)
 8000bc8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000bcc:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8000bce:	4a0e      	ldr	r2, [pc, #56]	; (8000c08 <HAL_InitTick+0xa8>)
 8000bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bd2:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8000bd4:	4b0c      	ldr	r3, [pc, #48]	; (8000c08 <HAL_InitTick+0xa8>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bda:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <HAL_InitTick+0xa8>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8000be0:	4809      	ldr	r0, [pc, #36]	; (8000c08 <HAL_InitTick+0xa8>)
 8000be2:	f003 fb2c 	bl	800423e <HAL_TIM_Base_Init>
 8000be6:	4603      	mov	r3, r0
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d104      	bne.n	8000bf6 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8000bec:	4806      	ldr	r0, [pc, #24]	; (8000c08 <HAL_InitTick+0xa8>)
 8000bee:	f003 fb87 	bl	8004300 <HAL_TIM_Base_Start_IT>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	e000      	b.n	8000bf8 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
}
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	3730      	adds	r7, #48	; 0x30
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	40023800 	.word	0x40023800
 8000c04:	431bde83 	.word	0x431bde83
 8000c08:	200003a8 	.word	0x200003a8
 8000c0c:	40000400 	.word	0x40000400

08000c10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c10:	b480      	push	{r7}
 8000c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c14:	e7fe      	b.n	8000c14 <NMI_Handler+0x4>

08000c16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c16:	b480      	push	{r7}
 8000c18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c1a:	e7fe      	b.n	8000c1a <HardFault_Handler+0x4>

08000c1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c20:	e7fe      	b.n	8000c20 <MemManage_Handler+0x4>

08000c22 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c22:	b480      	push	{r7}
 8000c24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c26:	e7fe      	b.n	8000c26 <BusFault_Handler+0x4>

08000c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c2c:	e7fe      	b.n	8000c2c <UsageFault_Handler+0x4>

08000c2e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr

08000c4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c4a:	b480      	push	{r7}
 8000c4c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c4e:	bf00      	nop
 8000c50:	46bd      	mov	sp, r7
 8000c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c56:	4770      	bx	lr

08000c58 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000c6c:	4802      	ldr	r0, [pc, #8]	; (8000c78 <TIM3_IRQHandler+0x10>)
 8000c6e:	f003 fbbf 	bl	80043f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	200003a8 	.word	0x200003a8

08000c7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_rx);
 8000c80:	4802      	ldr	r0, [pc, #8]	; (8000c8c <DMA2_Stream0_IRQHandler+0x10>)
 8000c82:	f000 fab5 	bl	80011f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c86:	bf00      	nop
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	20000348 	.word	0x20000348

08000c90 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sdmmc2_tx);
 8000c94:	4802      	ldr	r0, [pc, #8]	; (8000ca0 <DMA2_Stream5_IRQHandler+0x10>)
 8000c96:	f000 faab 	bl	80011f0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8000c9a:	bf00      	nop
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	20000264 	.word	0x20000264

08000ca4 <SDMMC2_IRQHandler>:

/**
  * @brief This function handles SDMMC2 global interrupt.
  */
void SDMMC2_IRQHandler(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SDMMC2_IRQn 0 */

  /* USER CODE END SDMMC2_IRQn 0 */
  HAL_SD_IRQHandler(&hsd2);
 8000ca8:	4802      	ldr	r0, [pc, #8]	; (8000cb4 <SDMMC2_IRQHandler+0x10>)
 8000caa:	f002 fa1d 	bl	80030e8 <HAL_SD_IRQHandler>
  /* USER CODE BEGIN SDMMC2_IRQn 1 */

  /* USER CODE END SDMMC2_IRQn 1 */
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	200002c4 	.word	0x200002c4

08000cb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000cbc:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <SystemInit+0x20>)
 8000cbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <SystemInit+0x20>)
 8000cc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000cc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
 8000cd6:	bf00      	nop
 8000cd8:	e000ed00 	.word	0xe000ed00

08000cdc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000cdc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d14 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ce0:	480d      	ldr	r0, [pc, #52]	; (8000d18 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000ce2:	490e      	ldr	r1, [pc, #56]	; (8000d1c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000ce4:	4a0e      	ldr	r2, [pc, #56]	; (8000d20 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000ce6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ce8:	e002      	b.n	8000cf0 <LoopCopyDataInit>

08000cea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cee:	3304      	adds	r3, #4

08000cf0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cf0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cf2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cf4:	d3f9      	bcc.n	8000cea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cf6:	4a0b      	ldr	r2, [pc, #44]	; (8000d24 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000cf8:	4c0b      	ldr	r4, [pc, #44]	; (8000d28 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000cfa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cfc:	e001      	b.n	8000d02 <LoopFillZerobss>

08000cfe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cfe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d00:	3204      	adds	r2, #4

08000d02 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d02:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d04:	d3fb      	bcc.n	8000cfe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000d06:	f7ff ffd7 	bl	8000cb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000d0a:	f007 fa03 	bl	8008114 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000d0e:	f7ff fc13 	bl	8000538 <main>
  bx  lr    
 8000d12:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000d14:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8000d18:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d1c:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000d20:	08008694 	.word	0x08008694
  ldr r2, =_sbss
 8000d24:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000d28:	20000864 	.word	0x20000864

08000d2c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000d2c:	e7fe      	b.n	8000d2c <ADC_IRQHandler>

08000d2e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d2e:	b580      	push	{r7, lr}
 8000d30:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d32:	2003      	movs	r0, #3
 8000d34:	f000 f8f7 	bl	8000f26 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff ff11 	bl	8000b60 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d3e:	f7ff fdc3 	bl	80008c8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d42:	2300      	movs	r3, #0
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	bd80      	pop	{r7, pc}

08000d48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d4c:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_IncTick+0x20>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	461a      	mov	r2, r3
 8000d52:	4b06      	ldr	r3, [pc, #24]	; (8000d6c <HAL_IncTick+0x24>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4413      	add	r3, r2
 8000d58:	4a04      	ldr	r2, [pc, #16]	; (8000d6c <HAL_IncTick+0x24>)
 8000d5a:	6013      	str	r3, [r2, #0]
}
 8000d5c:	bf00      	nop
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	20000008 	.word	0x20000008
 8000d6c:	200003f4 	.word	0x200003f4

08000d70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d70:	b480      	push	{r7}
 8000d72:	af00      	add	r7, sp, #0
  return uwTick;
 8000d74:	4b03      	ldr	r3, [pc, #12]	; (8000d84 <HAL_GetTick+0x14>)
 8000d76:	681b      	ldr	r3, [r3, #0]
}
 8000d78:	4618      	mov	r0, r3
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d80:	4770      	bx	lr
 8000d82:	bf00      	nop
 8000d84:	200003f4 	.word	0x200003f4

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff ffee 	bl	8000d70 <HAL_GetTick>
 8000d94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <HAL_Delay+0x40>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	461a      	mov	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	4413      	add	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dae:	bf00      	nop
 8000db0:	f7ff ffde 	bl	8000d70 <HAL_GetTick>
 8000db4:	4602      	mov	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	bf00      	nop
 8000dc2:	3710      	adds	r7, #16
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	bd80      	pop	{r7, pc}
 8000dc8:	20000008 	.word	0x20000008

08000dcc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ddc:	4b0b      	ldr	r3, [pc, #44]	; (8000e0c <__NVIC_SetPriorityGrouping+0x40>)
 8000dde:	68db      	ldr	r3, [r3, #12]
 8000de0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000de8:	4013      	ands	r3, r2
 8000dea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000df4:	4b06      	ldr	r3, [pc, #24]	; (8000e10 <__NVIC_SetPriorityGrouping+0x44>)
 8000df6:	4313      	orrs	r3, r2
 8000df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000dfa:	4a04      	ldr	r2, [pc, #16]	; (8000e0c <__NVIC_SetPriorityGrouping+0x40>)
 8000dfc:	68bb      	ldr	r3, [r7, #8]
 8000dfe:	60d3      	str	r3, [r2, #12]
}
 8000e00:	bf00      	nop
 8000e02:	3714      	adds	r7, #20
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr
 8000e0c:	e000ed00 	.word	0xe000ed00
 8000e10:	05fa0000 	.word	0x05fa0000

08000e14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e18:	4b04      	ldr	r3, [pc, #16]	; (8000e2c <__NVIC_GetPriorityGrouping+0x18>)
 8000e1a:	68db      	ldr	r3, [r3, #12]
 8000e1c:	0a1b      	lsrs	r3, r3, #8
 8000e1e:	f003 0307 	and.w	r3, r3, #7
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	46bd      	mov	sp, r7
 8000e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2a:	4770      	bx	lr
 8000e2c:	e000ed00 	.word	0xe000ed00

08000e30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	db0b      	blt.n	8000e5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000e42:	79fb      	ldrb	r3, [r7, #7]
 8000e44:	f003 021f 	and.w	r2, r3, #31
 8000e48:	4907      	ldr	r1, [pc, #28]	; (8000e68 <__NVIC_EnableIRQ+0x38>)
 8000e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e4e:	095b      	lsrs	r3, r3, #5
 8000e50:	2001      	movs	r0, #1
 8000e52:	fa00 f202 	lsl.w	r2, r0, r2
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000e5a:	bf00      	nop
 8000e5c:	370c      	adds	r7, #12
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e64:	4770      	bx	lr
 8000e66:	bf00      	nop
 8000e68:	e000e100 	.word	0xe000e100

08000e6c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e6c:	b480      	push	{r7}
 8000e6e:	b083      	sub	sp, #12
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	4603      	mov	r3, r0
 8000e74:	6039      	str	r1, [r7, #0]
 8000e76:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e78:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	db0a      	blt.n	8000e96 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e80:	683b      	ldr	r3, [r7, #0]
 8000e82:	b2da      	uxtb	r2, r3
 8000e84:	490c      	ldr	r1, [pc, #48]	; (8000eb8 <__NVIC_SetPriority+0x4c>)
 8000e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e8a:	0112      	lsls	r2, r2, #4
 8000e8c:	b2d2      	uxtb	r2, r2
 8000e8e:	440b      	add	r3, r1
 8000e90:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e94:	e00a      	b.n	8000eac <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	b2da      	uxtb	r2, r3
 8000e9a:	4908      	ldr	r1, [pc, #32]	; (8000ebc <__NVIC_SetPriority+0x50>)
 8000e9c:	79fb      	ldrb	r3, [r7, #7]
 8000e9e:	f003 030f 	and.w	r3, r3, #15
 8000ea2:	3b04      	subs	r3, #4
 8000ea4:	0112      	lsls	r2, r2, #4
 8000ea6:	b2d2      	uxtb	r2, r2
 8000ea8:	440b      	add	r3, r1
 8000eaa:	761a      	strb	r2, [r3, #24]
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	e000e100 	.word	0xe000e100
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b089      	sub	sp, #36	; 0x24
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	60f8      	str	r0, [r7, #12]
 8000ec8:	60b9      	str	r1, [r7, #8]
 8000eca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	f1c3 0307 	rsb	r3, r3, #7
 8000eda:	2b04      	cmp	r3, #4
 8000edc:	bf28      	it	cs
 8000ede:	2304      	movcs	r3, #4
 8000ee0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	3304      	adds	r3, #4
 8000ee6:	2b06      	cmp	r3, #6
 8000ee8:	d902      	bls.n	8000ef0 <NVIC_EncodePriority+0x30>
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3b03      	subs	r3, #3
 8000eee:	e000      	b.n	8000ef2 <NVIC_EncodePriority+0x32>
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ef4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	43da      	mvns	r2, r3
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	401a      	ands	r2, r3
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f08:	f04f 31ff 	mov.w	r1, #4294967295
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f12:	43d9      	mvns	r1, r3
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f18:	4313      	orrs	r3, r2
         );
}
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	3724      	adds	r7, #36	; 0x24
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ff4c 	bl	8000dcc <__NVIC_SetPriorityGrouping>
}
 8000f34:	bf00      	nop
 8000f36:	3708      	adds	r7, #8
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b086      	sub	sp, #24
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	4603      	mov	r3, r0
 8000f44:	60b9      	str	r1, [r7, #8]
 8000f46:	607a      	str	r2, [r7, #4]
 8000f48:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f4e:	f7ff ff61 	bl	8000e14 <__NVIC_GetPriorityGrouping>
 8000f52:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000f54:	687a      	ldr	r2, [r7, #4]
 8000f56:	68b9      	ldr	r1, [r7, #8]
 8000f58:	6978      	ldr	r0, [r7, #20]
 8000f5a:	f7ff ffb1 	bl	8000ec0 <NVIC_EncodePriority>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f64:	4611      	mov	r1, r2
 8000f66:	4618      	mov	r0, r3
 8000f68:	f7ff ff80 	bl	8000e6c <__NVIC_SetPriority>
}
 8000f6c:	bf00      	nop
 8000f6e:	3718      	adds	r7, #24
 8000f70:	46bd      	mov	sp, r7
 8000f72:	bd80      	pop	{r7, pc}

08000f74 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	4618      	mov	r0, r3
 8000f84:	f7ff ff54 	bl	8000e30 <__NVIC_EnableIRQ>
}
 8000f88:	bf00      	nop
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}

08000f90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b086      	sub	sp, #24
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8000f9c:	f7ff fee8 	bl	8000d70 <HAL_GetTick>
 8000fa0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d101      	bne.n	8000fac <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8000fa8:	2301      	movs	r3, #1
 8000faa:	e099      	b.n	80010e0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	2202      	movs	r2, #2
 8000fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	681a      	ldr	r2, [r3, #0]
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f022 0201 	bic.w	r2, r2, #1
 8000fca:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fcc:	e00f      	b.n	8000fee <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000fce:	f7ff fecf 	bl	8000d70 <HAL_GetTick>
 8000fd2:	4602      	mov	r2, r0
 8000fd4:	693b      	ldr	r3, [r7, #16]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	2b05      	cmp	r3, #5
 8000fda:	d908      	bls.n	8000fee <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	2220      	movs	r2, #32
 8000fe0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8000fea:	2303      	movs	r3, #3
 8000fec:	e078      	b.n	80010e0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1e8      	bne.n	8000fce <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001004:	697a      	ldr	r2, [r7, #20]
 8001006:	4b38      	ldr	r3, [pc, #224]	; (80010e8 <HAL_DMA_Init+0x158>)
 8001008:	4013      	ands	r3, r2
 800100a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	685a      	ldr	r2, [r3, #4]
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800101a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	691b      	ldr	r3, [r3, #16]
 8001020:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001026:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	699b      	ldr	r3, [r3, #24]
 800102c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001032:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	6a1b      	ldr	r3, [r3, #32]
 8001038:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800103a:	697a      	ldr	r2, [r7, #20]
 800103c:	4313      	orrs	r3, r2
 800103e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001044:	2b04      	cmp	r3, #4
 8001046:	d107      	bne.n	8001058 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001050:	4313      	orrs	r3, r2
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	4313      	orrs	r3, r2
 8001056:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	695b      	ldr	r3, [r3, #20]
 8001066:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	f023 0307 	bic.w	r3, r3, #7
 800106e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001074:	697a      	ldr	r2, [r7, #20]
 8001076:	4313      	orrs	r3, r2
 8001078:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800107e:	2b04      	cmp	r3, #4
 8001080:	d117      	bne.n	80010b2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001086:	697a      	ldr	r2, [r7, #20]
 8001088:	4313      	orrs	r3, r2
 800108a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001090:	2b00      	cmp	r3, #0
 8001092:	d00e      	beq.n	80010b2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001094:	6878      	ldr	r0, [r7, #4]
 8001096:	f000 faa5 	bl	80015e4 <DMA_CheckFifoParam>
 800109a:	4603      	mov	r3, r0
 800109c:	2b00      	cmp	r3, #0
 800109e:	d008      	beq.n	80010b2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	2240      	movs	r2, #64	; 0x40
 80010a4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2201      	movs	r2, #1
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80010ae:	2301      	movs	r3, #1
 80010b0:	e016      	b.n	80010e0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	697a      	ldr	r2, [r7, #20]
 80010b8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80010ba:	6878      	ldr	r0, [r7, #4]
 80010bc:	f000 fa5c 	bl	8001578 <DMA_CalcBaseAndBitshift>
 80010c0:	4603      	mov	r3, r0
 80010c2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010c8:	223f      	movs	r2, #63	; 0x3f
 80010ca:	409a      	lsls	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	2200      	movs	r2, #0
 80010d4:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	2201      	movs	r2, #1
 80010da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 80010de:	2300      	movs	r3, #0
}
 80010e0:	4618      	mov	r0, r3
 80010e2:	3718      	adds	r7, #24
 80010e4:	46bd      	mov	sp, r7
 80010e6:	bd80      	pop	{r7, pc}
 80010e8:	e010803f 	.word	0xe010803f

080010ec <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b086      	sub	sp, #24
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80010fa:	2300      	movs	r3, #0
 80010fc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001102:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001104:	68fb      	ldr	r3, [r7, #12]
 8001106:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800110a:	2b01      	cmp	r3, #1
 800110c:	d101      	bne.n	8001112 <HAL_DMA_Start_IT+0x26>
 800110e:	2302      	movs	r3, #2
 8001110:	e048      	b.n	80011a4 <HAL_DMA_Start_IT+0xb8>
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	2201      	movs	r2, #1
 8001116:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001120:	b2db      	uxtb	r3, r3
 8001122:	2b01      	cmp	r3, #1
 8001124:	d137      	bne.n	8001196 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	2202      	movs	r2, #2
 800112a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	2200      	movs	r2, #0
 8001132:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	687a      	ldr	r2, [r7, #4]
 8001138:	68b9      	ldr	r1, [r7, #8]
 800113a:	68f8      	ldr	r0, [r7, #12]
 800113c:	f000 f9ee 	bl	800151c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001144:	223f      	movs	r2, #63	; 0x3f
 8001146:	409a      	lsls	r2, r3
 8001148:	693b      	ldr	r3, [r7, #16]
 800114a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	681a      	ldr	r2, [r3, #0]
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	f042 0216 	orr.w	r2, r2, #22
 800115a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	695a      	ldr	r2, [r3, #20]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800116a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001170:	2b00      	cmp	r3, #0
 8001172:	d007      	beq.n	8001184 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001174:	68fb      	ldr	r3, [r7, #12]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	681a      	ldr	r2, [r3, #0]
 800117a:	68fb      	ldr	r3, [r7, #12]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f042 0208 	orr.w	r2, r2, #8
 8001182:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001184:	68fb      	ldr	r3, [r7, #12]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	681a      	ldr	r2, [r3, #0]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	f042 0201 	orr.w	r2, r2, #1
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	e005      	b.n	80011a2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	2200      	movs	r2, #0
 800119a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800119e:	2302      	movs	r3, #2
 80011a0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80011a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3718      	adds	r7, #24
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b083      	sub	sp, #12
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d004      	beq.n	80011ca <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	2280      	movs	r2, #128	; 0x80
 80011c4:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80011c6:	2301      	movs	r3, #1
 80011c8:	e00c      	b.n	80011e4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2205      	movs	r2, #5
 80011ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	681a      	ldr	r2, [r3, #0]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f022 0201 	bic.w	r2, r2, #1
 80011e0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80011e2:	2300      	movs	r3, #0
}
 80011e4:	4618      	mov	r0, r3
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b086      	sub	sp, #24
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80011f8:	2300      	movs	r3, #0
 80011fa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80011fc:	4b92      	ldr	r3, [pc, #584]	; (8001448 <HAL_DMA_IRQHandler+0x258>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	4a92      	ldr	r2, [pc, #584]	; (800144c <HAL_DMA_IRQHandler+0x25c>)
 8001202:	fba2 2303 	umull	r2, r3, r2, r3
 8001206:	0a9b      	lsrs	r3, r3, #10
 8001208:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800120e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001210:	693b      	ldr	r3, [r7, #16]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800121a:	2208      	movs	r2, #8
 800121c:	409a      	lsls	r2, r3
 800121e:	68fb      	ldr	r3, [r7, #12]
 8001220:	4013      	ands	r3, r2
 8001222:	2b00      	cmp	r3, #0
 8001224:	d01a      	beq.n	800125c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	f003 0304 	and.w	r3, r3, #4
 8001230:	2b00      	cmp	r3, #0
 8001232:	d013      	beq.n	800125c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	681a      	ldr	r2, [r3, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	f022 0204 	bic.w	r2, r2, #4
 8001242:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001248:	2208      	movs	r2, #8
 800124a:	409a      	lsls	r2, r3
 800124c:	693b      	ldr	r3, [r7, #16]
 800124e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001254:	f043 0201 	orr.w	r2, r3, #1
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001260:	2201      	movs	r2, #1
 8001262:	409a      	lsls	r2, r3
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4013      	ands	r3, r2
 8001268:	2b00      	cmp	r3, #0
 800126a:	d012      	beq.n	8001292 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	695b      	ldr	r3, [r3, #20]
 8001272:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001276:	2b00      	cmp	r3, #0
 8001278:	d00b      	beq.n	8001292 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800127e:	2201      	movs	r2, #1
 8001280:	409a      	lsls	r2, r3
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800128a:	f043 0202 	orr.w	r2, r3, #2
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001296:	2204      	movs	r2, #4
 8001298:	409a      	lsls	r2, r3
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d012      	beq.n	80012c8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0302 	and.w	r3, r3, #2
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d00b      	beq.n	80012c8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012b4:	2204      	movs	r2, #4
 80012b6:	409a      	lsls	r2, r3
 80012b8:	693b      	ldr	r3, [r7, #16]
 80012ba:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80012c0:	f043 0204 	orr.w	r2, r3, #4
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012cc:	2210      	movs	r2, #16
 80012ce:	409a      	lsls	r2, r3
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	4013      	ands	r3, r2
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d043      	beq.n	8001360 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f003 0308 	and.w	r3, r3, #8
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d03c      	beq.n	8001360 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80012ea:	2210      	movs	r2, #16
 80012ec:	409a      	lsls	r2, r3
 80012ee:	693b      	ldr	r3, [r7, #16]
 80012f0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d018      	beq.n	8001332 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800130a:	2b00      	cmp	r3, #0
 800130c:	d108      	bne.n	8001320 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001312:	2b00      	cmp	r3, #0
 8001314:	d024      	beq.n	8001360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131a:	6878      	ldr	r0, [r7, #4]
 800131c:	4798      	blx	r3
 800131e:	e01f      	b.n	8001360 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001324:	2b00      	cmp	r3, #0
 8001326:	d01b      	beq.n	8001360 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800132c:	6878      	ldr	r0, [r7, #4]
 800132e:	4798      	blx	r3
 8001330:	e016      	b.n	8001360 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	681b      	ldr	r3, [r3, #0]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800133c:	2b00      	cmp	r3, #0
 800133e:	d107      	bne.n	8001350 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	681a      	ldr	r2, [r3, #0]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	f022 0208 	bic.w	r2, r2, #8
 800134e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001354:	2b00      	cmp	r3, #0
 8001356:	d003      	beq.n	8001360 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800135c:	6878      	ldr	r0, [r7, #4]
 800135e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001364:	2220      	movs	r2, #32
 8001366:	409a      	lsls	r2, r3
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	4013      	ands	r3, r2
 800136c:	2b00      	cmp	r3, #0
 800136e:	f000 808e 	beq.w	800148e <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	f003 0310 	and.w	r3, r3, #16
 800137c:	2b00      	cmp	r3, #0
 800137e:	f000 8086 	beq.w	800148e <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001386:	2220      	movs	r2, #32
 8001388:	409a      	lsls	r2, r3
 800138a:	693b      	ldr	r3, [r7, #16]
 800138c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001394:	b2db      	uxtb	r3, r3
 8001396:	2b05      	cmp	r3, #5
 8001398:	d136      	bne.n	8001408 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681a      	ldr	r2, [r3, #0]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	f022 0216 	bic.w	r2, r2, #22
 80013a8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	695a      	ldr	r2, [r3, #20]
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80013b8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d103      	bne.n	80013ca <HAL_DMA_IRQHandler+0x1da>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d007      	beq.n	80013da <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	681a      	ldr	r2, [r3, #0]
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	f022 0208 	bic.w	r2, r2, #8
 80013d8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80013de:	223f      	movs	r2, #63	; 0x3f
 80013e0:	409a      	lsls	r2, r3
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	2201      	movs	r2, #1
 80013ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	2200      	movs	r2, #0
 80013f2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d07d      	beq.n	80014fa <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001402:	6878      	ldr	r0, [r7, #4]
 8001404:	4798      	blx	r3
        }
        return;
 8001406:	e078      	b.n	80014fa <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001412:	2b00      	cmp	r3, #0
 8001414:	d01c      	beq.n	8001450 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001420:	2b00      	cmp	r3, #0
 8001422:	d108      	bne.n	8001436 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001428:	2b00      	cmp	r3, #0
 800142a:	d030      	beq.n	800148e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	4798      	blx	r3
 8001434:	e02b      	b.n	800148e <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800143a:	2b00      	cmp	r3, #0
 800143c:	d027      	beq.n	800148e <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	4798      	blx	r3
 8001446:	e022      	b.n	800148e <HAL_DMA_IRQHandler+0x29e>
 8001448:	20000000 	.word	0x20000000
 800144c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800145a:	2b00      	cmp	r3, #0
 800145c:	d10f      	bne.n	800147e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	681a      	ldr	r2, [r3, #0]
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f022 0210 	bic.w	r2, r2, #16
 800146c:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2201      	movs	r2, #1
 8001472:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2200      	movs	r2, #0
 800147a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001482:	2b00      	cmp	r3, #0
 8001484:	d003      	beq.n	800148e <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148a:	6878      	ldr	r0, [r7, #4]
 800148c:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001492:	2b00      	cmp	r3, #0
 8001494:	d032      	beq.n	80014fc <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d022      	beq.n	80014e8 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2205      	movs	r2, #5
 80014a6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	681a      	ldr	r2, [r3, #0]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0201 	bic.w	r2, r2, #1
 80014b8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	3301      	adds	r3, #1
 80014be:	60bb      	str	r3, [r7, #8]
 80014c0:	697a      	ldr	r2, [r7, #20]
 80014c2:	429a      	cmp	r2, r3
 80014c4:	d307      	bcc.n	80014d6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f003 0301 	and.w	r3, r3, #1
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d1f2      	bne.n	80014ba <HAL_DMA_IRQHandler+0x2ca>
 80014d4:	e000      	b.n	80014d8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80014d6:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2201      	movs	r2, #1
 80014dc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d005      	beq.n	80014fc <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	4798      	blx	r3
 80014f8:	e000      	b.n	80014fc <HAL_DMA_IRQHandler+0x30c>
        return;
 80014fa:	bf00      	nop
    }
  }
}
 80014fc:	3718      	adds	r7, #24
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop

08001504 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800151c:	b480      	push	{r7}
 800151e:	b085      	sub	sp, #20
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800152a:	68fb      	ldr	r3, [r7, #12]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001538:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	683a      	ldr	r2, [r7, #0]
 8001540:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	689b      	ldr	r3, [r3, #8]
 8001546:	2b40      	cmp	r3, #64	; 0x40
 8001548:	d108      	bne.n	800155c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	687a      	ldr	r2, [r7, #4]
 8001550:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	68ba      	ldr	r2, [r7, #8]
 8001558:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800155a:	e007      	b.n	800156c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800155c:	68fb      	ldr	r3, [r7, #12]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	68ba      	ldr	r2, [r7, #8]
 8001562:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	687a      	ldr	r2, [r7, #4]
 800156a:	60da      	str	r2, [r3, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	b2db      	uxtb	r3, r3
 8001586:	3b10      	subs	r3, #16
 8001588:	4a13      	ldr	r2, [pc, #76]	; (80015d8 <DMA_CalcBaseAndBitshift+0x60>)
 800158a:	fba2 2303 	umull	r2, r3, r2, r3
 800158e:	091b      	lsrs	r3, r3, #4
 8001590:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001592:	4a12      	ldr	r2, [pc, #72]	; (80015dc <DMA_CalcBaseAndBitshift+0x64>)
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	4413      	add	r3, r2
 8001598:	781b      	ldrb	r3, [r3, #0]
 800159a:	461a      	mov	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b03      	cmp	r3, #3
 80015a4:	d908      	bls.n	80015b8 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	4b0c      	ldr	r3, [pc, #48]	; (80015e0 <DMA_CalcBaseAndBitshift+0x68>)
 80015ae:	4013      	ands	r3, r2
 80015b0:	1d1a      	adds	r2, r3, #4
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	659a      	str	r2, [r3, #88]	; 0x58
 80015b6:	e006      	b.n	80015c6 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	461a      	mov	r2, r3
 80015be:	4b08      	ldr	r3, [pc, #32]	; (80015e0 <DMA_CalcBaseAndBitshift+0x68>)
 80015c0:	4013      	ands	r3, r2
 80015c2:	687a      	ldr	r2, [r7, #4]
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	aaaaaaab 	.word	0xaaaaaaab
 80015dc:	08008228 	.word	0x08008228
 80015e0:	fffffc00 	.word	0xfffffc00

080015e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015ec:	2300      	movs	r3, #0
 80015ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80015f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	699b      	ldr	r3, [r3, #24]
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d11f      	bne.n	800163e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80015fe:	68bb      	ldr	r3, [r7, #8]
 8001600:	2b03      	cmp	r3, #3
 8001602:	d855      	bhi.n	80016b0 <DMA_CheckFifoParam+0xcc>
 8001604:	a201      	add	r2, pc, #4	; (adr r2, 800160c <DMA_CheckFifoParam+0x28>)
 8001606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800160a:	bf00      	nop
 800160c:	0800161d 	.word	0x0800161d
 8001610:	0800162f 	.word	0x0800162f
 8001614:	0800161d 	.word	0x0800161d
 8001618:	080016b1 	.word	0x080016b1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001620:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001624:	2b00      	cmp	r3, #0
 8001626:	d045      	beq.n	80016b4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8001628:	2301      	movs	r3, #1
 800162a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800162c:	e042      	b.n	80016b4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001632:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001636:	d13f      	bne.n	80016b8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800163c:	e03c      	b.n	80016b8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
 8001642:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001646:	d121      	bne.n	800168c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001648:	68bb      	ldr	r3, [r7, #8]
 800164a:	2b03      	cmp	r3, #3
 800164c:	d836      	bhi.n	80016bc <DMA_CheckFifoParam+0xd8>
 800164e:	a201      	add	r2, pc, #4	; (adr r2, 8001654 <DMA_CheckFifoParam+0x70>)
 8001650:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001654:	08001665 	.word	0x08001665
 8001658:	0800166b 	.word	0x0800166b
 800165c:	08001665 	.word	0x08001665
 8001660:	0800167d 	.word	0x0800167d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001664:	2301      	movs	r3, #1
 8001666:	73fb      	strb	r3, [r7, #15]
      break;
 8001668:	e02f      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800166e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d024      	beq.n	80016c0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8001676:	2301      	movs	r3, #1
 8001678:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800167a:	e021      	b.n	80016c0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001680:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001684:	d11e      	bne.n	80016c4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8001686:	2301      	movs	r3, #1
 8001688:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800168a:	e01b      	b.n	80016c4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	2b02      	cmp	r3, #2
 8001690:	d902      	bls.n	8001698 <DMA_CheckFifoParam+0xb4>
 8001692:	2b03      	cmp	r3, #3
 8001694:	d003      	beq.n	800169e <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001696:	e018      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8001698:	2301      	movs	r3, #1
 800169a:	73fb      	strb	r3, [r7, #15]
      break;
 800169c:	e015      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d00e      	beq.n	80016c8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80016aa:	2301      	movs	r3, #1
 80016ac:	73fb      	strb	r3, [r7, #15]
      break;
 80016ae:	e00b      	b.n	80016c8 <DMA_CheckFifoParam+0xe4>
      break;
 80016b0:	bf00      	nop
 80016b2:	e00a      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
      break;
 80016b4:	bf00      	nop
 80016b6:	e008      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
      break;
 80016b8:	bf00      	nop
 80016ba:	e006      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
      break;
 80016bc:	bf00      	nop
 80016be:	e004      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
      break;
 80016c0:	bf00      	nop
 80016c2:	e002      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
      break;   
 80016c4:	bf00      	nop
 80016c6:	e000      	b.n	80016ca <DMA_CheckFifoParam+0xe6>
      break;
 80016c8:	bf00      	nop
    }
  } 
  
  return status; 
 80016ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80016cc:	4618      	mov	r0, r3
 80016ce:	3714      	adds	r7, #20
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d8:	b480      	push	{r7}
 80016da:	b089      	sub	sp, #36	; 0x24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80016e2:	2300      	movs	r3, #0
 80016e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80016e6:	2300      	movs	r3, #0
 80016e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80016ea:	2300      	movs	r3, #0
 80016ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80016ee:	2300      	movs	r3, #0
 80016f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80016f2:	2300      	movs	r3, #0
 80016f4:	61fb      	str	r3, [r7, #28]
 80016f6:	e175      	b.n	80019e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80016f8:	2201      	movs	r2, #1
 80016fa:	69fb      	ldr	r3, [r7, #28]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	697a      	ldr	r2, [r7, #20]
 8001708:	4013      	ands	r3, r2
 800170a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800170c:	693a      	ldr	r2, [r7, #16]
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	429a      	cmp	r2, r3
 8001712:	f040 8164 	bne.w	80019de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	685b      	ldr	r3, [r3, #4]
 800171a:	f003 0303 	and.w	r3, r3, #3
 800171e:	2b01      	cmp	r3, #1
 8001720:	d005      	beq.n	800172e <HAL_GPIO_Init+0x56>
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	685b      	ldr	r3, [r3, #4]
 8001726:	f003 0303 	and.w	r3, r3, #3
 800172a:	2b02      	cmp	r3, #2
 800172c:	d130      	bne.n	8001790 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001734:	69fb      	ldr	r3, [r7, #28]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	2203      	movs	r2, #3
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43db      	mvns	r3, r3
 8001740:	69ba      	ldr	r2, [r7, #24]
 8001742:	4013      	ands	r3, r2
 8001744:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	68da      	ldr	r2, [r3, #12]
 800174a:	69fb      	ldr	r3, [r7, #28]
 800174c:	005b      	lsls	r3, r3, #1
 800174e:	fa02 f303 	lsl.w	r3, r2, r3
 8001752:	69ba      	ldr	r2, [r7, #24]
 8001754:	4313      	orrs	r3, r2
 8001756:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	69ba      	ldr	r2, [r7, #24]
 800175c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001764:	2201      	movs	r2, #1
 8001766:	69fb      	ldr	r3, [r7, #28]
 8001768:	fa02 f303 	lsl.w	r3, r2, r3
 800176c:	43db      	mvns	r3, r3
 800176e:	69ba      	ldr	r2, [r7, #24]
 8001770:	4013      	ands	r3, r2
 8001772:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 0201 	and.w	r2, r3, #1
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	fa02 f303 	lsl.w	r3, r2, r3
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	4313      	orrs	r3, r2
 8001788:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	69ba      	ldr	r2, [r7, #24]
 800178e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001790:	683b      	ldr	r3, [r7, #0]
 8001792:	685b      	ldr	r3, [r3, #4]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b03      	cmp	r3, #3
 800179a:	d017      	beq.n	80017cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	68db      	ldr	r3, [r3, #12]
 80017a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	69ba      	ldr	r2, [r7, #24]
 80017b0:	4013      	ands	r3, r2
 80017b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	689a      	ldr	r2, [r3, #8]
 80017b8:	69fb      	ldr	r3, [r7, #28]
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	69ba      	ldr	r2, [r7, #24]
 80017c2:	4313      	orrs	r3, r2
 80017c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	69ba      	ldr	r2, [r7, #24]
 80017ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f003 0303 	and.w	r3, r3, #3
 80017d4:	2b02      	cmp	r3, #2
 80017d6:	d123      	bne.n	8001820 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80017d8:	69fb      	ldr	r3, [r7, #28]
 80017da:	08da      	lsrs	r2, r3, #3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3208      	adds	r2, #8
 80017e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80017e6:	69fb      	ldr	r3, [r7, #28]
 80017e8:	f003 0307 	and.w	r3, r3, #7
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	220f      	movs	r2, #15
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	691a      	ldr	r2, [r3, #16]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	f003 0307 	and.w	r3, r3, #7
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	fa02 f303 	lsl.w	r3, r2, r3
 800180c:	69ba      	ldr	r2, [r7, #24]
 800180e:	4313      	orrs	r3, r2
 8001810:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001812:	69fb      	ldr	r3, [r7, #28]
 8001814:	08da      	lsrs	r2, r3, #3
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	3208      	adds	r2, #8
 800181a:	69b9      	ldr	r1, [r7, #24]
 800181c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001826:	69fb      	ldr	r3, [r7, #28]
 8001828:	005b      	lsls	r3, r3, #1
 800182a:	2203      	movs	r2, #3
 800182c:	fa02 f303 	lsl.w	r3, r2, r3
 8001830:	43db      	mvns	r3, r3
 8001832:	69ba      	ldr	r2, [r7, #24]
 8001834:	4013      	ands	r3, r2
 8001836:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f003 0203 	and.w	r2, r3, #3
 8001840:	69fb      	ldr	r3, [r7, #28]
 8001842:	005b      	lsls	r3, r3, #1
 8001844:	fa02 f303 	lsl.w	r3, r2, r3
 8001848:	69ba      	ldr	r2, [r7, #24]
 800184a:	4313      	orrs	r3, r2
 800184c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69ba      	ldr	r2, [r7, #24]
 8001852:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800185c:	2b00      	cmp	r3, #0
 800185e:	f000 80be 	beq.w	80019de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001862:	4b65      	ldr	r3, [pc, #404]	; (80019f8 <HAL_GPIO_Init+0x320>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	4a64      	ldr	r2, [pc, #400]	; (80019f8 <HAL_GPIO_Init+0x320>)
 8001868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800186c:	6453      	str	r3, [r2, #68]	; 0x44
 800186e:	4b62      	ldr	r3, [pc, #392]	; (80019f8 <HAL_GPIO_Init+0x320>)
 8001870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001876:	60fb      	str	r3, [r7, #12]
 8001878:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800187a:	4a60      	ldr	r2, [pc, #384]	; (80019fc <HAL_GPIO_Init+0x324>)
 800187c:	69fb      	ldr	r3, [r7, #28]
 800187e:	089b      	lsrs	r3, r3, #2
 8001880:	3302      	adds	r3, #2
 8001882:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	f003 0303 	and.w	r3, r3, #3
 800188e:	009b      	lsls	r3, r3, #2
 8001890:	220f      	movs	r2, #15
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43db      	mvns	r3, r3
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	4013      	ands	r3, r2
 800189c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a57      	ldr	r2, [pc, #348]	; (8001a00 <HAL_GPIO_Init+0x328>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d037      	beq.n	8001916 <HAL_GPIO_Init+0x23e>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a56      	ldr	r2, [pc, #344]	; (8001a04 <HAL_GPIO_Init+0x32c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d031      	beq.n	8001912 <HAL_GPIO_Init+0x23a>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a55      	ldr	r2, [pc, #340]	; (8001a08 <HAL_GPIO_Init+0x330>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d02b      	beq.n	800190e <HAL_GPIO_Init+0x236>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a54      	ldr	r2, [pc, #336]	; (8001a0c <HAL_GPIO_Init+0x334>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d025      	beq.n	800190a <HAL_GPIO_Init+0x232>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a53      	ldr	r2, [pc, #332]	; (8001a10 <HAL_GPIO_Init+0x338>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d01f      	beq.n	8001906 <HAL_GPIO_Init+0x22e>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4a52      	ldr	r2, [pc, #328]	; (8001a14 <HAL_GPIO_Init+0x33c>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d019      	beq.n	8001902 <HAL_GPIO_Init+0x22a>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	4a51      	ldr	r2, [pc, #324]	; (8001a18 <HAL_GPIO_Init+0x340>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d013      	beq.n	80018fe <HAL_GPIO_Init+0x226>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	4a50      	ldr	r2, [pc, #320]	; (8001a1c <HAL_GPIO_Init+0x344>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d00d      	beq.n	80018fa <HAL_GPIO_Init+0x222>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	4a4f      	ldr	r2, [pc, #316]	; (8001a20 <HAL_GPIO_Init+0x348>)
 80018e2:	4293      	cmp	r3, r2
 80018e4:	d007      	beq.n	80018f6 <HAL_GPIO_Init+0x21e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a4e      	ldr	r2, [pc, #312]	; (8001a24 <HAL_GPIO_Init+0x34c>)
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d101      	bne.n	80018f2 <HAL_GPIO_Init+0x21a>
 80018ee:	2309      	movs	r3, #9
 80018f0:	e012      	b.n	8001918 <HAL_GPIO_Init+0x240>
 80018f2:	230a      	movs	r3, #10
 80018f4:	e010      	b.n	8001918 <HAL_GPIO_Init+0x240>
 80018f6:	2308      	movs	r3, #8
 80018f8:	e00e      	b.n	8001918 <HAL_GPIO_Init+0x240>
 80018fa:	2307      	movs	r3, #7
 80018fc:	e00c      	b.n	8001918 <HAL_GPIO_Init+0x240>
 80018fe:	2306      	movs	r3, #6
 8001900:	e00a      	b.n	8001918 <HAL_GPIO_Init+0x240>
 8001902:	2305      	movs	r3, #5
 8001904:	e008      	b.n	8001918 <HAL_GPIO_Init+0x240>
 8001906:	2304      	movs	r3, #4
 8001908:	e006      	b.n	8001918 <HAL_GPIO_Init+0x240>
 800190a:	2303      	movs	r3, #3
 800190c:	e004      	b.n	8001918 <HAL_GPIO_Init+0x240>
 800190e:	2302      	movs	r3, #2
 8001910:	e002      	b.n	8001918 <HAL_GPIO_Init+0x240>
 8001912:	2301      	movs	r3, #1
 8001914:	e000      	b.n	8001918 <HAL_GPIO_Init+0x240>
 8001916:	2300      	movs	r3, #0
 8001918:	69fa      	ldr	r2, [r7, #28]
 800191a:	f002 0203 	and.w	r2, r2, #3
 800191e:	0092      	lsls	r2, r2, #2
 8001920:	4093      	lsls	r3, r2
 8001922:	69ba      	ldr	r2, [r7, #24]
 8001924:	4313      	orrs	r3, r2
 8001926:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001928:	4934      	ldr	r1, [pc, #208]	; (80019fc <HAL_GPIO_Init+0x324>)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	089b      	lsrs	r3, r3, #2
 800192e:	3302      	adds	r3, #2
 8001930:	69ba      	ldr	r2, [r7, #24]
 8001932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001936:	4b3c      	ldr	r3, [pc, #240]	; (8001a28 <HAL_GPIO_Init+0x350>)
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	43db      	mvns	r3, r3
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	4013      	ands	r3, r2
 8001944:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800194e:	2b00      	cmp	r3, #0
 8001950:	d003      	beq.n	800195a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001952:	69ba      	ldr	r2, [r7, #24]
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	4313      	orrs	r3, r2
 8001958:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800195a:	4a33      	ldr	r2, [pc, #204]	; (8001a28 <HAL_GPIO_Init+0x350>)
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001960:	4b31      	ldr	r3, [pc, #196]	; (8001a28 <HAL_GPIO_Init+0x350>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001966:	693b      	ldr	r3, [r7, #16]
 8001968:	43db      	mvns	r3, r3
 800196a:	69ba      	ldr	r2, [r7, #24]
 800196c:	4013      	ands	r3, r2
 800196e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001970:	683b      	ldr	r3, [r7, #0]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d003      	beq.n	8001984 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800197c:	69ba      	ldr	r2, [r7, #24]
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	4313      	orrs	r3, r2
 8001982:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001984:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <HAL_GPIO_Init+0x350>)
 8001986:	69bb      	ldr	r3, [r7, #24]
 8001988:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800198a:	4b27      	ldr	r3, [pc, #156]	; (8001a28 <HAL_GPIO_Init+0x350>)
 800198c:	685b      	ldr	r3, [r3, #4]
 800198e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001990:	693b      	ldr	r3, [r7, #16]
 8001992:	43db      	mvns	r3, r3
 8001994:	69ba      	ldr	r2, [r7, #24]
 8001996:	4013      	ands	r3, r2
 8001998:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800199a:	683b      	ldr	r3, [r7, #0]
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80019a6:	69ba      	ldr	r2, [r7, #24]
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	4313      	orrs	r3, r2
 80019ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019ae:	4a1e      	ldr	r2, [pc, #120]	; (8001a28 <HAL_GPIO_Init+0x350>)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019b4:	4b1c      	ldr	r3, [pc, #112]	; (8001a28 <HAL_GPIO_Init+0x350>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ba:	693b      	ldr	r3, [r7, #16]
 80019bc:	43db      	mvns	r3, r3
 80019be:	69ba      	ldr	r2, [r7, #24]
 80019c0:	4013      	ands	r3, r2
 80019c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d003      	beq.n	80019d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80019d0:	69ba      	ldr	r2, [r7, #24]
 80019d2:	693b      	ldr	r3, [r7, #16]
 80019d4:	4313      	orrs	r3, r2
 80019d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019d8:	4a13      	ldr	r2, [pc, #76]	; (8001a28 <HAL_GPIO_Init+0x350>)
 80019da:	69bb      	ldr	r3, [r7, #24]
 80019dc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	3301      	adds	r3, #1
 80019e2:	61fb      	str	r3, [r7, #28]
 80019e4:	69fb      	ldr	r3, [r7, #28]
 80019e6:	2b0f      	cmp	r3, #15
 80019e8:	f67f ae86 	bls.w	80016f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80019ec:	bf00      	nop
 80019ee:	3724      	adds	r7, #36	; 0x24
 80019f0:	46bd      	mov	sp, r7
 80019f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f6:	4770      	bx	lr
 80019f8:	40023800 	.word	0x40023800
 80019fc:	40013800 	.word	0x40013800
 8001a00:	40020000 	.word	0x40020000
 8001a04:	40020400 	.word	0x40020400
 8001a08:	40020800 	.word	0x40020800
 8001a0c:	40020c00 	.word	0x40020c00
 8001a10:	40021000 	.word	0x40021000
 8001a14:	40021400 	.word	0x40021400
 8001a18:	40021800 	.word	0x40021800
 8001a1c:	40021c00 	.word	0x40021c00
 8001a20:	40022000 	.word	0x40022000
 8001a24:	40022400 	.word	0x40022400
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b085      	sub	sp, #20
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	691a      	ldr	r2, [r3, #16]
 8001a3c:	887b      	ldrh	r3, [r7, #2]
 8001a3e:	4013      	ands	r3, r2
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d002      	beq.n	8001a4a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001a44:	2301      	movs	r3, #1
 8001a46:	73fb      	strb	r3, [r7, #15]
 8001a48:	e001      	b.n	8001a4e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001a4e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	3714      	adds	r7, #20
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr

08001a5c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b086      	sub	sp, #24
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001a64:	2300      	movs	r3, #0
 8001a66:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d101      	bne.n	8001a72 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	e29b      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f003 0301 	and.w	r3, r3, #1
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	f000 8087 	beq.w	8001b8e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001a80:	4b96      	ldr	r3, [pc, #600]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001a82:	689b      	ldr	r3, [r3, #8]
 8001a84:	f003 030c 	and.w	r3, r3, #12
 8001a88:	2b04      	cmp	r3, #4
 8001a8a:	d00c      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001a8c:	4b93      	ldr	r3, [pc, #588]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 030c 	and.w	r3, r3, #12
 8001a94:	2b08      	cmp	r3, #8
 8001a96:	d112      	bne.n	8001abe <HAL_RCC_OscConfig+0x62>
 8001a98:	4b90      	ldr	r3, [pc, #576]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001a9a:	685b      	ldr	r3, [r3, #4]
 8001a9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001aa0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001aa4:	d10b      	bne.n	8001abe <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001aa6:	4b8d      	ldr	r3, [pc, #564]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d06c      	beq.n	8001b8c <HAL_RCC_OscConfig+0x130>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d168      	bne.n	8001b8c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	e275      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ac6:	d106      	bne.n	8001ad6 <HAL_RCC_OscConfig+0x7a>
 8001ac8:	4b84      	ldr	r3, [pc, #528]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a83      	ldr	r2, [pc, #524]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001ace:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad2:	6013      	str	r3, [r2, #0]
 8001ad4:	e02e      	b.n	8001b34 <HAL_RCC_OscConfig+0xd8>
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d10c      	bne.n	8001af8 <HAL_RCC_OscConfig+0x9c>
 8001ade:	4b7f      	ldr	r3, [pc, #508]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a7e      	ldr	r2, [pc, #504]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001ae4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ae8:	6013      	str	r3, [r2, #0]
 8001aea:	4b7c      	ldr	r3, [pc, #496]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a7b      	ldr	r2, [pc, #492]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001af0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001af4:	6013      	str	r3, [r2, #0]
 8001af6:	e01d      	b.n	8001b34 <HAL_RCC_OscConfig+0xd8>
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	685b      	ldr	r3, [r3, #4]
 8001afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001b00:	d10c      	bne.n	8001b1c <HAL_RCC_OscConfig+0xc0>
 8001b02:	4b76      	ldr	r3, [pc, #472]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	4a75      	ldr	r2, [pc, #468]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001b0c:	6013      	str	r3, [r2, #0]
 8001b0e:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	4a72      	ldr	r2, [pc, #456]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b18:	6013      	str	r3, [r2, #0]
 8001b1a:	e00b      	b.n	8001b34 <HAL_RCC_OscConfig+0xd8>
 8001b1c:	4b6f      	ldr	r3, [pc, #444]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	4a6e      	ldr	r2, [pc, #440]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b22:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b26:	6013      	str	r3, [r2, #0]
 8001b28:	4b6c      	ldr	r3, [pc, #432]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a6b      	ldr	r2, [pc, #428]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001b32:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	2b00      	cmp	r3, #0
 8001b3a:	d013      	beq.n	8001b64 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b3c:	f7ff f918 	bl	8000d70 <HAL_GetTick>
 8001b40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b42:	e008      	b.n	8001b56 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b44:	f7ff f914 	bl	8000d70 <HAL_GetTick>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	693b      	ldr	r3, [r7, #16]
 8001b4c:	1ad3      	subs	r3, r2, r3
 8001b4e:	2b64      	cmp	r3, #100	; 0x64
 8001b50:	d901      	bls.n	8001b56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001b52:	2303      	movs	r3, #3
 8001b54:	e229      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b56:	4b61      	ldr	r3, [pc, #388]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d0f0      	beq.n	8001b44 <HAL_RCC_OscConfig+0xe8>
 8001b62:	e014      	b.n	8001b8e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b64:	f7ff f904 	bl	8000d70 <HAL_GetTick>
 8001b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b6a:	e008      	b.n	8001b7e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b6c:	f7ff f900 	bl	8000d70 <HAL_GetTick>
 8001b70:	4602      	mov	r2, r0
 8001b72:	693b      	ldr	r3, [r7, #16]
 8001b74:	1ad3      	subs	r3, r2, r3
 8001b76:	2b64      	cmp	r3, #100	; 0x64
 8001b78:	d901      	bls.n	8001b7e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8001b7a:	2303      	movs	r3, #3
 8001b7c:	e215      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001b7e:	4b57      	ldr	r3, [pc, #348]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d1f0      	bne.n	8001b6c <HAL_RCC_OscConfig+0x110>
 8001b8a:	e000      	b.n	8001b8e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b8c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d069      	beq.n	8001c6e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001b9a:	4b50      	ldr	r3, [pc, #320]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 030c 	and.w	r3, r3, #12
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d00b      	beq.n	8001bbe <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001ba6:	4b4d      	ldr	r3, [pc, #308]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b08      	cmp	r3, #8
 8001bb0:	d11c      	bne.n	8001bec <HAL_RCC_OscConfig+0x190>
 8001bb2:	4b4a      	ldr	r3, [pc, #296]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d116      	bne.n	8001bec <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bbe:	4b47      	ldr	r3, [pc, #284]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	f003 0302 	and.w	r3, r3, #2
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d005      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x17a>
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	68db      	ldr	r3, [r3, #12]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d001      	beq.n	8001bd6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e1e9      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bd6:	4b41      	ldr	r3, [pc, #260]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	691b      	ldr	r3, [r3, #16]
 8001be2:	00db      	lsls	r3, r3, #3
 8001be4:	493d      	ldr	r1, [pc, #244]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001bea:	e040      	b.n	8001c6e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d023      	beq.n	8001c3c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001bf4:	4b39      	ldr	r3, [pc, #228]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	4a38      	ldr	r2, [pc, #224]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001bfa:	f043 0301 	orr.w	r3, r3, #1
 8001bfe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c00:	f7ff f8b6 	bl	8000d70 <HAL_GetTick>
 8001c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c06:	e008      	b.n	8001c1a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c08:	f7ff f8b2 	bl	8000d70 <HAL_GetTick>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	1ad3      	subs	r3, r2, r3
 8001c12:	2b02      	cmp	r3, #2
 8001c14:	d901      	bls.n	8001c1a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001c16:	2303      	movs	r3, #3
 8001c18:	e1c7      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c1a:	4b30      	ldr	r3, [pc, #192]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d0f0      	beq.n	8001c08 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001c26:	4b2d      	ldr	r3, [pc, #180]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	00db      	lsls	r3, r3, #3
 8001c34:	4929      	ldr	r1, [pc, #164]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	600b      	str	r3, [r1, #0]
 8001c3a:	e018      	b.n	8001c6e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001c3c:	4b27      	ldr	r3, [pc, #156]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	4a26      	ldr	r2, [pc, #152]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c42:	f023 0301 	bic.w	r3, r3, #1
 8001c46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c48:	f7ff f892 	bl	8000d70 <HAL_GetTick>
 8001c4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c4e:	e008      	b.n	8001c62 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001c50:	f7ff f88e 	bl	8000d70 <HAL_GetTick>
 8001c54:	4602      	mov	r2, r0
 8001c56:	693b      	ldr	r3, [r7, #16]
 8001c58:	1ad3      	subs	r3, r2, r3
 8001c5a:	2b02      	cmp	r3, #2
 8001c5c:	d901      	bls.n	8001c62 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001c5e:	2303      	movs	r3, #3
 8001c60:	e1a3      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001c62:	4b1e      	ldr	r3, [pc, #120]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f003 0302 	and.w	r3, r3, #2
 8001c6a:	2b00      	cmp	r3, #0
 8001c6c:	d1f0      	bne.n	8001c50 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f003 0308 	and.w	r3, r3, #8
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d038      	beq.n	8001cec <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	695b      	ldr	r3, [r3, #20]
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d019      	beq.n	8001cb6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c82:	4b16      	ldr	r3, [pc, #88]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001c86:	4a15      	ldr	r2, [pc, #84]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001c88:	f043 0301 	orr.w	r3, r3, #1
 8001c8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c8e:	f7ff f86f 	bl	8000d70 <HAL_GetTick>
 8001c92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001c94:	e008      	b.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c96:	f7ff f86b 	bl	8000d70 <HAL_GetTick>
 8001c9a:	4602      	mov	r2, r0
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	1ad3      	subs	r3, r2, r3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d901      	bls.n	8001ca8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001ca4:	2303      	movs	r3, #3
 8001ca6:	e180      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ca8:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001caa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cac:	f003 0302 	and.w	r3, r3, #2
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d0f0      	beq.n	8001c96 <HAL_RCC_OscConfig+0x23a>
 8001cb4:	e01a      	b.n	8001cec <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cb6:	4b09      	ldr	r3, [pc, #36]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001cb8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001cba:	4a08      	ldr	r2, [pc, #32]	; (8001cdc <HAL_RCC_OscConfig+0x280>)
 8001cbc:	f023 0301 	bic.w	r3, r3, #1
 8001cc0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cc2:	f7ff f855 	bl	8000d70 <HAL_GetTick>
 8001cc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001cc8:	e00a      	b.n	8001ce0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001cca:	f7ff f851 	bl	8000d70 <HAL_GetTick>
 8001cce:	4602      	mov	r2, r0
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	1ad3      	subs	r3, r2, r3
 8001cd4:	2b02      	cmp	r3, #2
 8001cd6:	d903      	bls.n	8001ce0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e166      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
 8001cdc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ce0:	4b92      	ldr	r3, [pc, #584]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001ce2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001ce4:	f003 0302 	and.w	r3, r3, #2
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d1ee      	bne.n	8001cca <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	f003 0304 	and.w	r3, r3, #4
 8001cf4:	2b00      	cmp	r3, #0
 8001cf6:	f000 80a4 	beq.w	8001e42 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001cfa:	4b8c      	ldr	r3, [pc, #560]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d10d      	bne.n	8001d22 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d06:	4b89      	ldr	r3, [pc, #548]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d0a:	4a88      	ldr	r2, [pc, #544]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d10:	6413      	str	r3, [r2, #64]	; 0x40
 8001d12:	4b86      	ldr	r3, [pc, #536]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d1a:	60bb      	str	r3, [r7, #8]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d22:	4b83      	ldr	r3, [pc, #524]	; (8001f30 <HAL_RCC_OscConfig+0x4d4>)
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d118      	bne.n	8001d60 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8001d2e:	4b80      	ldr	r3, [pc, #512]	; (8001f30 <HAL_RCC_OscConfig+0x4d4>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4a7f      	ldr	r2, [pc, #508]	; (8001f30 <HAL_RCC_OscConfig+0x4d4>)
 8001d34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d3a:	f7ff f819 	bl	8000d70 <HAL_GetTick>
 8001d3e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d40:	e008      	b.n	8001d54 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d42:	f7ff f815 	bl	8000d70 <HAL_GetTick>
 8001d46:	4602      	mov	r2, r0
 8001d48:	693b      	ldr	r3, [r7, #16]
 8001d4a:	1ad3      	subs	r3, r2, r3
 8001d4c:	2b64      	cmp	r3, #100	; 0x64
 8001d4e:	d901      	bls.n	8001d54 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001d50:	2303      	movs	r3, #3
 8001d52:	e12a      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001d54:	4b76      	ldr	r3, [pc, #472]	; (8001f30 <HAL_RCC_OscConfig+0x4d4>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d0f0      	beq.n	8001d42 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d106      	bne.n	8001d76 <HAL_RCC_OscConfig+0x31a>
 8001d68:	4b70      	ldr	r3, [pc, #448]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d6c:	4a6f      	ldr	r2, [pc, #444]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d6e:	f043 0301 	orr.w	r3, r3, #1
 8001d72:	6713      	str	r3, [r2, #112]	; 0x70
 8001d74:	e02d      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d10c      	bne.n	8001d98 <HAL_RCC_OscConfig+0x33c>
 8001d7e:	4b6b      	ldr	r3, [pc, #428]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d82:	4a6a      	ldr	r2, [pc, #424]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d84:	f023 0301 	bic.w	r3, r3, #1
 8001d88:	6713      	str	r3, [r2, #112]	; 0x70
 8001d8a:	4b68      	ldr	r3, [pc, #416]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001d8e:	4a67      	ldr	r2, [pc, #412]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001d90:	f023 0304 	bic.w	r3, r3, #4
 8001d94:	6713      	str	r3, [r2, #112]	; 0x70
 8001d96:	e01c      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	689b      	ldr	r3, [r3, #8]
 8001d9c:	2b05      	cmp	r3, #5
 8001d9e:	d10c      	bne.n	8001dba <HAL_RCC_OscConfig+0x35e>
 8001da0:	4b62      	ldr	r3, [pc, #392]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001da2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001da4:	4a61      	ldr	r2, [pc, #388]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001da6:	f043 0304 	orr.w	r3, r3, #4
 8001daa:	6713      	str	r3, [r2, #112]	; 0x70
 8001dac:	4b5f      	ldr	r3, [pc, #380]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001db0:	4a5e      	ldr	r2, [pc, #376]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001db2:	f043 0301 	orr.w	r3, r3, #1
 8001db6:	6713      	str	r3, [r2, #112]	; 0x70
 8001db8:	e00b      	b.n	8001dd2 <HAL_RCC_OscConfig+0x376>
 8001dba:	4b5c      	ldr	r3, [pc, #368]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001dbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dbe:	4a5b      	ldr	r2, [pc, #364]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001dc0:	f023 0301 	bic.w	r3, r3, #1
 8001dc4:	6713      	str	r3, [r2, #112]	; 0x70
 8001dc6:	4b59      	ldr	r3, [pc, #356]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001dc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dca:	4a58      	ldr	r2, [pc, #352]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001dcc:	f023 0304 	bic.w	r3, r3, #4
 8001dd0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d015      	beq.n	8001e06 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dda:	f7fe ffc9 	bl	8000d70 <HAL_GetTick>
 8001dde:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001de2:	f7fe ffc5 	bl	8000d70 <HAL_GetTick>
 8001de6:	4602      	mov	r2, r0
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	1ad3      	subs	r3, r2, r3
 8001dec:	f241 3288 	movw	r2, #5000	; 0x1388
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e0d8      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001df8:	4b4c      	ldr	r3, [pc, #304]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001dfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dfc:	f003 0302 	and.w	r3, r3, #2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d0ee      	beq.n	8001de2 <HAL_RCC_OscConfig+0x386>
 8001e04:	e014      	b.n	8001e30 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e06:	f7fe ffb3 	bl	8000d70 <HAL_GetTick>
 8001e0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e0c:	e00a      	b.n	8001e24 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e0e:	f7fe ffaf 	bl	8000d70 <HAL_GetTick>
 8001e12:	4602      	mov	r2, r0
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d901      	bls.n	8001e24 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001e20:	2303      	movs	r3, #3
 8001e22:	e0c2      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001e24:	4b41      	ldr	r3, [pc, #260]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001e26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d1ee      	bne.n	8001e0e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001e30:	7dfb      	ldrb	r3, [r7, #23]
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d105      	bne.n	8001e42 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e36:	4b3d      	ldr	r3, [pc, #244]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001e38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3a:	4a3c      	ldr	r2, [pc, #240]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001e3c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e40:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	699b      	ldr	r3, [r3, #24]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	f000 80ae 	beq.w	8001fa8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e4c:	4b37      	ldr	r3, [pc, #220]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001e4e:	689b      	ldr	r3, [r3, #8]
 8001e50:	f003 030c 	and.w	r3, r3, #12
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d06d      	beq.n	8001f34 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	699b      	ldr	r3, [r3, #24]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d14b      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e60:	4b32      	ldr	r3, [pc, #200]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a31      	ldr	r2, [pc, #196]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001e66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6c:	f7fe ff80 	bl	8000d70 <HAL_GetTick>
 8001e70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e74:	f7fe ff7c 	bl	8000d70 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e091      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001e86:	4b29      	ldr	r3, [pc, #164]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d1f0      	bne.n	8001e74 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	69da      	ldr	r2, [r3, #28]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6a1b      	ldr	r3, [r3, #32]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea0:	019b      	lsls	r3, r3, #6
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea8:	085b      	lsrs	r3, r3, #1
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	041b      	lsls	r3, r3, #16
 8001eae:	431a      	orrs	r2, r3
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb4:	061b      	lsls	r3, r3, #24
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ebc:	071b      	lsls	r3, r3, #28
 8001ebe:	491b      	ldr	r1, [pc, #108]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001ec0:	4313      	orrs	r3, r2
 8001ec2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ec4:	4b19      	ldr	r3, [pc, #100]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4a18      	ldr	r2, [pc, #96]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001eca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ece:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ed0:	f7fe ff4e 	bl	8000d70 <HAL_GetTick>
 8001ed4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ed6:	e008      	b.n	8001eea <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ed8:	f7fe ff4a 	bl	8000d70 <HAL_GetTick>
 8001edc:	4602      	mov	r2, r0
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	1ad3      	subs	r3, r2, r3
 8001ee2:	2b02      	cmp	r3, #2
 8001ee4:	d901      	bls.n	8001eea <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e05f      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eea:	4b10      	ldr	r3, [pc, #64]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d0f0      	beq.n	8001ed8 <HAL_RCC_OscConfig+0x47c>
 8001ef6:	e057      	b.n	8001fa8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001ef8:	4b0c      	ldr	r3, [pc, #48]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a0b      	ldr	r2, [pc, #44]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001efe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f02:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f04:	f7fe ff34 	bl	8000d70 <HAL_GetTick>
 8001f08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0c:	f7fe ff30 	bl	8000d70 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e045      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001f1e:	4b03      	ldr	r3, [pc, #12]	; (8001f2c <HAL_RCC_OscConfig+0x4d0>)
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x4b0>
 8001f2a:	e03d      	b.n	8001fa8 <HAL_RCC_OscConfig+0x54c>
 8001f2c:	40023800 	.word	0x40023800
 8001f30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001f34:	4b1f      	ldr	r3, [pc, #124]	; (8001fb4 <HAL_RCC_OscConfig+0x558>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	699b      	ldr	r3, [r3, #24]
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d030      	beq.n	8001fa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001f4c:	429a      	cmp	r2, r3
 8001f4e:	d129      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d122      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f5e:	68fa      	ldr	r2, [r7, #12]
 8001f60:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001f64:	4013      	ands	r3, r2
 8001f66:	687a      	ldr	r2, [r7, #4]
 8001f68:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001f6a:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001f6c:	4293      	cmp	r3, r2
 8001f6e:	d119      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f7a:	085b      	lsrs	r3, r3, #1
 8001f7c:	3b01      	subs	r3, #1
 8001f7e:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001f80:	429a      	cmp	r2, r3
 8001f82:	d10f      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f8e:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001f90:	429a      	cmp	r2, r3
 8001f92:	d107      	bne.n	8001fa4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f9e:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001fa0:	429a      	cmp	r2, r3
 8001fa2:	d001      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e000      	b.n	8001faa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023800 	.word	0x40023800

08001fb8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d101      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	e0d0      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001fd0:	4b6a      	ldr	r3, [pc, #424]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 030f 	and.w	r3, r3, #15
 8001fd8:	683a      	ldr	r2, [r7, #0]
 8001fda:	429a      	cmp	r2, r3
 8001fdc:	d910      	bls.n	8002000 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fde:	4b67      	ldr	r3, [pc, #412]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f023 020f 	bic.w	r2, r3, #15
 8001fe6:	4965      	ldr	r1, [pc, #404]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fee:	4b63      	ldr	r3, [pc, #396]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f003 030f 	and.w	r3, r3, #15
 8001ff6:	683a      	ldr	r2, [r7, #0]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d001      	beq.n	8002000 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	e0b8      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f003 0302 	and.w	r3, r3, #2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d020      	beq.n	800204e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f003 0304 	and.w	r3, r3, #4
 8002014:	2b00      	cmp	r3, #0
 8002016:	d005      	beq.n	8002024 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002018:	4b59      	ldr	r3, [pc, #356]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800201a:	689b      	ldr	r3, [r3, #8]
 800201c:	4a58      	ldr	r2, [pc, #352]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800201e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002022:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0308 	and.w	r3, r3, #8
 800202c:	2b00      	cmp	r3, #0
 800202e:	d005      	beq.n	800203c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002030:	4b53      	ldr	r3, [pc, #332]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	4a52      	ldr	r2, [pc, #328]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002036:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800203a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800203c:	4b50      	ldr	r3, [pc, #320]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	689b      	ldr	r3, [r3, #8]
 8002048:	494d      	ldr	r1, [pc, #308]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0301 	and.w	r3, r3, #1
 8002056:	2b00      	cmp	r3, #0
 8002058:	d040      	beq.n	80020dc <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d107      	bne.n	8002072 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002062:	4b47      	ldr	r3, [pc, #284]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d115      	bne.n	800209a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e07f      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	685b      	ldr	r3, [r3, #4]
 8002076:	2b02      	cmp	r3, #2
 8002078:	d107      	bne.n	800208a <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800207a:	4b41      	ldr	r3, [pc, #260]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d109      	bne.n	800209a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e073      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800208a:	4b3d      	ldr	r3, [pc, #244]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d101      	bne.n	800209a <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
 8002098:	e06b      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800209a:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	f023 0203 	bic.w	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	685b      	ldr	r3, [r3, #4]
 80020a6:	4936      	ldr	r1, [pc, #216]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 80020a8:	4313      	orrs	r3, r2
 80020aa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020ac:	f7fe fe60 	bl	8000d70 <HAL_GetTick>
 80020b0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020b2:	e00a      	b.n	80020ca <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80020b4:	f7fe fe5c 	bl	8000d70 <HAL_GetTick>
 80020b8:	4602      	mov	r2, r0
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	1ad3      	subs	r3, r2, r3
 80020be:	f241 3288 	movw	r2, #5000	; 0x1388
 80020c2:	4293      	cmp	r3, r2
 80020c4:	d901      	bls.n	80020ca <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80020c6:	2303      	movs	r3, #3
 80020c8:	e053      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80020ca:	4b2d      	ldr	r3, [pc, #180]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 020c 	and.w	r2, r3, #12
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	429a      	cmp	r2, r3
 80020da:	d1eb      	bne.n	80020b4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020dc:	4b27      	ldr	r3, [pc, #156]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 030f 	and.w	r3, r3, #15
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d210      	bcs.n	800210c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f023 020f 	bic.w	r2, r3, #15
 80020f2:	4922      	ldr	r1, [pc, #136]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	4313      	orrs	r3, r2
 80020f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020fa:	4b20      	ldr	r3, [pc, #128]	; (800217c <HAL_RCC_ClockConfig+0x1c4>)
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 030f 	and.w	r3, r3, #15
 8002102:	683a      	ldr	r2, [r7, #0]
 8002104:	429a      	cmp	r2, r3
 8002106:	d001      	beq.n	800210c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e032      	b.n	8002172 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0304 	and.w	r3, r3, #4
 8002114:	2b00      	cmp	r3, #0
 8002116:	d008      	beq.n	800212a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002118:	4b19      	ldr	r3, [pc, #100]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	4916      	ldr	r1, [pc, #88]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002126:	4313      	orrs	r3, r2
 8002128:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0308 	and.w	r3, r3, #8
 8002132:	2b00      	cmp	r3, #0
 8002134:	d009      	beq.n	800214a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002136:	4b12      	ldr	r3, [pc, #72]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	691b      	ldr	r3, [r3, #16]
 8002142:	00db      	lsls	r3, r3, #3
 8002144:	490e      	ldr	r1, [pc, #56]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002146:	4313      	orrs	r3, r2
 8002148:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800214a:	f000 f821 	bl	8002190 <HAL_RCC_GetSysClockFreq>
 800214e:	4601      	mov	r1, r0
 8002150:	4b0b      	ldr	r3, [pc, #44]	; (8002180 <HAL_RCC_ClockConfig+0x1c8>)
 8002152:	689b      	ldr	r3, [r3, #8]
 8002154:	091b      	lsrs	r3, r3, #4
 8002156:	f003 030f 	and.w	r3, r3, #15
 800215a:	4a0a      	ldr	r2, [pc, #40]	; (8002184 <HAL_RCC_ClockConfig+0x1cc>)
 800215c:	5cd3      	ldrb	r3, [r2, r3]
 800215e:	fa21 f303 	lsr.w	r3, r1, r3
 8002162:	4a09      	ldr	r2, [pc, #36]	; (8002188 <HAL_RCC_ClockConfig+0x1d0>)
 8002164:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002166:	4b09      	ldr	r3, [pc, #36]	; (800218c <HAL_RCC_ClockConfig+0x1d4>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	4618      	mov	r0, r3
 800216c:	f7fe fcf8 	bl	8000b60 <HAL_InitTick>

  return HAL_OK;
 8002170:	2300      	movs	r3, #0
}
 8002172:	4618      	mov	r0, r3
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023c00 	.word	0x40023c00
 8002180:	40023800 	.word	0x40023800
 8002184:	08008210 	.word	0x08008210
 8002188:	20000000 	.word	0x20000000
 800218c:	20000004 	.word	0x20000004

08002190 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002190:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002192:	b085      	sub	sp, #20
 8002194:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002196:	2300      	movs	r3, #0
 8002198:	607b      	str	r3, [r7, #4]
 800219a:	2300      	movs	r3, #0
 800219c:	60fb      	str	r3, [r7, #12]
 800219e:	2300      	movs	r3, #0
 80021a0:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80021a2:	2300      	movs	r3, #0
 80021a4:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80021a6:	4b50      	ldr	r3, [pc, #320]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021a8:	689b      	ldr	r3, [r3, #8]
 80021aa:	f003 030c 	and.w	r3, r3, #12
 80021ae:	2b04      	cmp	r3, #4
 80021b0:	d007      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x32>
 80021b2:	2b08      	cmp	r3, #8
 80021b4:	d008      	beq.n	80021c8 <HAL_RCC_GetSysClockFreq+0x38>
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	f040 808d 	bne.w	80022d6 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80021bc:	4b4b      	ldr	r3, [pc, #300]	; (80022ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80021be:	60bb      	str	r3, [r7, #8]
      break;
 80021c0:	e08c      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80021c2:	4b4b      	ldr	r3, [pc, #300]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80021c4:	60bb      	str	r3, [r7, #8]
      break;
 80021c6:	e089      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80021c8:	4b47      	ldr	r3, [pc, #284]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021ca:	685b      	ldr	r3, [r3, #4]
 80021cc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80021d0:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80021d2:	4b45      	ldr	r3, [pc, #276]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021d4:	685b      	ldr	r3, [r3, #4]
 80021d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d023      	beq.n	8002226 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021de:	4b42      	ldr	r3, [pc, #264]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80021e0:	685b      	ldr	r3, [r3, #4]
 80021e2:	099b      	lsrs	r3, r3, #6
 80021e4:	f04f 0400 	mov.w	r4, #0
 80021e8:	f240 11ff 	movw	r1, #511	; 0x1ff
 80021ec:	f04f 0200 	mov.w	r2, #0
 80021f0:	ea03 0501 	and.w	r5, r3, r1
 80021f4:	ea04 0602 	and.w	r6, r4, r2
 80021f8:	4a3d      	ldr	r2, [pc, #244]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x160>)
 80021fa:	fb02 f106 	mul.w	r1, r2, r6
 80021fe:	2200      	movs	r2, #0
 8002200:	fb02 f205 	mul.w	r2, r2, r5
 8002204:	440a      	add	r2, r1
 8002206:	493a      	ldr	r1, [pc, #232]	; (80022f0 <HAL_RCC_GetSysClockFreq+0x160>)
 8002208:	fba5 0101 	umull	r0, r1, r5, r1
 800220c:	1853      	adds	r3, r2, r1
 800220e:	4619      	mov	r1, r3
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f04f 0400 	mov.w	r4, #0
 8002216:	461a      	mov	r2, r3
 8002218:	4623      	mov	r3, r4
 800221a:	f7fe f80d 	bl	8000238 <__aeabi_uldivmod>
 800221e:	4603      	mov	r3, r0
 8002220:	460c      	mov	r4, r1
 8002222:	60fb      	str	r3, [r7, #12]
 8002224:	e049      	b.n	80022ba <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002226:	4b30      	ldr	r3, [pc, #192]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x158>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	099b      	lsrs	r3, r3, #6
 800222c:	f04f 0400 	mov.w	r4, #0
 8002230:	f240 11ff 	movw	r1, #511	; 0x1ff
 8002234:	f04f 0200 	mov.w	r2, #0
 8002238:	ea03 0501 	and.w	r5, r3, r1
 800223c:	ea04 0602 	and.w	r6, r4, r2
 8002240:	4629      	mov	r1, r5
 8002242:	4632      	mov	r2, r6
 8002244:	f04f 0300 	mov.w	r3, #0
 8002248:	f04f 0400 	mov.w	r4, #0
 800224c:	0154      	lsls	r4, r2, #5
 800224e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002252:	014b      	lsls	r3, r1, #5
 8002254:	4619      	mov	r1, r3
 8002256:	4622      	mov	r2, r4
 8002258:	1b49      	subs	r1, r1, r5
 800225a:	eb62 0206 	sbc.w	r2, r2, r6
 800225e:	f04f 0300 	mov.w	r3, #0
 8002262:	f04f 0400 	mov.w	r4, #0
 8002266:	0194      	lsls	r4, r2, #6
 8002268:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800226c:	018b      	lsls	r3, r1, #6
 800226e:	1a5b      	subs	r3, r3, r1
 8002270:	eb64 0402 	sbc.w	r4, r4, r2
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	f04f 0200 	mov.w	r2, #0
 800227c:	00e2      	lsls	r2, r4, #3
 800227e:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8002282:	00d9      	lsls	r1, r3, #3
 8002284:	460b      	mov	r3, r1
 8002286:	4614      	mov	r4, r2
 8002288:	195b      	adds	r3, r3, r5
 800228a:	eb44 0406 	adc.w	r4, r4, r6
 800228e:	f04f 0100 	mov.w	r1, #0
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	02a2      	lsls	r2, r4, #10
 8002298:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800229c:	0299      	lsls	r1, r3, #10
 800229e:	460b      	mov	r3, r1
 80022a0:	4614      	mov	r4, r2
 80022a2:	4618      	mov	r0, r3
 80022a4:	4621      	mov	r1, r4
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f04f 0400 	mov.w	r4, #0
 80022ac:	461a      	mov	r2, r3
 80022ae:	4623      	mov	r3, r4
 80022b0:	f7fd ffc2 	bl	8000238 <__aeabi_uldivmod>
 80022b4:	4603      	mov	r3, r0
 80022b6:	460c      	mov	r4, r1
 80022b8:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80022ba:	4b0b      	ldr	r3, [pc, #44]	; (80022e8 <HAL_RCC_GetSysClockFreq+0x158>)
 80022bc:	685b      	ldr	r3, [r3, #4]
 80022be:	0c1b      	lsrs	r3, r3, #16
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	3301      	adds	r3, #1
 80022c6:	005b      	lsls	r3, r3, #1
 80022c8:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 80022ca:	68fa      	ldr	r2, [r7, #12]
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80022d2:	60bb      	str	r3, [r7, #8]
      break;
 80022d4:	e002      	b.n	80022dc <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80022d6:	4b05      	ldr	r3, [pc, #20]	; (80022ec <HAL_RCC_GetSysClockFreq+0x15c>)
 80022d8:	60bb      	str	r3, [r7, #8]
      break;
 80022da:	bf00      	nop
    }
  }
  return sysclockfreq;
 80022dc:	68bb      	ldr	r3, [r7, #8]
}
 80022de:	4618      	mov	r0, r3
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80022e6:	bf00      	nop
 80022e8:	40023800 	.word	0x40023800
 80022ec:	00f42400 	.word	0x00f42400
 80022f0:	00b71b00 	.word	0x00b71b00

080022f4 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022f4:	b480      	push	{r7}
 80022f6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80022f8:	4b03      	ldr	r3, [pc, #12]	; (8002308 <HAL_RCC_GetHCLKFreq+0x14>)
 80022fa:	681b      	ldr	r3, [r3, #0]
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr
 8002306:	bf00      	nop
 8002308:	20000000 	.word	0x20000000

0800230c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002310:	f7ff fff0 	bl	80022f4 <HAL_RCC_GetHCLKFreq>
 8002314:	4601      	mov	r1, r0
 8002316:	4b05      	ldr	r3, [pc, #20]	; (800232c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	0a9b      	lsrs	r3, r3, #10
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	4a03      	ldr	r2, [pc, #12]	; (8002330 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002322:	5cd3      	ldrb	r3, [r2, r3]
 8002324:	fa21 f303 	lsr.w	r3, r1, r3
}
 8002328:	4618      	mov	r0, r3
 800232a:	bd80      	pop	{r7, pc}
 800232c:	40023800 	.word	0x40023800
 8002330:	08008220 	.word	0x08008220

08002334 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002334:	b480      	push	{r7}
 8002336:	b083      	sub	sp, #12
 8002338:	af00      	add	r7, sp, #0
 800233a:	6078      	str	r0, [r7, #4]
 800233c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	220f      	movs	r2, #15
 8002342:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002344:	4b12      	ldr	r3, [pc, #72]	; (8002390 <HAL_RCC_GetClockConfig+0x5c>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f003 0203 	and.w	r2, r3, #3
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002350:	4b0f      	ldr	r3, [pc, #60]	; (8002390 <HAL_RCC_GetClockConfig+0x5c>)
 8002352:	689b      	ldr	r3, [r3, #8]
 8002354:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800235c:	4b0c      	ldr	r3, [pc, #48]	; (8002390 <HAL_RCC_GetClockConfig+0x5c>)
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8002368:	4b09      	ldr	r3, [pc, #36]	; (8002390 <HAL_RCC_GetClockConfig+0x5c>)
 800236a:	689b      	ldr	r3, [r3, #8]
 800236c:	08db      	lsrs	r3, r3, #3
 800236e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8002376:	4b07      	ldr	r3, [pc, #28]	; (8002394 <HAL_RCC_GetClockConfig+0x60>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f003 020f 	and.w	r2, r3, #15
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	601a      	str	r2, [r3, #0]
}
 8002382:	bf00      	nop
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr
 800238e:	bf00      	nop
 8002390:	40023800 	.word	0x40023800
 8002394:	40023c00 	.word	0x40023c00

08002398 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b088      	sub	sp, #32
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80023a0:	2300      	movs	r3, #0
 80023a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80023a4:	2300      	movs	r3, #0
 80023a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80023a8:	2300      	movs	r3, #0
 80023aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80023ac:	2300      	movs	r3, #0
 80023ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80023b0:	2300      	movs	r3, #0
 80023b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f003 0301 	and.w	r3, r3, #1
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d012      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80023c0:	4b69      	ldr	r3, [pc, #420]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c2:	689b      	ldr	r3, [r3, #8]
 80023c4:	4a68      	ldr	r2, [pc, #416]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80023ca:	6093      	str	r3, [r2, #8]
 80023cc:	4b66      	ldr	r3, [pc, #408]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023ce:	689a      	ldr	r2, [r3, #8]
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023d4:	4964      	ldr	r1, [pc, #400]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d101      	bne.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80023e2:	2301      	movs	r3, #1
 80023e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d017      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80023f2:	4b5d      	ldr	r3, [pc, #372]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80023f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80023f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002400:	4959      	ldr	r1, [pc, #356]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002402:	4313      	orrs	r3, r2
 8002404:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800240c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002410:	d101      	bne.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002412:	2301      	movs	r3, #1
 8002414:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241a:	2b00      	cmp	r3, #0
 800241c:	d101      	bne.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800241e:	2301      	movs	r3, #1
 8002420:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800242a:	2b00      	cmp	r3, #0
 800242c:	d017      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800242e:	4b4e      	ldr	r3, [pc, #312]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002430:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002434:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	494a      	ldr	r1, [pc, #296]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800243e:	4313      	orrs	r3, r2
 8002440:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002448:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800244c:	d101      	bne.n	8002452 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800244e:	2301      	movs	r3, #1
 8002450:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002456:	2b00      	cmp	r3, #0
 8002458:	d101      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800245a:	2301      	movs	r3, #1
 800245c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002466:	2b00      	cmp	r3, #0
 8002468:	d001      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800246a:	2301      	movs	r3, #1
 800246c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 0320 	and.w	r3, r3, #32
 8002476:	2b00      	cmp	r3, #0
 8002478:	f000 808b 	beq.w	8002592 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800247c:	4b3a      	ldr	r3, [pc, #232]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	4a39      	ldr	r2, [pc, #228]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002482:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002486:	6413      	str	r3, [r2, #64]	; 0x40
 8002488:	4b37      	ldr	r3, [pc, #220]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800248a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002494:	4b35      	ldr	r3, [pc, #212]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a34      	ldr	r2, [pc, #208]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800249a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800249e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024a0:	f7fe fc66 	bl	8000d70 <HAL_GetTick>
 80024a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024a6:	e008      	b.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a8:	f7fe fc62 	bl	8000d70 <HAL_GetTick>
 80024ac:	4602      	mov	r2, r0
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	1ad3      	subs	r3, r2, r3
 80024b2:	2b64      	cmp	r3, #100	; 0x64
 80024b4:	d901      	bls.n	80024ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80024b6:	2303      	movs	r3, #3
 80024b8:	e38f      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80024ba:	4b2c      	ldr	r3, [pc, #176]	; (800256c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0f0      	beq.n	80024a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80024c6:	4b28      	ldr	r3, [pc, #160]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d035      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d02e      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80024e4:	4b20      	ldr	r3, [pc, #128]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80024ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80024ee:	4b1e      	ldr	r3, [pc, #120]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024f2:	4a1d      	ldr	r2, [pc, #116]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80024f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80024fa:	4b1b      	ldr	r3, [pc, #108]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80024fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024fe:	4a1a      	ldr	r2, [pc, #104]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002500:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002504:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002506:	4a18      	ldr	r2, [pc, #96]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800250c:	4b16      	ldr	r3, [pc, #88]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	f003 0301 	and.w	r3, r3, #1
 8002514:	2b01      	cmp	r3, #1
 8002516:	d114      	bne.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002518:	f7fe fc2a 	bl	8000d70 <HAL_GetTick>
 800251c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800251e:	e00a      	b.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7fe fc26 	bl	8000d70 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	697b      	ldr	r3, [r7, #20]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e351      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002536:	4b0c      	ldr	r3, [pc, #48]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0ee      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800254a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800254e:	d111      	bne.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002550:	4b05      	ldr	r3, [pc, #20]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800255c:	4b04      	ldr	r3, [pc, #16]	; (8002570 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800255e:	400b      	ands	r3, r1
 8002560:	4901      	ldr	r1, [pc, #4]	; (8002568 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002562:	4313      	orrs	r3, r2
 8002564:	608b      	str	r3, [r1, #8]
 8002566:	e00b      	b.n	8002580 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002568:	40023800 	.word	0x40023800
 800256c:	40007000 	.word	0x40007000
 8002570:	0ffffcff 	.word	0x0ffffcff
 8002574:	4bb3      	ldr	r3, [pc, #716]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	4ab2      	ldr	r2, [pc, #712]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800257a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800257e:	6093      	str	r3, [r2, #8]
 8002580:	4bb0      	ldr	r3, [pc, #704]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002582:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002588:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258c:	49ad      	ldr	r1, [pc, #692]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800258e:	4313      	orrs	r3, r2
 8002590:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d010      	beq.n	80025c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800259e:	4ba9      	ldr	r3, [pc, #676]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80025a4:	4aa7      	ldr	r2, [pc, #668]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80025ae:	4ba5      	ldr	r3, [pc, #660]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025b8:	49a2      	ldr	r1, [pc, #648]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ba:	4313      	orrs	r3, r2
 80025bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d00a      	beq.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80025cc:	4b9d      	ldr	r3, [pc, #628]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80025da:	499a      	ldr	r1, [pc, #616]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025dc:	4313      	orrs	r3, r2
 80025de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d00a      	beq.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80025ee:	4b95      	ldr	r3, [pc, #596]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80025fc:	4991      	ldr	r1, [pc, #580]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80025fe:	4313      	orrs	r3, r2
 8002600:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00a      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002610:	4b8c      	ldr	r3, [pc, #560]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002612:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002616:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800261e:	4989      	ldr	r1, [pc, #548]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002620:	4313      	orrs	r3, r2
 8002622:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002632:	4b84      	ldr	r3, [pc, #528]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002640:	4980      	ldr	r1, [pc, #512]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002650:	2b00      	cmp	r3, #0
 8002652:	d00a      	beq.n	800266a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002654:	4b7b      	ldr	r3, [pc, #492]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800265a:	f023 0203 	bic.w	r2, r3, #3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002662:	4978      	ldr	r1, [pc, #480]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002672:	2b00      	cmp	r3, #0
 8002674:	d00a      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002676:	4b73      	ldr	r3, [pc, #460]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002678:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800267c:	f023 020c 	bic.w	r2, r3, #12
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002684:	496f      	ldr	r1, [pc, #444]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002686:	4313      	orrs	r3, r2
 8002688:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002694:	2b00      	cmp	r3, #0
 8002696:	d00a      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002698:	4b6a      	ldr	r3, [pc, #424]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a6:	4967      	ldr	r1, [pc, #412]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d00a      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026ba:	4b62      	ldr	r3, [pc, #392]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c8:	495e      	ldr	r1, [pc, #376]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ca:	4313      	orrs	r3, r2
 80026cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026dc:	4b59      	ldr	r3, [pc, #356]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80026e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026ea:	4956      	ldr	r1, [pc, #344]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d00a      	beq.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80026fe:	4b51      	ldr	r3, [pc, #324]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002700:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002704:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800270c:	494d      	ldr	r1, [pc, #308]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d00a      	beq.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002720:	4b48      	ldr	r3, [pc, #288]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002722:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002726:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800272e:	4945      	ldr	r1, [pc, #276]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002730:	4313      	orrs	r3, r2
 8002732:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d00a      	beq.n	8002758 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002742:	4b40      	ldr	r3, [pc, #256]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002748:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002750:	493c      	ldr	r1, [pc, #240]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002752:	4313      	orrs	r3, r2
 8002754:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002760:	2b00      	cmp	r3, #0
 8002762:	d00a      	beq.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002764:	4b37      	ldr	r3, [pc, #220]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002766:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800276a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002772:	4934      	ldr	r1, [pc, #208]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002774:	4313      	orrs	r3, r2
 8002776:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002782:	2b00      	cmp	r3, #0
 8002784:	d011      	beq.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002786:	4b2f      	ldr	r3, [pc, #188]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002788:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800278c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002794:	492b      	ldr	r1, [pc, #172]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002796:	4313      	orrs	r3, r2
 8002798:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80027a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027a4:	d101      	bne.n	80027aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80027a6:	2301      	movs	r3, #1
 80027a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f003 0308 	and.w	r3, r3, #8
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d001      	beq.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d00a      	beq.n	80027dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80027c6:	4b1f      	ldr	r3, [pc, #124]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80027d4:	491b      	ldr	r1, [pc, #108]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027d6:	4313      	orrs	r3, r2
 80027d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d00b      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80027e8:	4b16      	ldr	r3, [pc, #88]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80027ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80027f8:	4912      	ldr	r1, [pc, #72]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002808:	2b00      	cmp	r3, #0
 800280a:	d00b      	beq.n	8002824 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 800280c:	4b0d      	ldr	r3, [pc, #52]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800280e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002812:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800281c:	4909      	ldr	r1, [pc, #36]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 800281e:	4313      	orrs	r3, r2
 8002820:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d00f      	beq.n	8002850 <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8002830:	4b04      	ldr	r3, [pc, #16]	; (8002844 <HAL_RCCEx_PeriphCLKConfig+0x4ac>)
 8002832:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002836:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	e002      	b.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	4986      	ldr	r1, [pc, #536]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800284a:	4313      	orrs	r3, r2
 800284c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002858:	2b00      	cmp	r3, #0
 800285a:	d00b      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 800285c:	4b81      	ldr	r3, [pc, #516]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800285e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002862:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800286c:	497d      	ldr	r1, [pc, #500]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800286e:	4313      	orrs	r3, r2
 8002870:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002874:	69fb      	ldr	r3, [r7, #28]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d006      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002882:	2b00      	cmp	r3, #0
 8002884:	f000 80d6 	beq.w	8002a34 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002888:	4b76      	ldr	r3, [pc, #472]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a75      	ldr	r2, [pc, #468]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800288e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002892:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002894:	f7fe fa6c 	bl	8000d70 <HAL_GetTick>
 8002898:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800289a:	e008      	b.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800289c:	f7fe fa68 	bl	8000d70 <HAL_GetTick>
 80028a0:	4602      	mov	r2, r0
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	1ad3      	subs	r3, r2, r3
 80028a6:	2b64      	cmp	r3, #100	; 0x64
 80028a8:	d901      	bls.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e195      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80028ae:	4b6d      	ldr	r3, [pc, #436]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d1f0      	bne.n	800289c <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d021      	beq.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x572>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d11d      	bne.n	800290a <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80028ce:	4b65      	ldr	r3, [pc, #404]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d4:	0c1b      	lsrs	r3, r3, #16
 80028d6:	f003 0303 	and.w	r3, r3, #3
 80028da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80028dc:	4b61      	ldr	r3, [pc, #388]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80028de:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028e2:	0e1b      	lsrs	r3, r3, #24
 80028e4:	f003 030f 	and.w	r3, r3, #15
 80028e8:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	019a      	lsls	r2, r3, #6
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	041b      	lsls	r3, r3, #16
 80028f4:	431a      	orrs	r2, r3
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	061b      	lsls	r3, r3, #24
 80028fa:	431a      	orrs	r2, r3
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	689b      	ldr	r3, [r3, #8]
 8002900:	071b      	lsls	r3, r3, #28
 8002902:	4958      	ldr	r1, [pc, #352]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002912:	2b00      	cmp	r3, #0
 8002914:	d004      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x588>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800291a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800291e:	d00a      	beq.n	8002936 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002928:	2b00      	cmp	r3, #0
 800292a:	d02e      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002930:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002934:	d129      	bne.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002936:	4b4b      	ldr	r3, [pc, #300]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002938:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800293c:	0c1b      	lsrs	r3, r3, #16
 800293e:	f003 0303 	and.w	r3, r3, #3
 8002942:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002944:	4b47      	ldr	r3, [pc, #284]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002946:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800294a:	0f1b      	lsrs	r3, r3, #28
 800294c:	f003 0307 	and.w	r3, r3, #7
 8002950:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	019a      	lsls	r2, r3, #6
 8002958:	693b      	ldr	r3, [r7, #16]
 800295a:	041b      	lsls	r3, r3, #16
 800295c:	431a      	orrs	r2, r3
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68db      	ldr	r3, [r3, #12]
 8002962:	061b      	lsls	r3, r3, #24
 8002964:	431a      	orrs	r2, r3
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	071b      	lsls	r3, r3, #28
 800296a:	493e      	ldr	r1, [pc, #248]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800296c:	4313      	orrs	r3, r2
 800296e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002972:	4b3c      	ldr	r3, [pc, #240]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002974:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002978:	f023 021f 	bic.w	r2, r3, #31
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002980:	3b01      	subs	r3, #1
 8002982:	4938      	ldr	r1, [pc, #224]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002984:	4313      	orrs	r3, r2
 8002986:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d01d      	beq.n	80029d2 <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002996:	4b33      	ldr	r3, [pc, #204]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002998:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800299c:	0e1b      	lsrs	r3, r3, #24
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80029a4:	4b2f      	ldr	r3, [pc, #188]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80029aa:	0f1b      	lsrs	r3, r3, #28
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	019a      	lsls	r2, r3, #6
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	041b      	lsls	r3, r3, #16
 80029be:	431a      	orrs	r2, r3
 80029c0:	693b      	ldr	r3, [r7, #16]
 80029c2:	061b      	lsls	r3, r3, #24
 80029c4:	431a      	orrs	r2, r3
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	071b      	lsls	r3, r3, #28
 80029ca:	4926      	ldr	r1, [pc, #152]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029cc:	4313      	orrs	r3, r2
 80029ce:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d011      	beq.n	8002a02 <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	019a      	lsls	r2, r3, #6
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	691b      	ldr	r3, [r3, #16]
 80029e8:	041b      	lsls	r3, r3, #16
 80029ea:	431a      	orrs	r2, r3
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	68db      	ldr	r3, [r3, #12]
 80029f0:	061b      	lsls	r3, r3, #24
 80029f2:	431a      	orrs	r2, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	689b      	ldr	r3, [r3, #8]
 80029f8:	071b      	lsls	r3, r3, #28
 80029fa:	491a      	ldr	r1, [pc, #104]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80029fc:	4313      	orrs	r3, r2
 80029fe:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002a02:	4b18      	ldr	r3, [pc, #96]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	4a17      	ldr	r2, [pc, #92]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a08:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002a0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a0e:	f7fe f9af 	bl	8000d70 <HAL_GetTick>
 8002a12:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a14:	e008      	b.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002a16:	f7fe f9ab 	bl	8000d70 <HAL_GetTick>
 8002a1a:	4602      	mov	r2, r0
 8002a1c:	697b      	ldr	r3, [r7, #20]
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b64      	cmp	r3, #100	; 0x64
 8002a22:	d901      	bls.n	8002a28 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e0d8      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002a28:	4b0e      	ldr	r3, [pc, #56]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a2a:	681b      	ldr	r3, [r3, #0]
 8002a2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d0f0      	beq.n	8002a16 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8002a34:	69bb      	ldr	r3, [r7, #24]
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	f040 80ce 	bne.w	8002bd8 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002a3c:	4b09      	ldr	r3, [pc, #36]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a08      	ldr	r2, [pc, #32]	; (8002a64 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8002a42:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002a46:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a48:	f7fe f992 	bl	8000d70 <HAL_GetTick>
 8002a4c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a4e:	e00b      	b.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a50:	f7fe f98e 	bl	8000d70 <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	697b      	ldr	r3, [r7, #20]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b64      	cmp	r3, #100	; 0x64
 8002a5c:	d904      	bls.n	8002a68 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e0bb      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x842>
 8002a62:	bf00      	nop
 8002a64:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002a68:	4b5e      	ldr	r3, [pc, #376]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a70:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a74:	d0ec      	beq.n	8002a50 <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d009      	beq.n	8002a9e <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	d02e      	beq.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d12a      	bne.n	8002af4 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002a9e:	4b51      	ldr	r3, [pc, #324]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aa4:	0c1b      	lsrs	r3, r3, #16
 8002aa6:	f003 0303 	and.w	r3, r3, #3
 8002aaa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002aac:	4b4d      	ldr	r3, [pc, #308]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab2:	0f1b      	lsrs	r3, r3, #28
 8002ab4:	f003 0307 	and.w	r3, r3, #7
 8002ab8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	695b      	ldr	r3, [r3, #20]
 8002abe:	019a      	lsls	r2, r3, #6
 8002ac0:	693b      	ldr	r3, [r7, #16]
 8002ac2:	041b      	lsls	r3, r3, #16
 8002ac4:	431a      	orrs	r2, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	061b      	lsls	r3, r3, #24
 8002acc:	431a      	orrs	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	071b      	lsls	r3, r3, #28
 8002ad2:	4944      	ldr	r1, [pc, #272]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8002ada:	4b42      	ldr	r3, [pc, #264]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002adc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ae0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ae8:	3b01      	subs	r3, #1
 8002aea:	021b      	lsls	r3, r3, #8
 8002aec:	493d      	ldr	r1, [pc, #244]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002aee:	4313      	orrs	r3, r2
 8002af0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d022      	beq.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002b04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002b08:	d11d      	bne.n	8002b46 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b0a:	4b36      	ldr	r3, [pc, #216]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b10:	0e1b      	lsrs	r3, r3, #24
 8002b12:	f003 030f 	and.w	r3, r3, #15
 8002b16:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8002b18:	4b32      	ldr	r3, [pc, #200]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b1e:	0f1b      	lsrs	r3, r3, #28
 8002b20:	f003 0307 	and.w	r3, r3, #7
 8002b24:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	695b      	ldr	r3, [r3, #20]
 8002b2a:	019a      	lsls	r2, r3, #6
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6a1b      	ldr	r3, [r3, #32]
 8002b30:	041b      	lsls	r3, r3, #16
 8002b32:	431a      	orrs	r2, r3
 8002b34:	693b      	ldr	r3, [r7, #16]
 8002b36:	061b      	lsls	r3, r3, #24
 8002b38:	431a      	orrs	r2, r3
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	071b      	lsls	r3, r3, #28
 8002b3e:	4929      	ldr	r1, [pc, #164]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b40:	4313      	orrs	r3, r2
 8002b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0308 	and.w	r3, r3, #8
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d028      	beq.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002b52:	4b24      	ldr	r3, [pc, #144]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b58:	0e1b      	lsrs	r3, r3, #24
 8002b5a:	f003 030f 	and.w	r3, r3, #15
 8002b5e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002b60:	4b20      	ldr	r3, [pc, #128]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b66:	0c1b      	lsrs	r3, r3, #16
 8002b68:	f003 0303 	and.w	r3, r3, #3
 8002b6c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	019a      	lsls	r2, r3, #6
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	041b      	lsls	r3, r3, #16
 8002b78:	431a      	orrs	r2, r3
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	061b      	lsls	r3, r3, #24
 8002b7e:	431a      	orrs	r2, r3
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	071b      	lsls	r3, r3, #28
 8002b86:	4917      	ldr	r1, [pc, #92]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8002b8e:	4b15      	ldr	r3, [pc, #84]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b90:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b94:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9c:	4911      	ldr	r1, [pc, #68]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002ba4:	4b0f      	ldr	r3, [pc, #60]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a0e      	ldr	r2, [pc, #56]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002baa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002bb0:	f7fe f8de 	bl	8000d70 <HAL_GetTick>
 8002bb4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bb6:	e008      	b.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002bb8:	f7fe f8da 	bl	8000d70 <HAL_GetTick>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	1ad3      	subs	r3, r2, r3
 8002bc2:	2b64      	cmp	r3, #100	; 0x64
 8002bc4:	d901      	bls.n	8002bca <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e007      	b.n	8002bda <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002bca:	4b06      	ldr	r3, [pc, #24]	; (8002be4 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002bd6:	d1ef      	bne.n	8002bb8 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8002bd8:	2300      	movs	r3, #0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3720      	adds	r7, #32
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40023800 	.word	0x40023800

08002be8 <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 8002be8:	b580      	push	{r7, lr}
 8002bea:	b082      	sub	sp, #8
 8002bec:	af00      	add	r7, sp, #0
 8002bee:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if(hsd == NULL)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d101      	bne.n	8002bfa <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e022      	b.n	8002c40 <HAL_SD_Init+0x58>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if(hsd->State == HAL_SD_STATE_RESET)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002c00:	b2db      	uxtb	r3, r3
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d105      	bne.n	8002c12 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	771a      	strb	r2, [r3, #28]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7fd fe7f 	bl	8000910 <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_BUSY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2203      	movs	r2, #3
 8002c16:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f000 f814 	bl	8002c48 <HAL_SD_InitCard>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d001      	beq.n	8002c2a <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e00a      	b.n	8002c40 <HAL_SD_Init+0x58>
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	2200      	movs	r2, #0
 8002c34:	631a      	str	r2, [r3, #48]	; 0x30

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2201      	movs	r2, #1
 8002c3a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8002c3e:	2300      	movs	r3, #0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}

08002c48 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 8002c48:	b5b0      	push	{r4, r5, r7, lr}
 8002c4a:	b08e      	sub	sp, #56	; 0x38
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  HAL_StatusTypeDef status;
  SD_InitTypeDef Init;
  
  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8002c50:	2300      	movs	r3, #0
 8002c52:	60bb      	str	r3, [r7, #8]
  Init.ClockBypass         = SDMMC_CLOCK_BYPASS_DISABLE;
 8002c54:	2300      	movs	r3, #0
 8002c56:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8002c60:	2300      	movs	r3, #0
 8002c62:	61bb      	str	r3, [r7, #24]
  Init.ClockDiv            = SDMMC_INIT_CLK_DIV;
 8002c64:	2376      	movs	r3, #118	; 0x76
 8002c66:	61fb      	str	r3, [r7, #28]

  /* Initialize SDMMC peripheral interface with default configuration */
  status = SDMMC_Init(hsd->Instance, Init);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681d      	ldr	r5, [r3, #0]
 8002c6c:	466c      	mov	r4, sp
 8002c6e:	f107 0314 	add.w	r3, r7, #20
 8002c72:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8002c76:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8002c7a:	f107 0308 	add.w	r3, r7, #8
 8002c7e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002c80:	4628      	mov	r0, r5
 8002c82:	f001 fdbb 	bl	80047fc <SDMMC_Init>
 8002c86:	4603      	mov	r3, r0
 8002c88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if(status != HAL_OK)
 8002c8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d001      	beq.n	8002c98 <HAL_SD_InitCard+0x50>
  {
    return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e059      	b.n	8002d4c <HAL_SD_InitCard+0x104>
  }

  /* Disable SDMMC Clock */
  __HAL_SD_DISABLE(hsd);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	685a      	ldr	r2, [r3, #4]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ca6:	605a      	str	r2, [r3, #4]

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4618      	mov	r0, r3
 8002cae:	f001 fdef 	bl	8004890 <SDMMC_PowerState_ON>

  /* Enable SDMMC Clock */
  __HAL_SD_ENABLE(hsd);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	685a      	ldr	r2, [r3, #4]
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002cc0:	605a      	str	r2, [r3, #4]

  /* Required power up waiting time before starting the SD initialization  sequence */
  HAL_Delay(2);
 8002cc2:	2002      	movs	r0, #2
 8002cc4:	f7fe f860 	bl	8000d88 <HAL_Delay>

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 8002cc8:	6878      	ldr	r0, [r7, #4]
 8002cca:	f000 fff3 	bl	8003cb4 <SD_PowerON>
 8002cce:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cd0:	6a3b      	ldr	r3, [r7, #32]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d00b      	beq.n	8002cee <HAL_SD_InitCard+0xa6>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2201      	movs	r2, #1
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ce2:	6a3b      	ldr	r3, [r7, #32]
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02e      	b.n	8002d4c <HAL_SD_InitCard+0x104>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 ff12 	bl	8003b18 <SD_InitCard>
 8002cf4:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d00b      	beq.n	8002d14 <HAL_SD_InitCard+0xcc>
  {
    hsd->State = HAL_SD_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    hsd->ErrorCode |= errorstate;
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d08:	6a3b      	ldr	r3, [r7, #32]
 8002d0a:	431a      	orrs	r2, r3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e01b      	b.n	8002d4c <HAL_SD_InitCard+0x104>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002d1c:	4618      	mov	r0, r3
 8002d1e:	f001 fe49 	bl	80049b4 <SDMMC_CmdBlockLength>
 8002d22:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8002d24:	6a3b      	ldr	r3, [r7, #32]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00f      	beq.n	8002d4a <HAL_SD_InitCard+0x102>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a09      	ldr	r2, [pc, #36]	; (8002d54 <HAL_SD_InitCard+0x10c>)
 8002d30:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d36:	6a3b      	ldr	r3, [r7, #32]
 8002d38:	431a      	orrs	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2201      	movs	r2, #1
 8002d42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e000      	b.n	8002d4c <HAL_SD_InitCard+0x104>
  }

  return HAL_OK;
 8002d4a:	2300      	movs	r3, #0
}
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	3728      	adds	r7, #40	; 0x28
 8002d50:	46bd      	mov	sp, r7
 8002d52:	bdb0      	pop	{r4, r5, r7, pc}
 8002d54:	004005ff 	.word	0x004005ff

08002d58 <HAL_SD_ReadBlocks_DMA>:
  * @param  BlockAdd: Block Address from where data is to be read
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b08c      	sub	sp, #48	; 0x30
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
 8002d64:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d107      	bne.n	8002d80 <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d74:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002d7c:	2301      	movs	r3, #1
 8002d7e:	e0c3      	b.n	8002f08 <HAL_SD_ReadBlocks_DMA+0x1b0>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002d86:	b2db      	uxtb	r3, r3
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	f040 80bc 	bne.w	8002f06 <HAL_SD_ReadBlocks_DMA+0x1ae>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	2200      	movs	r2, #0
 8002d92:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002d94:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	441a      	add	r2, r3
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d907      	bls.n	8002db2 <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002da6:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e0aa      	b.n	8002f08 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	2203      	movs	r2, #3
 8002db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	62da      	str	r2, [r3, #44]	; 0x2c

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f442 7295 	orr.w	r2, r2, #298	; 0x12a
 8002dd0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmarx->XferCpltCallback = SD_DMAReceiveCplt;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dd6:	4a4e      	ldr	r2, [pc, #312]	; (8002f10 <HAL_SD_ReadBlocks_DMA+0x1b8>)
 8002dd8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmarx->XferErrorCallback = SD_DMAError;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dde:	4a4d      	ldr	r2, [pc, #308]	; (8002f14 <HAL_SD_ReadBlocks_DMA+0x1bc>)
 8002de0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmarx->XferAbortCallback = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de6:	2200      	movs	r2, #0
 8002de8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Force DMA Direction */
    hsd->hdmarx->Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dea:	68fb      	ldr	r3, [r7, #12]
 8002dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmarx->Instance->CR, DMA_SxCR_DIR, hsd->hdmarx->Init.Direction);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	430a      	orrs	r2, r1
 8002e0c:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmarx, (uint32_t)&hsd->Instance->FIFO, (uint32_t)pData, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	3380      	adds	r3, #128	; 0x80
 8002e18:	4619      	mov	r1, r3
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	025b      	lsls	r3, r3, #9
 8002e20:	089b      	lsrs	r3, r3, #2
 8002e22:	f7fe f963 	bl	80010ec <HAL_DMA_Start_IT>
 8002e26:	4603      	mov	r3, r0
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d017      	beq.n	8002e5c <HAL_SD_ReadBlocks_DMA+0x104>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f422 7295 	bic.w	r2, r2, #298	; 0x12a
 8002e3a:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	4a35      	ldr	r2, [pc, #212]	; (8002f18 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002e42:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e48:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	2201      	movs	r2, #1
 8002e54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e055      	b.n	8002f08 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
    else
    {
      /* Enable SD DMA transfer */
      __HAL_SD_DMA_ENABLE(hsd);
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f042 0208 	orr.w	r2, r2, #8
 8002e6a:	62da      	str	r2, [r3, #44]	; 0x2c

      if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d002      	beq.n	8002e7a <HAL_SD_ReadBlocks_DMA+0x122>
      {
        add *= 512U;
 8002e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e76:	025b      	lsls	r3, r3, #9
 8002e78:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8002e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e7e:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	025b      	lsls	r3, r3, #9
 8002e84:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 8002e86:	2390      	movs	r3, #144	; 0x90
 8002e88:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8002e8a:	2302      	movs	r3, #2
 8002e8c:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8002e8e:	2300      	movs	r3, #0
 8002e90:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 8002e92:	2301      	movs	r3, #1
 8002e94:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f107 0210 	add.w	r2, r7, #16
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f001 fd5b 	bl	800495c <SDMMC_ConfigData>

      /* Read Blocks in DMA mode */
      if(NumberOfBlocks > 1U)
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d90a      	bls.n	8002ec2 <HAL_SD_ReadBlocks_DMA+0x16a>
      {
        hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	2282      	movs	r2, #130	; 0x82
 8002eb0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Multi Block command */
        errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f001 fdbf 	bl	8004a3c <SDMMC_CmdReadMultiBlock>
 8002ebe:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002ec0:	e009      	b.n	8002ed6 <HAL_SD_ReadBlocks_DMA+0x17e>
      }
      else
      {
        hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	2281      	movs	r2, #129	; 0x81
 8002ec6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Read Single Block command */
        errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f001 fd92 	bl	80049f8 <SDMMC_CmdReadSingleBlock>
 8002ed4:	62f8      	str	r0, [r7, #44]	; 0x2c
      }
      if(errorstate != HAL_SD_ERROR_NONE)
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d012      	beq.n	8002f02 <HAL_SD_ReadBlocks_DMA+0x1aa>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	4a0d      	ldr	r2, [pc, #52]	; (8002f18 <HAL_SD_ReadBlocks_DMA+0x1c0>)
 8002ee2:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->ErrorCode |= errorstate;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eea:	431a      	orrs	r2, r3
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	631a      	str	r2, [r3, #48]	; 0x30
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e002      	b.n	8002f08 <HAL_SD_ReadBlocks_DMA+0x1b0>
      }

      return HAL_OK;
 8002f02:	2300      	movs	r3, #0
 8002f04:	e000      	b.n	8002f08 <HAL_SD_ReadBlocks_DMA+0x1b0>
    }
  }
  else
  {
    return HAL_BUSY;
 8002f06:	2302      	movs	r3, #2
  }
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3730      	adds	r7, #48	; 0x30
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	08003927 	.word	0x08003927
 8002f14:	08003999 	.word	0x08003999
 8002f18:	004005ff 	.word	0x004005ff

08002f1c <HAL_SD_WriteBlocks_DMA>:
  * @param  BlockAdd: Block Address where data will be written
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks)
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b08c      	sub	sp, #48	; 0x30
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
 8002f28:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	62bb      	str	r3, [r7, #40]	; 0x28

  if(NULL == pData)
 8002f2e:	68bb      	ldr	r3, [r7, #8]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d107      	bne.n	8002f44 <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f38:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	639a      	str	r2, [r3, #56]	; 0x38
    return HAL_ERROR;
 8002f40:	2301      	movs	r3, #1
 8002f42:	e0c6      	b.n	80030d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
  }

  if(hsd->State == HAL_SD_STATE_READY)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	f040 80bf 	bne.w	80030d0 <HAL_SD_WriteBlocks_DMA+0x1b4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	2200      	movs	r2, #0
 8002f56:	639a      	str	r2, [r3, #56]	; 0x38

    if((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 8002f58:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	441a      	add	r2, r3
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f62:	429a      	cmp	r2, r3
 8002f64:	d907      	bls.n	8002f76 <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f6a:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	639a      	str	r2, [r3, #56]	; 0x38
      return HAL_ERROR;
 8002f72:	2301      	movs	r3, #1
 8002f74:	e0ad      	b.n	80030d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	2203      	movs	r2, #3
 8002f7a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2200      	movs	r2, #0
 8002f84:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Enable SD Error interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f042 021a 	orr.w	r2, r2, #26
 8002f94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA transfer complete callback */
    hsd->hdmatx->XferCpltCallback = SD_DMATransmitCplt;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f9a:	4a50      	ldr	r2, [pc, #320]	; (80030dc <HAL_SD_WriteBlocks_DMA+0x1c0>)
 8002f9c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsd->hdmatx->XferErrorCallback = SD_DMAError;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002fa2:	4a4f      	ldr	r2, [pc, #316]	; (80030e0 <HAL_SD_WriteBlocks_DMA+0x1c4>)
 8002fa4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Abort callback */
    hsd->hdmatx->XferAbortCallback = NULL;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002faa:	2200      	movs	r2, #0
 8002fac:	651a      	str	r2, [r3, #80]	; 0x50

    if(hsd->SdCard.CardType != CARD_SDHC_SDXC)
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d002      	beq.n	8002fbc <HAL_SD_WriteBlocks_DMA+0xa0>
    {
      add *= 512U;
 8002fb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fb8:	025b      	lsls	r3, r3, #9
 8002fba:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    /* Write Blocks in Polling mode */
    if(NumberOfBlocks > 1U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d90a      	bls.n	8002fd8 <HAL_SD_WriteBlocks_DMA+0xbc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	22a0      	movs	r2, #160	; 0xa0
 8002fc6:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fce:	4618      	mov	r0, r3
 8002fd0:	f001 fd78 	bl	8004ac4 <SDMMC_CmdWriteMultiBlock>
 8002fd4:	62f8      	str	r0, [r7, #44]	; 0x2c
 8002fd6:	e009      	b.n	8002fec <HAL_SD_WriteBlocks_DMA+0xd0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2290      	movs	r2, #144	; 0x90
 8002fdc:	631a      	str	r2, [r3, #48]	; 0x30

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002fe4:	4618      	mov	r0, r3
 8002fe6:	f001 fd4b 	bl	8004a80 <SDMMC_CmdWriteSingleBlock>
 8002fea:	62f8      	str	r0, [r7, #44]	; 0x2c
    }
    if(errorstate != HAL_SD_ERROR_NONE)
 8002fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d012      	beq.n	8003018 <HAL_SD_WriteBlocks_DMA+0xfc>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	4a3b      	ldr	r2, [pc, #236]	; (80030e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8002ff8:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= errorstate;
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ffe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003000:	431a      	orrs	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2201      	movs	r2, #1
 800300a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	2200      	movs	r2, #0
 8003012:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 8003014:	2301      	movs	r3, #1
 8003016:	e05c      	b.n	80030d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }

    /* Enable SDMMC DMA transfer */
    __HAL_SD_DMA_ENABLE(hsd);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f042 0208 	orr.w	r2, r2, #8
 8003026:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Force DMA Direction */
    hsd->hdmatx->Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800302c:	2240      	movs	r2, #64	; 0x40
 800302e:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hsd->hdmatx->Instance->CR, DMA_SxCR_DIR, hsd->hdmatx->Init.Direction);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	430a      	orrs	r2, r1
 800304a:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Channel */
    if(HAL_DMA_Start_IT(hsd->hdmatx, (uint32_t)pData, (uint32_t)&hsd->Instance->FIFO, (uint32_t)(BLOCKSIZE * NumberOfBlocks)/4U) != HAL_OK)
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 8003050:	68b9      	ldr	r1, [r7, #8]
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	3380      	adds	r3, #128	; 0x80
 8003058:	461a      	mov	r2, r3
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	025b      	lsls	r3, r3, #9
 800305e:	089b      	lsrs	r3, r3, #2
 8003060:	f7fe f844 	bl	80010ec <HAL_DMA_Start_IT>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d01a      	beq.n	80030a0 <HAL_SD_WriteBlocks_DMA+0x184>
    {
      __HAL_SD_DISABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR));   
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	f022 021a 	bic.w	r2, r2, #26
 8003078:	63da      	str	r2, [r3, #60]	; 0x3c
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	4a19      	ldr	r2, [pc, #100]	; (80030e4 <HAL_SD_WriteBlocks_DMA+0x1c8>)
 8003080:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003086:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	639a      	str	r2, [r3, #56]	; 0x38
      hsd->State = HAL_SD_STATE_READY;
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	2201      	movs	r2, #1
 8003092:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_ERROR;
 800309c:	2301      	movs	r3, #1
 800309e:	e018      	b.n	80030d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
    else
    {
      /* Configure the SD DPSM (Data Path State Machine) */
      config.DataTimeOut   = SDMMC_DATATIMEOUT;
 80030a0:	f04f 33ff 	mov.w	r3, #4294967295
 80030a4:	613b      	str	r3, [r7, #16]
      config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	025b      	lsls	r3, r3, #9
 80030aa:	617b      	str	r3, [r7, #20]
      config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 80030ac:	2390      	movs	r3, #144	; 0x90
 80030ae:	61bb      	str	r3, [r7, #24]
      config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 80030b0:	2300      	movs	r3, #0
 80030b2:	61fb      	str	r3, [r7, #28]
      config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 80030b4:	2300      	movs	r3, #0
 80030b6:	623b      	str	r3, [r7, #32]
      config.DPSM          = SDMMC_DPSM_ENABLE;
 80030b8:	2301      	movs	r3, #1
 80030ba:	627b      	str	r3, [r7, #36]	; 0x24
      (void)SDMMC_ConfigData(hsd->Instance, &config);
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f107 0210 	add.w	r2, r7, #16
 80030c4:	4611      	mov	r1, r2
 80030c6:	4618      	mov	r0, r3
 80030c8:	f001 fc48 	bl	800495c <SDMMC_ConfigData>

      return HAL_OK;
 80030cc:	2300      	movs	r3, #0
 80030ce:	e000      	b.n	80030d2 <HAL_SD_WriteBlocks_DMA+0x1b6>
    }
  }
  else
  {
    return HAL_BUSY;
 80030d0:	2302      	movs	r3, #2
  }
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3730      	adds	r7, #48	; 0x30
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	080038fd 	.word	0x080038fd
 80030e0:	08003999 	.word	0x08003999
 80030e4:	004005ff 	.word	0x004005ff

080030e8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 80030e8:	b580      	push	{r7, lr}
 80030ea:	b084      	sub	sp, #16
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80030fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003100:	2b00      	cmp	r3, #0
 8003102:	d008      	beq.n	8003116 <HAL_SD_IRQHandler+0x2e>
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f003 0308 	and.w	r3, r3, #8
 800310a:	2b00      	cmp	r3, #0
 800310c:	d003      	beq.n	8003116 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 800310e:	6878      	ldr	r0, [r7, #4]
 8003110:	f000 ffef 	bl	80040f2 <SD_Read_IT>
 8003114:	e153      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
  }

  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800311c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003120:	2b00      	cmp	r3, #0
 8003122:	f000 808d 	beq.w	8003240 <HAL_SD_IRQHandler+0x158>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800312e:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	4ba3      	ldr	r3, [pc, #652]	; (80033c8 <HAL_SD_IRQHandler+0x2e0>)
 800313c:	400b      	ands	r3, r1
 800313e:	63d3      	str	r3, [r2, #60]	; 0x3c
                             SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE |\
                             SDMMC_IT_RXFIFOHF);

    hsd->Instance->DCTRL &= ~(SDMMC_DCTRL_DTEN);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 0201 	bic.w	r2, r2, #1
 800314e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    if((context & SD_CONTEXT_IT) != 0U)
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	f003 0308 	and.w	r3, r3, #8
 8003156:	2b00      	cmp	r3, #0
 8003158:	d039      	beq.n	80031ce <HAL_SD_IRQHandler+0xe6>
    {
      if(((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d104      	bne.n	800316e <HAL_SD_IRQHandler+0x86>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	f003 0320 	and.w	r3, r3, #32
 800316a:	2b00      	cmp	r3, #0
 800316c:	d011      	beq.n	8003192 <HAL_SD_IRQHandler+0xaa>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f001 fcc8 	bl	8004b08 <SDMMC_CmdStopTransfer>
 8003178:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2b00      	cmp	r3, #0
 800317e:	d008      	beq.n	8003192 <HAL_SD_IRQHandler+0xaa>
        {
          hsd->ErrorCode |= errorstate;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003184:	68bb      	ldr	r3, [r7, #8]
 8003186:	431a      	orrs	r2, r3
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	639a      	str	r2, [r3, #56]	; 0x38
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 800318c:	6878      	ldr	r0, [r7, #4]
 800318e:	f000 f921 	bl	80033d4 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f240 523a 	movw	r2, #1338	; 0x53a
 800319a:	639a      	str	r2, [r3, #56]	; 0x38

      hsd->State = HAL_SD_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	631a      	str	r2, [r3, #48]	; 0x30
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d104      	bne.n	80031be <HAL_SD_IRQHandler+0xd6>
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	f003 0302 	and.w	r3, r3, #2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d003      	beq.n	80031c6 <HAL_SD_IRQHandler+0xde>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80031be:	6878      	ldr	r0, [r7, #4]
 80031c0:	f002 f938 	bl	8005434 <HAL_SD_RxCpltCallback>
 80031c4:	e0fb      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80031c6:	6878      	ldr	r0, [r7, #4]
 80031c8:	f002 f92a 	bl	8005420 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80031cc:	e0f7      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f000 80f2 	beq.w	80033be <HAL_SD_IRQHandler+0x2d6>
      if((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	f003 0320 	and.w	r3, r3, #32
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d011      	beq.n	8003208 <HAL_SD_IRQHandler+0x120>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 fc8d 	bl	8004b08 <SDMMC_CmdStopTransfer>
 80031ee:	60b8      	str	r0, [r7, #8]
        if(errorstate != HAL_SD_ERROR_NONE)
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d008      	beq.n	8003208 <HAL_SD_IRQHandler+0x120>
          hsd->ErrorCode |= errorstate;
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	431a      	orrs	r2, r3
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	639a      	str	r2, [r3, #56]	; 0x38
          HAL_SD_ErrorCallback(hsd);
 8003202:	6878      	ldr	r0, [r7, #4]
 8003204:	f000 f8e6 	bl	80033d4 <HAL_SD_ErrorCallback>
      if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) == 0U) && ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) == 0U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f003 0301 	and.w	r3, r3, #1
 800320e:	2b00      	cmp	r3, #0
 8003210:	f040 80d5 	bne.w	80033be <HAL_SD_IRQHandler+0x2d6>
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f003 0302 	and.w	r3, r3, #2
 800321a:	2b00      	cmp	r3, #0
 800321c:	f040 80cf 	bne.w	80033be <HAL_SD_IRQHandler+0x2d6>
        hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f022 0208 	bic.w	r2, r2, #8
 800322e:	62da      	str	r2, [r3, #44]	; 0x2c
        hsd->State = HAL_SD_STATE_READY;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        HAL_SD_TxCpltCallback(hsd);
 8003238:	6878      	ldr	r0, [r7, #4]
 800323a:	f002 f8f1 	bl	8005420 <HAL_SD_TxCpltCallback>
}
 800323e:	e0be      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
  else if((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003246:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d008      	beq.n	8003260 <HAL_SD_IRQHandler+0x178>
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0308 	and.w	r3, r3, #8
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <HAL_SD_IRQHandler+0x178>
    SD_Write_IT(hsd);
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 ff9b 	bl	8004194 <SD_Write_IT>
 800325e:	e0ae      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR | SDMMC_FLAG_TXUNDERR) != RESET)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003266:	f003 033a 	and.w	r3, r3, #58	; 0x3a
 800326a:	2b00      	cmp	r3, #0
 800326c:	f000 80a7 	beq.w	80033be <HAL_SD_IRQHandler+0x2d6>
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL) != RESET)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d005      	beq.n	800328a <HAL_SD_IRQHandler+0x1a2>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003282:	f043 0202 	orr.w	r2, r3, #2
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT) != RESET)
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003290:	f003 0308 	and.w	r3, r3, #8
 8003294:	2b00      	cmp	r3, #0
 8003296:	d005      	beq.n	80032a4 <HAL_SD_IRQHandler+0x1bc>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800329c:	f043 0208 	orr.w	r2, r3, #8
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR) != RESET)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032aa:	f003 0320 	and.w	r3, r3, #32
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d005      	beq.n	80032be <HAL_SD_IRQHandler+0x1d6>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032b6:	f043 0220 	orr.w	r2, r3, #32
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	639a      	str	r2, [r3, #56]	; 0x38
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR) != RESET)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032c4:	f003 0310 	and.w	r3, r3, #16
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d005      	beq.n	80032d8 <HAL_SD_IRQHandler+0x1f0>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80032d0:	f043 0210 	orr.w	r2, r3, #16
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f240 523a 	movw	r2, #1338	; 0x53a
 80032e0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80032f0:	63da      	str	r2, [r3, #60]	; 0x3c
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	4618      	mov	r0, r3
 80032f8:	f001 fc06 	bl	8004b08 <SDMMC_CmdStopTransfer>
 80032fc:	4602      	mov	r2, r0
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003302:	431a      	orrs	r2, r3
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	639a      	str	r2, [r3, #56]	; 0x38
    if((context & SD_CONTEXT_IT) != 0U)
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	f003 0308 	and.w	r3, r3, #8
 800330e:	2b00      	cmp	r3, #0
 8003310:	d00a      	beq.n	8003328 <HAL_SD_IRQHandler+0x240>
      hsd->State = HAL_SD_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2201      	movs	r2, #1
 8003316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2200      	movs	r2, #0
 800331e:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_SD_ErrorCallback(hsd);
 8003320:	6878      	ldr	r0, [r7, #4]
 8003322:	f000 f857 	bl	80033d4 <HAL_SD_ErrorCallback>
}
 8003326:	e04a      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
    else if((context & SD_CONTEXT_DMA) != 0U)
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332e:	2b00      	cmp	r3, #0
 8003330:	d045      	beq.n	80033be <HAL_SD_IRQHandler+0x2d6>
      if(((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	f003 0310 	and.w	r3, r3, #16
 8003338:	2b00      	cmp	r3, #0
 800333a:	d104      	bne.n	8003346 <HAL_SD_IRQHandler+0x25e>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	f003 0320 	and.w	r3, r3, #32
 8003342:	2b00      	cmp	r3, #0
 8003344:	d011      	beq.n	800336a <HAL_SD_IRQHandler+0x282>
        hsd->hdmatx->XferAbortCallback = SD_DMATxAbort;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800334a:	4a20      	ldr	r2, [pc, #128]	; (80033cc <HAL_SD_IRQHandler+0x2e4>)
 800334c:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003352:	4618      	mov	r0, r3
 8003354:	f7fd ff2a 	bl	80011ac <HAL_DMA_Abort_IT>
 8003358:	4603      	mov	r3, r0
 800335a:	2b00      	cmp	r3, #0
 800335c:	d02f      	beq.n	80033be <HAL_SD_IRQHandler+0x2d6>
          SD_DMATxAbort(hsd->hdmatx);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003362:	4618      	mov	r0, r3
 8003364:	f000 fb6a 	bl	8003a3c <SD_DMATxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmatx) != HAL_OK)
 8003368:	e029      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
      else if(((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f003 0301 	and.w	r3, r3, #1
 8003370:	2b00      	cmp	r3, #0
 8003372:	d104      	bne.n	800337e <HAL_SD_IRQHandler+0x296>
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	f003 0302 	and.w	r3, r3, #2
 800337a:	2b00      	cmp	r3, #0
 800337c:	d011      	beq.n	80033a2 <HAL_SD_IRQHandler+0x2ba>
        hsd->hdmarx->XferAbortCallback = SD_DMARxAbort;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003382:	4a13      	ldr	r2, [pc, #76]	; (80033d0 <HAL_SD_IRQHandler+0x2e8>)
 8003384:	651a      	str	r2, [r3, #80]	; 0x50
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800338a:	4618      	mov	r0, r3
 800338c:	f7fd ff0e 	bl	80011ac <HAL_DMA_Abort_IT>
 8003390:	4603      	mov	r3, r0
 8003392:	2b00      	cmp	r3, #0
 8003394:	d013      	beq.n	80033be <HAL_SD_IRQHandler+0x2d6>
          SD_DMARxAbort(hsd->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339a:	4618      	mov	r0, r3
 800339c:	f000 fb85 	bl	8003aaa <SD_DMARxAbort>
        if(HAL_DMA_Abort_IT(hsd->hdmarx) != HAL_OK)
 80033a0:	e00d      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
        hsd->ErrorCode = HAL_SD_ERROR_NONE;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	639a      	str	r2, [r3, #56]	; 0x38
        hsd->State = HAL_SD_STATE_READY;
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        hsd->Context = SD_CONTEXT_NONE;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2200      	movs	r2, #0
 80033b4:	631a      	str	r2, [r3, #48]	; 0x30
        HAL_SD_AbortCallback(hsd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f002 f828 	bl	800540c <HAL_SD_AbortCallback>
}
 80033bc:	e7ff      	b.n	80033be <HAL_SD_IRQHandler+0x2d6>
 80033be:	bf00      	nop
 80033c0:	3710      	adds	r7, #16
 80033c2:	46bd      	mov	sp, r7
 80033c4:	bd80      	pop	{r7, pc}
 80033c6:	bf00      	nop
 80033c8:	ffff3ec5 	.word	0xffff3ec5
 80033cc:	08003a3d 	.word	0x08003a3d
 80033d0:	08003aab 	.word	0x08003aab

080033d4 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 80033d4:	b480      	push	{r7}
 80033d6:	b083      	sub	sp, #12
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 80033dc:	bf00      	nop
 80033de:	370c      	adds	r7, #12
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr

080033e8 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that  
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80033f6:	0f9b      	lsrs	r3, r3, #30
 80033f8:	b2da      	uxtb	r2, r3
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003402:	0e9b      	lsrs	r3, r3, #26
 8003404:	b2db      	uxtb	r3, r3
 8003406:	f003 030f 	and.w	r3, r3, #15
 800340a:	b2da      	uxtb	r2, r3
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003414:	0e1b      	lsrs	r3, r3, #24
 8003416:	b2db      	uxtb	r3, r3
 8003418:	f003 0303 	and.w	r3, r3, #3
 800341c:	b2da      	uxtb	r2, r3
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003426:	0c1b      	lsrs	r3, r3, #16
 8003428:	b2da      	uxtb	r2, r3
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003432:	0a1b      	lsrs	r3, r3, #8
 8003434:	b2da      	uxtb	r2, r3
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800343e:	b2da      	uxtb	r2, r3
 8003440:	683b      	ldr	r3, [r7, #0]
 8003442:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003448:	0d1b      	lsrs	r3, r3, #20
 800344a:	b29a      	uxth	r2, r3
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003454:	0c1b      	lsrs	r3, r3, #16
 8003456:	b2db      	uxtb	r3, r3
 8003458:	f003 030f 	and.w	r3, r3, #15
 800345c:	b2da      	uxtb	r2, r3
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003466:	0bdb      	lsrs	r3, r3, #15
 8003468:	b2db      	uxtb	r3, r3
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	b2da      	uxtb	r2, r3
 8003470:	683b      	ldr	r3, [r7, #0]
 8003472:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003478:	0b9b      	lsrs	r3, r3, #14
 800347a:	b2db      	uxtb	r3, r3
 800347c:	f003 0301 	and.w	r3, r3, #1
 8003480:	b2da      	uxtb	r2, r3
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800348a:	0b5b      	lsrs	r3, r3, #13
 800348c:	b2db      	uxtb	r3, r3
 800348e:	f003 0301 	and.w	r3, r3, #1
 8003492:	b2da      	uxtb	r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800349c:	0b1b      	lsrs	r3, r3, #12
 800349e:	b2db      	uxtb	r3, r3
 80034a0:	f003 0301 	and.w	r3, r3, #1
 80034a4:	b2da      	uxtb	r2, r3
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	2200      	movs	r2, #0
 80034ae:	735a      	strb	r2, [r3, #13]

  if(hsd->SdCard.CardType == CARD_SDSC)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d163      	bne.n	8003580 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034bc:	009a      	lsls	r2, r3, #2
 80034be:	f640 73fc 	movw	r3, #4092	; 0xffc
 80034c2:	4013      	ands	r3, r2
 80034c4:	687a      	ldr	r2, [r7, #4]
 80034c6:	6ed2      	ldr	r2, [r2, #108]	; 0x6c
 80034c8:	0f92      	lsrs	r2, r2, #30
 80034ca:	431a      	orrs	r2, r3
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034d4:	0edb      	lsrs	r3, r3, #27
 80034d6:	b2db      	uxtb	r3, r3
 80034d8:	f003 0307 	and.w	r3, r3, #7
 80034dc:	b2da      	uxtb	r2, r3
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034e6:	0e1b      	lsrs	r3, r3, #24
 80034e8:	b2db      	uxtb	r3, r3
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	b2da      	uxtb	r2, r3
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034f8:	0d5b      	lsrs	r3, r3, #21
 80034fa:	b2db      	uxtb	r3, r3
 80034fc:	f003 0307 	and.w	r3, r3, #7
 8003500:	b2da      	uxtb	r2, r3
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800350a:	0c9b      	lsrs	r3, r3, #18
 800350c:	b2db      	uxtb	r3, r3
 800350e:	f003 0307 	and.w	r3, r3, #7
 8003512:	b2da      	uxtb	r2, r3
 8003514:	683b      	ldr	r3, [r7, #0]
 8003516:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800351c:	0bdb      	lsrs	r3, r3, #15
 800351e:	b2db      	uxtb	r3, r3
 8003520:	f003 0307 	and.w	r3, r3, #7
 8003524:	b2da      	uxtb	r2, r3
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 800352a:	683b      	ldr	r3, [r7, #0]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	1c5a      	adds	r2, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	7e1b      	ldrb	r3, [r3, #24]
 8003538:	b2db      	uxtb	r3, r3
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	3302      	adds	r3, #2
 8003540:	2201      	movs	r2, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	687a      	ldr	r2, [r7, #4]
 8003548:	6d52      	ldr	r2, [r2, #84]	; 0x54
 800354a:	fb02 f203 	mul.w	r2, r2, r3
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	7a1b      	ldrb	r3, [r3, #8]
 8003556:	b2db      	uxtb	r3, r3
 8003558:	f003 030f 	and.w	r3, r3, #15
 800355c:	2201      	movs	r2, #1
 800355e:	409a      	lsls	r2, r3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	659a      	str	r2, [r3, #88]	; 0x58

    hsd->SdCard.LogBlockNbr =  (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / 512U);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003568:	687a      	ldr	r2, [r7, #4]
 800356a:	6d92      	ldr	r2, [r2, #88]	; 0x58
 800356c:	0a52      	lsrs	r2, r2, #9
 800356e:	fb02 f203 	mul.w	r2, r2, r3
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.LogBlockSize = 512U;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	f44f 7200 	mov.w	r2, #512	; 0x200
 800357c:	661a      	str	r2, [r3, #96]	; 0x60
 800357e:	e031      	b.n	80035e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else if(hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003584:	2b01      	cmp	r3, #1
 8003586:	d11d      	bne.n	80035c4 <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800358c:	041b      	lsls	r3, r3, #16
 800358e:	f403 127c 	and.w	r2, r3, #4128768	; 0x3f0000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003596:	0c1b      	lsrs	r3, r3, #16
 8003598:	431a      	orrs	r2, r3
 800359a:	683b      	ldr	r3, [r7, #0]
 800359c:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	3301      	adds	r3, #1
 80035a4:	029a      	lsls	r2, r3, #10
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	655a      	str	r2, [r3, #84]	; 0x54
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	65da      	str	r2, [r3, #92]	; 0x5c
    hsd->SdCard.BlockSize = 512U;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80035b8:	659a      	str	r2, [r3, #88]	; 0x58
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	661a      	str	r2, [r3, #96]	; 0x60
 80035c2:	e00f      	b.n	80035e4 <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a58      	ldr	r2, [pc, #352]	; (800372c <HAL_SD_GetCardCSD+0x344>)
 80035ca:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035d0:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    return HAL_ERROR;
 80035e0:	2301      	movs	r3, #1
 80035e2:	e09d      	b.n	8003720 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035e8:	0b9b      	lsrs	r3, r3, #14
 80035ea:	b2db      	uxtb	r3, r3
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	b2da      	uxtb	r2, r3
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80035fa:	09db      	lsrs	r3, r3, #7
 80035fc:	b2db      	uxtb	r3, r3
 80035fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003602:	b2da      	uxtb	r2, r3
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800360c:	b2db      	uxtb	r3, r3
 800360e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003612:	b2da      	uxtb	r2, r3
 8003614:	683b      	ldr	r3, [r7, #0]
 8003616:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	0fdb      	lsrs	r3, r3, #31
 800361e:	b2da      	uxtb	r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003628:	0f5b      	lsrs	r3, r3, #29
 800362a:	b2db      	uxtb	r3, r3
 800362c:	f003 0303 	and.w	r3, r3, #3
 8003630:	b2da      	uxtb	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800363a:	0e9b      	lsrs	r3, r3, #26
 800363c:	b2db      	uxtb	r3, r3
 800363e:	f003 0307 	and.w	r3, r3, #7
 8003642:	b2da      	uxtb	r2, r3
 8003644:	683b      	ldr	r3, [r7, #0]
 8003646:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen= (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800364c:	0d9b      	lsrs	r3, r3, #22
 800364e:	b2db      	uxtb	r3, r3
 8003650:	f003 030f 	and.w	r3, r3, #15
 8003654:	b2da      	uxtb	r2, r3
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800365e:	0d5b      	lsrs	r3, r3, #21
 8003660:	b2db      	uxtb	r3, r3
 8003662:	f003 0301 	and.w	r3, r3, #1
 8003666:	b2da      	uxtb	r2, r3
 8003668:	683b      	ldr	r3, [r7, #0]
 800366a:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800367a:	0c1b      	lsrs	r3, r3, #16
 800367c:	b2db      	uxtb	r3, r3
 800367e:	f003 0301 	and.w	r3, r3, #1
 8003682:	b2da      	uxtb	r2, r3
 8003684:	683b      	ldr	r3, [r7, #0]
 8003686:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800368e:	0bdb      	lsrs	r3, r3, #15
 8003690:	b2db      	uxtb	r3, r3
 8003692:	f003 0301 	and.w	r3, r3, #1
 8003696:	b2da      	uxtb	r2, r3
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036a2:	0b9b      	lsrs	r3, r3, #14
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	f003 0301 	and.w	r3, r3, #1
 80036aa:	b2da      	uxtb	r2, r3
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036b6:	0b5b      	lsrs	r3, r3, #13
 80036b8:	b2db      	uxtb	r3, r3
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	b2da      	uxtb	r2, r3
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036ca:	0b1b      	lsrs	r3, r3, #12
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	f003 0301 	and.w	r3, r3, #1
 80036d2:	b2da      	uxtb	r2, r3
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036de:	0a9b      	lsrs	r3, r3, #10
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	f003 0303 	and.w	r3, r3, #3
 80036e6:	b2da      	uxtb	r2, r3
 80036e8:	683b      	ldr	r3, [r7, #0]
 80036ea:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27

  pCSD->ECC= (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036f2:	0a1b      	lsrs	r3, r3, #8
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 0303 	and.w	r3, r3, #3
 80036fa:	b2da      	uxtb	r2, r3
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003706:	085b      	lsrs	r3, r3, #1
 8003708:	b2db      	uxtb	r3, r3
 800370a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800370e:	b2da      	uxtb	r2, r3
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29

  pCSD->Reserved4 = 1;
 8003716:	683b      	ldr	r3, [r7, #0]
 8003718:	2201      	movs	r2, #1
 800371a:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a

  return HAL_OK;
 800371e:	2300      	movs	r3, #0
}
 8003720:	4618      	mov	r0, r3
 8003722:	370c      	adds	r7, #12
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	004005ff 	.word	0x004005ff

08003730 <HAL_SD_GetCardInfo>:
  * @param  pCardInfo: Pointer to the HAL_SD_CardInfoTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardInfo(SD_HandleTypeDef *hsd, HAL_SD_CardInfoTypeDef *pCardInfo)
{
 8003730:	b480      	push	{r7}
 8003732:	b083      	sub	sp, #12
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  pCardInfo->CardType     = (uint32_t)(hsd->SdCard.CardType);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800373e:	683b      	ldr	r3, [r7, #0]
 8003740:	601a      	str	r2, [r3, #0]
  pCardInfo->CardVersion  = (uint32_t)(hsd->SdCard.CardVersion);
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	605a      	str	r2, [r3, #4]
  pCardInfo->Class        = (uint32_t)(hsd->SdCard.Class);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	609a      	str	r2, [r3, #8]
  pCardInfo->RelCardAdd   = (uint32_t)(hsd->SdCard.RelCardAdd);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	60da      	str	r2, [r3, #12]
  pCardInfo->BlockNbr     = (uint32_t)(hsd->SdCard.BlockNbr);
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	611a      	str	r2, [r3, #16]
  pCardInfo->BlockSize    = (uint32_t)(hsd->SdCard.BlockSize);
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	615a      	str	r2, [r3, #20]
  pCardInfo->LogBlockNbr  = (uint32_t)(hsd->SdCard.LogBlockNbr);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	619a      	str	r2, [r3, #24]
  pCardInfo->LogBlockSize = (uint32_t)(hsd->SdCard.LogBlockSize);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	61da      	str	r2, [r3, #28]

  return HAL_OK;
 800377a:	2300      	movs	r3, #0
}
 800377c:	4618      	mov	r0, r3
 800377e:	370c      	adds	r7, #12
 8003780:	46bd      	mov	sp, r7
 8003782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003786:	4770      	bx	lr

08003788 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8003788:	b5b0      	push	{r4, r5, r7, lr}
 800378a:	b08e      	sub	sp, #56	; 0x38
 800378c:	af04      	add	r7, sp, #16
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8003792:	2300      	movs	r3, #0
 8003794:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2203      	movs	r2, #3
 800379c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  if(hsd->SdCard.CardType != CARD_SECURED)
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037a4:	2b03      	cmp	r3, #3
 80037a6:	d02e      	beq.n	8003806 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if(WideMode == SDMMC_BUS_WIDE_8B)
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ae:	d106      	bne.n	80037be <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	639a      	str	r2, [r3, #56]	; 0x38
 80037bc:	e029      	b.n	8003812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_4B)
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037c4:	d10a      	bne.n	80037dc <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80037c6:	6878      	ldr	r0, [r7, #4]
 80037c8:	f000 fb2a 	bl	8003e20 <SD_WideBus_Enable>
 80037cc:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037d2:	6a3b      	ldr	r3, [r7, #32]
 80037d4:	431a      	orrs	r2, r3
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	639a      	str	r2, [r3, #56]	; 0x38
 80037da:	e01a      	b.n	8003812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if(WideMode == SDMMC_BUS_WIDE_1B)
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d10a      	bne.n	80037f8 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f000 fb67 	bl	8003eb6 <SD_WideBus_Disable>
 80037e8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ee:	6a3b      	ldr	r3, [r7, #32]
 80037f0:	431a      	orrs	r2, r3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	639a      	str	r2, [r3, #56]	; 0x38
 80037f6:	e00c      	b.n	8003812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037fc:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	639a      	str	r2, [r3, #56]	; 0x38
 8003804:	e005      	b.n	8003812 <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* MMC Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800380a:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode != HAL_SD_ERROR_NONE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00b      	beq.n	8003832 <HAL_SD_ConfigWideBusOperation+0xaa>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	4a26      	ldr	r2, [pc, #152]	; (80038b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 8003820:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->State = HAL_SD_STATE_READY;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2201      	movs	r2, #1
 8003826:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    status = HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8003830:	e01f      	b.n	8003872 <HAL_SD_ConfigWideBusOperation+0xea>
  }
  else
  {
    /* Configure the SDMMC peripheral */
    Init.ClockEdge           = hsd->Init.ClockEdge;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60bb      	str	r3, [r7, #8]
    Init.ClockBypass         = hsd->Init.ClockBypass;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	60fb      	str	r3, [r7, #12]
    Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	613b      	str	r3, [r7, #16]
    Init.BusWide             = WideMode;
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	617b      	str	r3, [r7, #20]
    Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	61bb      	str	r3, [r7, #24]
    Init.ClockDiv            = hsd->Init.ClockDiv;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	699b      	ldr	r3, [r3, #24]
 8003852:	61fb      	str	r3, [r7, #28]
    (void)SDMMC_Init(hsd->Instance, Init);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681d      	ldr	r5, [r3, #0]
 8003858:	466c      	mov	r4, sp
 800385a:	f107 0314 	add.w	r3, r7, #20
 800385e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8003862:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003866:	f107 0308 	add.w	r3, r7, #8
 800386a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800386c:	4628      	mov	r0, r5
 800386e:	f000 ffc5 	bl	80047fc <SDMMC_Init>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	f44f 7100 	mov.w	r1, #512	; 0x200
 800387a:	4618      	mov	r0, r3
 800387c:	f001 f89a 	bl	80049b4 <SDMMC_CmdBlockLength>
 8003880:	6238      	str	r0, [r7, #32]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003882:	6a3b      	ldr	r3, [r7, #32]
 8003884:	2b00      	cmp	r3, #0
 8003886:	d00c      	beq.n	80038a2 <HAL_SD_ConfigWideBusOperation+0x11a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a0a      	ldr	r2, [pc, #40]	; (80038b8 <HAL_SD_ConfigWideBusOperation+0x130>)
 800388e:	639a      	str	r2, [r3, #56]	; 0x38
    hsd->ErrorCode |= errorstate;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003894:	6a3b      	ldr	r3, [r7, #32]
 8003896:	431a      	orrs	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	639a      	str	r2, [r3, #56]	; 0x38
    status = HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2201      	movs	r2, #1
 80038a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return status;
 80038aa:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3728      	adds	r7, #40	; 0x28
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bdb0      	pop	{r4, r5, r7, pc}
 80038b6:	bf00      	nop
 80038b8:	004005ff 	.word	0x004005ff

080038bc <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b086      	sub	sp, #24
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 80038c4:	2300      	movs	r3, #0
 80038c6:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 80038c8:	f107 030c 	add.w	r3, r7, #12
 80038cc:	4619      	mov	r1, r3
 80038ce:	6878      	ldr	r0, [r7, #4]
 80038d0:	f000 fa7e 	bl	8003dd0 <SD_SendStatus>
 80038d4:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 80038d6:	697b      	ldr	r3, [r7, #20]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d005      	beq.n	80038e8 <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	0a5b      	lsrs	r3, r3, #9
 80038ec:	f003 030f 	and.w	r3, r3, #15
 80038f0:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 80038f2:	693b      	ldr	r3, [r7, #16]
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3718      	adds	r7, #24
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <SD_DMATransmitCplt>:
  * @brief  DMA SD transmit process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003908:	60fb      	str	r3, [r7, #12]

  /* Enable DATAEND Interrupt */
  __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DATAEND));
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003918:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800391a:	bf00      	nop
 800391c:	3714      	adds	r7, #20
 800391e:	46bd      	mov	sp, r7
 8003920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003924:	4770      	bx	lr

08003926 <SD_DMAReceiveCplt>:
  * @brief  DMA SD receive process complete callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003926:	b580      	push	{r7, lr}
 8003928:	b084      	sub	sp, #16
 800392a:	af00      	add	r7, sp, #0
 800392c:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003932:	60fb      	str	r3, [r7, #12]
  uint32_t errorstate;

  /* Send stop command in multiblock write */
  if(hsd->Context == (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA))
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003938:	2b82      	cmp	r3, #130	; 0x82
 800393a:	d111      	bne.n	8003960 <SD_DMAReceiveCplt+0x3a>
  {
    errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	4618      	mov	r0, r3
 8003942:	f001 f8e1 	bl	8004b08 <SDMMC_CmdStopTransfer>
 8003946:	60b8      	str	r0, [r7, #8]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <SD_DMAReceiveCplt+0x3a>
    {
      hsd->ErrorCode |= errorstate;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003952:	68bb      	ldr	r3, [r7, #8]
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	639a      	str	r2, [r3, #56]	; 0x38
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
      hsd->ErrorCallback(hsd);
#else
      HAL_SD_ErrorCallback(hsd);
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f7ff fd3a 	bl	80033d4 <HAL_SD_ErrorCallback>
    }
  }

  /* Disable the DMA transfer for transmit request by setting the DMAEN bit
  in the SD DCTRL register */
  hsd->Instance->DCTRL &= (uint32_t)~((uint32_t)SDMMC_DCTRL_DMAEN);
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f022 0208 	bic.w	r2, r2, #8
 800396e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Clear all the static flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f240 523a 	movw	r2, #1338	; 0x53a
 8003978:	639a      	str	r2, [r3, #56]	; 0x38

  hsd->State = HAL_SD_STATE_READY;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2201      	movs	r2, #1
 800397e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	2200      	movs	r2, #0
 8003986:	631a      	str	r2, [r3, #48]	; 0x30

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
  hsd->RxCpltCallback(hsd);
#else
  HAL_SD_RxCpltCallback(hsd);
 8003988:	68f8      	ldr	r0, [r7, #12]
 800398a:	f001 fd53 	bl	8005434 <HAL_SD_RxCpltCallback>
#endif
}
 800398e:	bf00      	nop
 8003990:	3710      	adds	r7, #16
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
	...

08003998 <SD_DMAError>:
  * @brief  DMA SD communication error callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMAError(DMA_HandleTypeDef *hdma)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b086      	sub	sp, #24
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039a4:	617b      	str	r3, [r7, #20]
  HAL_SD_CardStateTypeDef CardState;
  uint32_t RxErrorCode, TxErrorCode;

  /* if DMA error is FIFO error ignore it */
  if(HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f7fd fdac 	bl	8001504 <HAL_DMA_GetError>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b02      	cmp	r3, #2
 80039b0:	d03e      	beq.n	8003a30 <SD_DMAError+0x98>
  {
    RxErrorCode = hsd->hdmarx->ErrorCode;
 80039b2:	697b      	ldr	r3, [r7, #20]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b8:	613b      	str	r3, [r7, #16]
    TxErrorCode = hsd->hdmatx->ErrorCode;  
 80039ba:	697b      	ldr	r3, [r7, #20]
 80039bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039c0:	60fb      	str	r3, [r7, #12]
    if((RxErrorCode == HAL_DMA_ERROR_TE) || (TxErrorCode == HAL_DMA_ERROR_TE))
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d002      	beq.n	80039ce <SD_DMAError+0x36>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d12d      	bne.n	8003a2a <SD_DMAError+0x92>
    {
      /* Clear All flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80039ce:	697b      	ldr	r3, [r7, #20]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <SD_DMAError+0xa0>)
 80039d4:	639a      	str	r2, [r3, #56]	; 0x38

      /* Disable All interrupts */
      __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT|\
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80039dc:	697b      	ldr	r3, [r7, #20]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f422 729d 	bic.w	r2, r2, #314	; 0x13a
 80039e4:	63da      	str	r2, [r3, #60]	; 0x3c
        SDMMC_IT_TXUNDERR| SDMMC_IT_RXOVERR);

      hsd->ErrorCode |= HAL_SD_ERROR_DMA;
 80039e6:	697b      	ldr	r3, [r7, #20]
 80039e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039ea:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	639a      	str	r2, [r3, #56]	; 0x38
      CardState = HAL_SD_GetCardState(hsd);
 80039f2:	6978      	ldr	r0, [r7, #20]
 80039f4:	f7ff ff62 	bl	80038bc <HAL_SD_GetCardState>
 80039f8:	60b8      	str	r0, [r7, #8]
      if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 80039fa:	68bb      	ldr	r3, [r7, #8]
 80039fc:	2b06      	cmp	r3, #6
 80039fe:	d002      	beq.n	8003a06 <SD_DMAError+0x6e>
 8003a00:	68bb      	ldr	r3, [r7, #8]
 8003a02:	2b05      	cmp	r3, #5
 8003a04:	d10a      	bne.n	8003a1c <SD_DMAError+0x84>
      {
        hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a06:	697b      	ldr	r3, [r7, #20]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	f001 f87c 	bl	8004b08 <SDMMC_CmdStopTransfer>
 8003a10:	4602      	mov	r2, r0
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a16:	431a      	orrs	r2, r3
 8003a18:	697b      	ldr	r3, [r7, #20]
 8003a1a:	639a      	str	r2, [r3, #56]	; 0x38
      }

      hsd->State= HAL_SD_STATE_READY;
 8003a1c:	697b      	ldr	r3, [r7, #20]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
      hsd->Context = SD_CONTEXT_NONE;
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	2200      	movs	r2, #0
 8003a28:	631a      	str	r2, [r3, #48]	; 0x30
    }

#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
 8003a2a:	6978      	ldr	r0, [r7, #20]
 8003a2c:	f7ff fcd2 	bl	80033d4 <HAL_SD_ErrorCallback>
#endif
  }
}
 8003a30:	bf00      	nop
 8003a32:	3718      	adds	r7, #24
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}
 8003a38:	004005ff 	.word	0x004005ff

08003a3c <SD_DMATxAbort>:
  * @brief  DMA SD Tx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMATxAbort(DMA_HandleTypeDef *hdma)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b084      	sub	sp, #16
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f240 523a 	movw	r2, #1338	; 0x53a
 8003a52:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003a54:	68f8      	ldr	r0, [r7, #12]
 8003a56:	f7ff ff31 	bl	80038bc <HAL_SD_GetCardState>
 8003a5a:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	2200      	movs	r2, #0
 8003a68:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003a6a:	68bb      	ldr	r3, [r7, #8]
 8003a6c:	2b06      	cmp	r3, #6
 8003a6e:	d002      	beq.n	8003a76 <SD_DMATxAbort+0x3a>
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	2b05      	cmp	r3, #5
 8003a74:	d10a      	bne.n	8003a8c <SD_DMATxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f001 f844 	bl	8004b08 <SDMMC_CmdStopTransfer>
 8003a80:	4602      	mov	r2, r0
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a86:	431a      	orrs	r2, r3
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d103      	bne.n	8003a9c <SD_DMATxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003a94:	68f8      	ldr	r0, [r7, #12]
 8003a96:	f001 fcb9 	bl	800540c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003a9a:	e002      	b.n	8003aa2 <SD_DMATxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f7ff fc99 	bl	80033d4 <HAL_SD_ErrorCallback>
}
 8003aa2:	bf00      	nop
 8003aa4:	3710      	adds	r7, #16
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bd80      	pop	{r7, pc}

08003aaa <SD_DMARxAbort>:
  * @brief  DMA SD Rx Abort callback
  * @param  hdma: DMA handle
  * @retval None
  */
static void SD_DMARxAbort(DMA_HandleTypeDef *hdma)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b084      	sub	sp, #16
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  SD_HandleTypeDef* hsd = (SD_HandleTypeDef* )(hdma->Parent);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ab6:	60fb      	str	r3, [r7, #12]
  HAL_SD_CardStateTypeDef CardState;

  /* Clear All flags */
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f240 523a 	movw	r2, #1338	; 0x53a
 8003ac0:	639a      	str	r2, [r3, #56]	; 0x38

  CardState = HAL_SD_GetCardState(hsd);
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f7ff fefa 	bl	80038bc <HAL_SD_GetCardState>
 8003ac8:	60b8      	str	r0, [r7, #8]
  hsd->State = HAL_SD_STATE_READY;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	2201      	movs	r2, #1
 8003ace:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  hsd->Context = SD_CONTEXT_NONE;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	631a      	str	r2, [r3, #48]	; 0x30
  if((CardState == HAL_SD_CARD_RECEIVING) || (CardState == HAL_SD_CARD_SENDING))
 8003ad8:	68bb      	ldr	r3, [r7, #8]
 8003ada:	2b06      	cmp	r3, #6
 8003adc:	d002      	beq.n	8003ae4 <SD_DMARxAbort+0x3a>
 8003ade:	68bb      	ldr	r3, [r7, #8]
 8003ae0:	2b05      	cmp	r3, #5
 8003ae2:	d10a      	bne.n	8003afa <SD_DMARxAbort+0x50>
  {
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f001 f80d 	bl	8004b08 <SDMMC_CmdStopTransfer>
 8003aee:	4602      	mov	r2, r0
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af4:	431a      	orrs	r2, r3
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if(hsd->ErrorCode == HAL_SD_ERROR_NONE)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d103      	bne.n	8003b0a <SD_DMARxAbort+0x60>
  {
#if (USE_HAL_SD_REGISTER_CALLBACKS == 1)
    hsd->AbortCpltCallback(hsd);
#else
    HAL_SD_AbortCallback(hsd);
 8003b02:	68f8      	ldr	r0, [r7, #12]
 8003b04:	f001 fc82 	bl	800540c <HAL_SD_AbortCallback>
    hsd->ErrorCallback(hsd);
#else
    HAL_SD_ErrorCallback(hsd);
#endif
  }
}
 8003b08:	e002      	b.n	8003b10 <SD_DMARxAbort+0x66>
    HAL_SD_ErrorCallback(hsd);
 8003b0a:	68f8      	ldr	r0, [r7, #12]
 8003b0c:	f7ff fc62 	bl	80033d4 <HAL_SD_ErrorCallback>
}
 8003b10:	bf00      	nop
 8003b12:	3710      	adds	r7, #16
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}

08003b18 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8003b18:	b5b0      	push	{r4, r5, r7, lr}
 8003b1a:	b094      	sub	sp, #80	; 0x50
 8003b1c:	af04      	add	r7, sp, #16
 8003b1e:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 1U;
 8003b20:	2301      	movs	r3, #1
 8003b22:	81fb      	strh	r3, [r7, #14]

  /* Check the power State */
  if(SDMMC_GetPowerState(hsd->Instance) == 0U)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f000 febf 	bl	80048ac <SDMMC_GetPowerState>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d102      	bne.n	8003b3a <SD_InitCard+0x22>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003b34:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b38:	e0b7      	b.n	8003caa <SD_InitCard+0x192>
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	2b03      	cmp	r3, #3
 8003b40:	d02f      	beq.n	8003ba2 <SD_InitCard+0x8a>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	4618      	mov	r0, r3
 8003b48:	f001 f8e9 	bl	8004d1e <SDMMC_CmdSendCID>
 8003b4c:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003b4e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <SD_InitCard+0x40>
    {
      return errorstate;
 8003b54:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b56:	e0a8      	b.n	8003caa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	4618      	mov	r0, r3
 8003b60:	f000 fee9 	bl	8004936 <SDMMC_GetResponse>
 8003b64:	4602      	mov	r2, r0
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	675a      	str	r2, [r3, #116]	; 0x74
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	2104      	movs	r1, #4
 8003b70:	4618      	mov	r0, r3
 8003b72:	f000 fee0 	bl	8004936 <SDMMC_GetResponse>
 8003b76:	4602      	mov	r2, r0
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	679a      	str	r2, [r3, #120]	; 0x78
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	2108      	movs	r1, #8
 8003b82:	4618      	mov	r0, r3
 8003b84:	f000 fed7 	bl	8004936 <SDMMC_GetResponse>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	67da      	str	r2, [r3, #124]	; 0x7c
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	210c      	movs	r1, #12
 8003b94:	4618      	mov	r0, r3
 8003b96:	f000 fece 	bl	8004936 <SDMMC_GetResponse>
 8003b9a:	4602      	mov	r2, r0
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }
  }

  if(hsd->SdCard.CardType != CARD_SECURED)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ba6:	2b03      	cmp	r3, #3
 8003ba8:	d00d      	beq.n	8003bc6 <SD_InitCard+0xae>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f107 020e 	add.w	r2, r7, #14
 8003bb2:	4611      	mov	r1, r2
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f001 f8ef 	bl	8004d98 <SDMMC_CmdSetRelAdd>
 8003bba:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d001      	beq.n	8003bc6 <SD_InitCard+0xae>
    {
      return errorstate;
 8003bc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bc4:	e071      	b.n	8003caa <SD_InitCard+0x192>
    }
  }
  if(hsd->SdCard.CardType != CARD_SECURED)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003bca:	2b03      	cmp	r3, #3
 8003bcc:	d036      	beq.n	8003c3c <SD_InitCard+0x124>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 8003bce:	89fb      	ldrh	r3, [r7, #14]
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	651a      	str	r2, [r3, #80]	; 0x50

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681a      	ldr	r2, [r3, #0]
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003bde:	041b      	lsls	r3, r3, #16
 8003be0:	4619      	mov	r1, r3
 8003be2:	4610      	mov	r0, r2
 8003be4:	f001 f8b9 	bl	8004d5a <SDMMC_CmdSendCSD>
 8003be8:	63f8      	str	r0, [r7, #60]	; 0x3c
    if(errorstate != HAL_SD_ERROR_NONE)
 8003bea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d001      	beq.n	8003bf4 <SD_InitCard+0xdc>
    {
      return errorstate;
 8003bf0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003bf2:	e05a      	b.n	8003caa <SD_InitCard+0x192>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2100      	movs	r1, #0
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	f000 fe9b 	bl	8004936 <SDMMC_GetResponse>
 8003c00:	4602      	mov	r2, r0
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	665a      	str	r2, [r3, #100]	; 0x64
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2104      	movs	r1, #4
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f000 fe92 	bl	8004936 <SDMMC_GetResponse>
 8003c12:	4602      	mov	r2, r0
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	669a      	str	r2, [r3, #104]	; 0x68
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	2108      	movs	r1, #8
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 fe89 	bl	8004936 <SDMMC_GetResponse>
 8003c24:	4602      	mov	r2, r0
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	66da      	str	r2, [r3, #108]	; 0x6c
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	210c      	movs	r1, #12
 8003c30:	4618      	mov	r0, r3
 8003c32:	f000 fe80 	bl	8004936 <SDMMC_GetResponse>
 8003c36:	4602      	mov	r2, r0
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	671a      	str	r2, [r3, #112]	; 0x70
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2104      	movs	r1, #4
 8003c42:	4618      	mov	r0, r3
 8003c44:	f000 fe77 	bl	8004936 <SDMMC_GetResponse>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	0d1a      	lsrs	r2, r3, #20
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 8003c50:	f107 0310 	add.w	r3, r7, #16
 8003c54:	4619      	mov	r1, r3
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	f7ff fbc6 	bl	80033e8 <HAL_SD_GetCardCSD>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d002      	beq.n	8003c68 <SD_InitCard+0x150>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003c62:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003c66:	e020      	b.n	8003caa <SD_InitCard+0x192>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c70:	041b      	lsls	r3, r3, #16
 8003c72:	f04f 0400 	mov.w	r4, #0
 8003c76:	461a      	mov	r2, r3
 8003c78:	4623      	mov	r3, r4
 8003c7a:	4608      	mov	r0, r1
 8003c7c:	f000 ff66 	bl	8004b4c <SDMMC_CmdSelDesel>
 8003c80:	63f8      	str	r0, [r7, #60]	; 0x3c
  if(errorstate != HAL_SD_ERROR_NONE)
 8003c82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c84:	2b00      	cmp	r3, #0
 8003c86:	d001      	beq.n	8003c8c <SD_InitCard+0x174>
  {
    return errorstate;
 8003c88:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c8a:	e00e      	b.n	8003caa <SD_InitCard+0x192>
  }

  /* Configure SDMMC peripheral interface */
  (void)SDMMC_Init(hsd->Instance, hsd->Init);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681d      	ldr	r5, [r3, #0]
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	466c      	mov	r4, sp
 8003c94:	f103 0210 	add.w	r2, r3, #16
 8003c98:	ca07      	ldmia	r2, {r0, r1, r2}
 8003c9a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8003c9e:	3304      	adds	r3, #4
 8003ca0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003ca2:	4628      	mov	r0, r5
 8003ca4:	f000 fdaa 	bl	80047fc <SDMMC_Init>

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 8003ca8:	2300      	movs	r3, #0
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3740      	adds	r7, #64	; 0x40
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bdb0      	pop	{r4, r5, r7, pc}
	...

08003cb4 <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b086      	sub	sp, #24
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U, validvoltage = 0U;
 8003cc0:	2300      	movs	r3, #0
 8003cc2:	617b      	str	r3, [r7, #20]
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4618      	mov	r0, r3
 8003cce:	f000 ff60 	bl	8004b92 <SDMMC_CmdGoIdleState>
 8003cd2:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d001      	beq.n	8003cde <SD_PowerON+0x2a>
  {
    return errorstate;
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	e072      	b.n	8003dc4 <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f000 ff73 	bl	8004bce <SDMMC_CmdOperCond>
 8003ce8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d00d      	beq.n	8003d0c <SD_PowerON+0x58>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	649a      	str	r2, [r3, #72]	; 0x48
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	4618      	mov	r0, r3
 8003cfc:	f000 ff49 	bl	8004b92 <SDMMC_CmdGoIdleState>
 8003d00:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d004      	beq.n	8003d12 <SD_PowerON+0x5e>
    {
      return errorstate;
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	e05b      	b.n	8003dc4 <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2201      	movs	r2, #1
 8003d10:	649a      	str	r2, [r3, #72]	; 0x48
  }

  if( hsd->SdCard.CardVersion == CARD_V2_X)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d137      	bne.n	8003d8a <SD_PowerON+0xd6>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	2100      	movs	r1, #0
 8003d20:	4618      	mov	r0, r3
 8003d22:	f000 ff73 	bl	8004c0c <SDMMC_CmdAppCommand>
 8003d26:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d02d      	beq.n	8003d8a <SD_PowerON+0xd6>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d32:	e047      	b.n	8003dc4 <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	2100      	movs	r1, #0
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f000 ff66 	bl	8004c0c <SDMMC_CmdAppCommand>
 8003d40:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d001      	beq.n	8003d4c <SD_PowerON+0x98>
    {
      return errorstate;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	e03b      	b.n	8003dc4 <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY | SD_SWITCH_1_8V_CAPACITY);
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	491e      	ldr	r1, [pc, #120]	; (8003dcc <SD_PowerON+0x118>)
 8003d52:	4618      	mov	r0, r3
 8003d54:	f000 ff7c 	bl	8004c50 <SDMMC_CmdAppOperCommand>
 8003d58:	60f8      	str	r0, [r7, #12]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d002      	beq.n	8003d66 <SD_PowerON+0xb2>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8003d60:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003d64:	e02e      	b.n	8003dc4 <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	2100      	movs	r1, #0
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f000 fde2 	bl	8004936 <SDMMC_GetResponse>
 8003d72:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 8003d74:	697b      	ldr	r3, [r7, #20]
 8003d76:	0fdb      	lsrs	r3, r3, #31
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <SD_PowerON+0xcc>
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e000      	b.n	8003d82 <SD_PowerON+0xce>
 8003d80:	2300      	movs	r3, #0
 8003d82:	613b      	str	r3, [r7, #16]

    count++;
 8003d84:	68bb      	ldr	r3, [r7, #8]
 8003d86:	3301      	adds	r3, #1
 8003d88:	60bb      	str	r3, [r7, #8]
  while((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d802      	bhi.n	8003d9a <SD_PowerON+0xe6>
 8003d94:	693b      	ldr	r3, [r7, #16]
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d0cc      	beq.n	8003d34 <SD_PowerON+0x80>
  }

  if(count >= SDMMC_MAX_VOLT_TRIAL)
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8003da0:	4293      	cmp	r3, r2
 8003da2:	d902      	bls.n	8003daa <SD_PowerON+0xf6>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 8003da4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003da8:	e00c      	b.n	8003dc4 <SD_PowerON+0x110>
  }

  if((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY) /* (response &= SD_HIGH_CAPACITY) */
 8003daa:	697b      	ldr	r3, [r7, #20]
 8003dac:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <SD_PowerON+0x108>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	645a      	str	r2, [r3, #68]	; 0x44
 8003dba:	e002      	b.n	8003dc2 <SD_PowerON+0x10e>
  }
  else
  {
    hsd->SdCard.CardType = CARD_SDSC;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2200      	movs	r2, #0
 8003dc0:	645a      	str	r2, [r3, #68]	; 0x44
  }


  return HAL_SD_ERROR_NONE;
 8003dc2:	2300      	movs	r3, #0
}
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	3718      	adds	r7, #24
 8003dc8:	46bd      	mov	sp, r7
 8003dca:	bd80      	pop	{r7, pc}
 8003dcc:	c1100000 	.word	0xc1100000

08003dd0 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if(pCardStatus == NULL)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d102      	bne.n	8003de6 <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8003de0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003de4:	e018      	b.n	8003e18 <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003dee:	041b      	lsls	r3, r3, #16
 8003df0:	4619      	mov	r1, r3
 8003df2:	4610      	mov	r0, r2
 8003df4:	f000 fff1 	bl	8004dda <SDMMC_CmdSendStatus>
 8003df8:	60f8      	str	r0, [r7, #12]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d001      	beq.n	8003e04 <SD_SendStatus+0x34>
  {
    return errorstate;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	e009      	b.n	8003e18 <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	2100      	movs	r1, #0
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fd93 	bl	8004936 <SDMMC_GetResponse>
 8003e10:	4602      	mov	r2, r0
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8003e16:	2300      	movs	r3, #0
}
 8003e18:	4618      	mov	r0, r3
 8003e1a:	3710      	adds	r7, #16
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}

08003e20 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b086      	sub	sp, #24
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003e28:	2300      	movs	r3, #0
 8003e2a:	60fb      	str	r3, [r7, #12]
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	2100      	movs	r1, #0
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fd7d 	bl	8004936 <SDMMC_GetResponse>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e42:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003e46:	d102      	bne.n	8003e4e <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003e48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003e4c:	e02f      	b.n	8003eae <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003e4e:	f107 030c 	add.w	r3, r7, #12
 8003e52:	4619      	mov	r1, r3
 8003e54:	6878      	ldr	r0, [r7, #4]
 8003e56:	f000 f879 	bl	8003f4c <SD_FindSCR>
 8003e5a:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003e5c:	697b      	ldr	r3, [r7, #20]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d001      	beq.n	8003e66 <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	e023      	b.n	8003eae <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003e66:	693b      	ldr	r3, [r7, #16]
 8003e68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e6c:	2b00      	cmp	r3, #0
 8003e6e:	d01c      	beq.n	8003eaa <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681a      	ldr	r2, [r3, #0]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e78:	041b      	lsls	r3, r3, #16
 8003e7a:	4619      	mov	r1, r3
 8003e7c:	4610      	mov	r0, r2
 8003e7e:	f000 fec5 	bl	8004c0c <SDMMC_CmdAppCommand>
 8003e82:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d001      	beq.n	8003e8e <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8003e8a:	697b      	ldr	r3, [r7, #20]
 8003e8c:	e00f      	b.n	8003eae <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	2102      	movs	r1, #2
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 feff 	bl	8004c98 <SDMMC_CmdBusWidth>
 8003e9a:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d001      	beq.n	8003ea6 <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8003ea2:	697b      	ldr	r3, [r7, #20]
 8003ea4:	e003      	b.n	8003eae <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e001      	b.n	8003eae <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003eaa:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003eae:	4618      	mov	r0, r3
 8003eb0:	3718      	adds	r7, #24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	bd80      	pop	{r7, pc}

08003eb6 <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8003eb6:	b580      	push	{r7, lr}
 8003eb8:	b086      	sub	sp, #24
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0U, 0U};
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	60fb      	str	r3, [r7, #12]
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	2100      	movs	r1, #0
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f000 fd32 	bl	8004936 <SDMMC_GetResponse>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003ed8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003edc:	d102      	bne.n	8003ee4 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8003ede:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003ee2:	e02f      	b.n	8003f44 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8003ee4:	f107 030c 	add.w	r3, r7, #12
 8003ee8:	4619      	mov	r1, r3
 8003eea:	6878      	ldr	r0, [r7, #4]
 8003eec:	f000 f82e 	bl	8003f4c <SD_FindSCR>
 8003ef0:	6178      	str	r0, [r7, #20]
  if(errorstate != HAL_SD_ERROR_NONE)
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d001      	beq.n	8003efc <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8003ef8:	697b      	ldr	r3, [r7, #20]
 8003efa:	e023      	b.n	8003f44 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d01c      	beq.n	8003f40 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f0e:	041b      	lsls	r3, r3, #16
 8003f10:	4619      	mov	r1, r3
 8003f12:	4610      	mov	r0, r2
 8003f14:	f000 fe7a 	bl	8004c0c <SDMMC_CmdAppCommand>
 8003f18:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d001      	beq.n	8003f24 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	e00f      	b.n	8003f44 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	2100      	movs	r1, #0
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	f000 feb4 	bl	8004c98 <SDMMC_CmdBusWidth>
 8003f30:	6178      	str	r0, [r7, #20]
    if(errorstate != HAL_SD_ERROR_NONE)
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d001      	beq.n	8003f3c <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8003f38:	697b      	ldr	r3, [r7, #20]
 8003f3a:	e003      	b.n	8003f44 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	e001      	b.n	8003f44 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8003f40:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
  }
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3718      	adds	r7, #24
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}

08003f4c <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8003f4c:	b590      	push	{r4, r7, lr}
 8003f4e:	b08f      	sub	sp, #60	; 0x3c
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8003f56:	f7fc ff0b 	bl	8000d70 <HAL_GetTick>
 8003f5a:	6338      	str	r0, [r7, #48]	; 0x30
  uint32_t index = 0U;
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	637b      	str	r3, [r7, #52]	; 0x34
  uint32_t tempscr[2U] = {0U, 0U};
 8003f60:	2300      	movs	r3, #0
 8003f62:	60bb      	str	r3, [r7, #8]
 8003f64:	2300      	movs	r3, #0
 8003f66:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2108      	movs	r1, #8
 8003f72:	4618      	mov	r0, r3
 8003f74:	f000 fd1e 	bl	80049b4 <SDMMC_CmdBlockLength>
 8003f78:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d001      	beq.n	8003f84 <SD_FindSCR+0x38>
  {
    return errorstate;
 8003f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f82:	e0b2      	b.n	80040ea <SD_FindSCR+0x19e>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f8c:	041b      	lsls	r3, r3, #16
 8003f8e:	4619      	mov	r1, r3
 8003f90:	4610      	mov	r0, r2
 8003f92:	f000 fe3b 	bl	8004c0c <SDMMC_CmdAppCommand>
 8003f96:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d001      	beq.n	8003fa2 <SD_FindSCR+0x56>
  {
    return errorstate;
 8003f9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa0:	e0a3      	b.n	80040ea <SD_FindSCR+0x19e>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8003fa2:	f04f 33ff 	mov.w	r3, #4294967295
 8003fa6:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8003fa8:	2308      	movs	r3, #8
 8003faa:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8003fac:	2330      	movs	r3, #48	; 0x30
 8003fae:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8003fb0:	2302      	movs	r3, #2
 8003fb2:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8003fb4:	2300      	movs	r3, #0
 8003fb6:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8003fb8:	2301      	movs	r3, #1
 8003fba:	627b      	str	r3, [r7, #36]	; 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f107 0210 	add.w	r2, r7, #16
 8003fc4:	4611      	mov	r1, r2
 8003fc6:	4618      	mov	r0, r3
 8003fc8:	f000 fcc8 	bl	800495c <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 fe83 	bl	8004cdc <SDMMC_CmdSendSCR>
 8003fd6:	62b8      	str	r0, [r7, #40]	; 0x28
  if(errorstate != HAL_SD_ERROR_NONE)
 8003fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d02a      	beq.n	8004034 <SD_FindSCR+0xe8>
  {
    return errorstate;
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fe0:	e083      	b.n	80040ea <SD_FindSCR+0x19e>
  }

  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
  {
    if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXDAVL))
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d00f      	beq.n	8004010 <SD_FindSCR+0xc4>
    {
      *(tempscr + index) = SDMMC_ReadFIFO(hsd->Instance);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	6819      	ldr	r1, [r3, #0]
 8003ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ff6:	009b      	lsls	r3, r3, #2
 8003ff8:	f107 0208 	add.w	r2, r7, #8
 8003ffc:	18d4      	adds	r4, r2, r3
 8003ffe:	4608      	mov	r0, r1
 8004000:	f000 fc28 	bl	8004854 <SDMMC_ReadFIFO>
 8004004:	4603      	mov	r3, r0
 8004006:	6023      	str	r3, [r4, #0]
      index++;
 8004008:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800400a:	3301      	adds	r3, #1
 800400c:	637b      	str	r3, [r7, #52]	; 0x34
 800400e:	e006      	b.n	800401e <SD_FindSCR+0xd2>
    }
    else if(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXACT))
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004016:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800401a:	2b00      	cmp	r3, #0
 800401c:	d012      	beq.n	8004044 <SD_FindSCR+0xf8>
    {
      break;
    }

    if((HAL_GetTick() - tickstart) >=  SDMMC_DATATIMEOUT)
 800401e:	f7fc fea7 	bl	8000d70 <HAL_GetTick>
 8004022:	4602      	mov	r2, r0
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	1ad3      	subs	r3, r2, r3
 8004028:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402c:	d102      	bne.n	8004034 <SD_FindSCR+0xe8>
    {
      return HAL_SD_ERROR_TIMEOUT;
 800402e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004032:	e05a      	b.n	80040ea <SD_FindSCR+0x19e>
  while(!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT))
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800403a:	f003 032a 	and.w	r3, r3, #42	; 0x2a
 800403e:	2b00      	cmp	r3, #0
 8004040:	d0cf      	beq.n	8003fe2 <SD_FindSCR+0x96>
 8004042:	e000      	b.n	8004046 <SD_FindSCR+0xfa>
      break;
 8004044:	bf00      	nop
    }
  }

  if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800404c:	f003 0308 	and.w	r3, r3, #8
 8004050:	2b00      	cmp	r3, #0
 8004052:	d005      	beq.n	8004060 <SD_FindSCR+0x114>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	2208      	movs	r2, #8
 800405a:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 800405c:	2308      	movs	r3, #8
 800405e:	e044      	b.n	80040ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004066:	f003 0302 	and.w	r3, r3, #2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d005      	beq.n	800407a <SD_FindSCR+0x12e>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2202      	movs	r2, #2
 8004074:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8004076:	2302      	movs	r3, #2
 8004078:	e037      	b.n	80040ea <SD_FindSCR+0x19e>
  }
  else if(__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004080:	f003 0320 	and.w	r3, r3, #32
 8004084:	2b00      	cmp	r3, #0
 8004086:	d005      	beq.n	8004094 <SD_FindSCR+0x148>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	2220      	movs	r2, #32
 800408e:	639a      	str	r2, [r3, #56]	; 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8004090:	2320      	movs	r3, #32
 8004092:	e02a      	b.n	80040ea <SD_FindSCR+0x19e>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f240 523a 	movw	r2, #1338	; 0x53a
 800409c:	639a      	str	r2, [r3, #56]	; 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	061a      	lsls	r2, r3, #24
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	021b      	lsls	r3, r3, #8
 80040a6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040aa:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	0a1b      	lsrs	r3, r3, #8
 80040b0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80040b4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24));
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	0e1b      	lsrs	r3, r3, #24
 80040ba:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8) |\
 80040bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040be:	601a      	str	r2, [r3, #0]
    scr++;
 80040c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040c2:	3304      	adds	r3, #4
 80040c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040c6:	68bb      	ldr	r3, [r7, #8]
 80040c8:	061a      	lsls	r2, r3, #24
 80040ca:	68bb      	ldr	r3, [r7, #8]
 80040cc:	021b      	lsls	r3, r3, #8
 80040ce:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80040d2:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80040d4:	68bb      	ldr	r3, [r7, #8]
 80040d6:	0a1b      	lsrs	r3, r3, #8
 80040d8:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040dc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24));
 80040de:	68bb      	ldr	r3, [r7, #8]
 80040e0:	0e1b      	lsrs	r3, r3, #24
 80040e2:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8) |\
 80040e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040e6:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	373c      	adds	r7, #60	; 0x3c
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd90      	pop	{r4, r7, pc}

080040f2 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b086      	sub	sp, #24
 80040f6:	af00      	add	r7, sp, #0
 80040f8:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pRxBuffPtr;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040fe:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->RxXferSize;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	2b00      	cmp	r3, #0
 800410a:	d03f      	beq.n	800418c <SD_Read_IT+0x9a>
  {
    /* Read data from SDMMC Rx FIFO */
    for(count = 0U; count < 8U; count++)
 800410c:	2300      	movs	r3, #0
 800410e:	617b      	str	r3, [r7, #20]
 8004110:	e033      	b.n	800417a <SD_Read_IT+0x88>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	4618      	mov	r0, r3
 8004118:	f000 fb9c 	bl	8004854 <SDMMC_ReadFIFO>
 800411c:	60b8      	str	r0, [r7, #8]
      *tmp = (uint8_t)(data & 0xFFU);
 800411e:	68bb      	ldr	r3, [r7, #8]
 8004120:	b2da      	uxtb	r2, r3
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	3301      	adds	r3, #1
 800412a:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800412c:	693b      	ldr	r3, [r7, #16]
 800412e:	3b01      	subs	r3, #1
 8004130:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	0a1b      	lsrs	r3, r3, #8
 8004136:	b2da      	uxtb	r2, r3
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	701a      	strb	r2, [r3, #0]
      tmp++;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	3301      	adds	r3, #1
 8004140:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004142:	693b      	ldr	r3, [r7, #16]
 8004144:	3b01      	subs	r3, #1
 8004146:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	0c1b      	lsrs	r3, r3, #16
 800414c:	b2da      	uxtb	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	3301      	adds	r3, #1
 8004156:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	3b01      	subs	r3, #1
 800415c:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	0e1b      	lsrs	r3, r3, #24
 8004162:	b2da      	uxtb	r2, r3
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	701a      	strb	r2, [r3, #0]
      tmp++;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	3301      	adds	r3, #1
 800416c:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	3b01      	subs	r3, #1
 8004172:	613b      	str	r3, [r7, #16]
    for(count = 0U; count < 8U; count++)
 8004174:	697b      	ldr	r3, [r7, #20]
 8004176:	3301      	adds	r3, #1
 8004178:	617b      	str	r3, [r7, #20]
 800417a:	697b      	ldr	r3, [r7, #20]
 800417c:	2b07      	cmp	r3, #7
 800417e:	d9c8      	bls.n	8004112 <SD_Read_IT+0x20>
    }

    hsd->pRxBuffPtr = tmp;
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	629a      	str	r2, [r3, #40]	; 0x28
    hsd->RxXferSize = dataremaining;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	693a      	ldr	r2, [r7, #16]
 800418a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
}
 800418c:	bf00      	nop
 800418e:	3718      	adds	r7, #24
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b086      	sub	sp, #24
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t count, data, dataremaining;
  uint8_t* tmp;

  tmp = hsd->pTxBuffPtr;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6a1b      	ldr	r3, [r3, #32]
 80041a0:	60fb      	str	r3, [r7, #12]
  dataremaining = hsd->TxXferSize;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	613b      	str	r3, [r7, #16]

  if (dataremaining > 0U)
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d043      	beq.n	8004236 <SD_Write_IT+0xa2>
  {
    /* Write data to SDMMC Tx FIFO */
    for(count = 0U; count < 8U; count++)
 80041ae:	2300      	movs	r3, #0
 80041b0:	617b      	str	r3, [r7, #20]
 80041b2:	e037      	b.n	8004224 <SD_Write_IT+0x90>
    {
      data = (uint32_t)(*tmp);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	781b      	ldrb	r3, [r3, #0]
 80041b8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	3301      	adds	r3, #1
 80041be:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041c0:	693b      	ldr	r3, [r7, #16]
 80041c2:	3b01      	subs	r3, #1
 80041c4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	781b      	ldrb	r3, [r3, #0]
 80041ca:	021a      	lsls	r2, r3, #8
 80041cc:	68bb      	ldr	r3, [r7, #8]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	3301      	adds	r3, #1
 80041d6:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	3b01      	subs	r3, #1
 80041dc:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	781b      	ldrb	r3, [r3, #0]
 80041e2:	041a      	lsls	r2, r3, #16
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	4313      	orrs	r3, r2
 80041e8:	60bb      	str	r3, [r7, #8]
      tmp++;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	3301      	adds	r3, #1
 80041ee:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	3b01      	subs	r3, #1
 80041f4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	781b      	ldrb	r3, [r3, #0]
 80041fa:	061a      	lsls	r2, r3, #24
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	4313      	orrs	r3, r2
 8004200:	60bb      	str	r3, [r7, #8]
      tmp++;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	3301      	adds	r3, #1
 8004206:	60fb      	str	r3, [r7, #12]
      dataremaining--;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	3b01      	subs	r3, #1
 800420c:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	f107 0208 	add.w	r2, r7, #8
 8004216:	4611      	mov	r1, r2
 8004218:	4618      	mov	r0, r3
 800421a:	f000 fb28 	bl	800486e <SDMMC_WriteFIFO>
    for(count = 0U; count < 8U; count++)
 800421e:	697b      	ldr	r3, [r7, #20]
 8004220:	3301      	adds	r3, #1
 8004222:	617b      	str	r3, [r7, #20]
 8004224:	697b      	ldr	r3, [r7, #20]
 8004226:	2b07      	cmp	r3, #7
 8004228:	d9c4      	bls.n	80041b4 <SD_Write_IT+0x20>
    }

    hsd->pTxBuffPtr = tmp;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	68fa      	ldr	r2, [r7, #12]
 800422e:	621a      	str	r2, [r3, #32]
    hsd->TxXferSize = dataremaining;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	625a      	str	r2, [r3, #36]	; 0x24
  }
}
 8004236:	bf00      	nop
 8004238:	3718      	adds	r7, #24
 800423a:	46bd      	mov	sp, r7
 800423c:	bd80      	pop	{r7, pc}

0800423e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800423e:	b580      	push	{r7, lr}
 8004240:	b082      	sub	sp, #8
 8004242:	af00      	add	r7, sp, #0
 8004244:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d101      	bne.n	8004250 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800424c:	2301      	movs	r3, #1
 800424e:	e049      	b.n	80042e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004256:	b2db      	uxtb	r3, r3
 8004258:	2b00      	cmp	r3, #0
 800425a:	d106      	bne.n	800426a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2200      	movs	r2, #0
 8004260:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004264:	6878      	ldr	r0, [r7, #4]
 8004266:	f000 f841 	bl	80042ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2202      	movs	r2, #2
 800426e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	3304      	adds	r3, #4
 800427a:	4619      	mov	r1, r3
 800427c:	4610      	mov	r0, r2
 800427e:	f000 f9ff 	bl	8004680 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2201      	movs	r2, #1
 8004286:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2201      	movs	r2, #1
 800428e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	2201      	movs	r2, #1
 800429e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	2201      	movs	r2, #1
 80042a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	2201      	movs	r2, #1
 80042be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2201      	movs	r2, #1
 80042c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2201      	movs	r2, #1
 80042ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2201      	movs	r2, #1
 80042d6:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2201      	movs	r2, #1
 80042de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042e2:	2300      	movs	r3, #0
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	3708      	adds	r7, #8
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd80      	pop	{r7, pc}

080042ec <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b083      	sub	sp, #12
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80042f4:	bf00      	nop
 80042f6:	370c      	adds	r7, #12
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b01      	cmp	r3, #1
 8004312:	d001      	beq.n	8004318 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e054      	b.n	80043c2 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2202      	movs	r2, #2
 800431c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	68da      	ldr	r2, [r3, #12]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a26      	ldr	r2, [pc, #152]	; (80043d0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d022      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004342:	d01d      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4a22      	ldr	r2, [pc, #136]	; (80043d4 <HAL_TIM_Base_Start_IT+0xd4>)
 800434a:	4293      	cmp	r3, r2
 800434c:	d018      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d013      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	4a1f      	ldr	r2, [pc, #124]	; (80043dc <HAL_TIM_Base_Start_IT+0xdc>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d00e      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4a1e      	ldr	r2, [pc, #120]	; (80043e0 <HAL_TIM_Base_Start_IT+0xe0>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d009      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	4a1c      	ldr	r2, [pc, #112]	; (80043e4 <HAL_TIM_Base_Start_IT+0xe4>)
 8004372:	4293      	cmp	r3, r2
 8004374:	d004      	beq.n	8004380 <HAL_TIM_Base_Start_IT+0x80>
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a1b      	ldr	r2, [pc, #108]	; (80043e8 <HAL_TIM_Base_Start_IT+0xe8>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d115      	bne.n	80043ac <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	689a      	ldr	r2, [r3, #8]
 8004386:	4b19      	ldr	r3, [pc, #100]	; (80043ec <HAL_TIM_Base_Start_IT+0xec>)
 8004388:	4013      	ands	r3, r2
 800438a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	2b06      	cmp	r3, #6
 8004390:	d015      	beq.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004398:	d011      	beq.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f042 0201 	orr.w	r2, r2, #1
 80043a8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043aa:	e008      	b.n	80043be <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	f042 0201 	orr.w	r2, r2, #1
 80043ba:	601a      	str	r2, [r3, #0]
 80043bc:	e000      	b.n	80043c0 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043be:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80043c0:	2300      	movs	r3, #0
}
 80043c2:	4618      	mov	r0, r3
 80043c4:	3714      	adds	r7, #20
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40010000 	.word	0x40010000
 80043d4:	40000400 	.word	0x40000400
 80043d8:	40000800 	.word	0x40000800
 80043dc:	40000c00 	.word	0x40000c00
 80043e0:	40010400 	.word	0x40010400
 80043e4:	40014000 	.word	0x40014000
 80043e8:	40001800 	.word	0x40001800
 80043ec:	00010007 	.word	0x00010007

080043f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043f0:	b580      	push	{r7, lr}
 80043f2:	b082      	sub	sp, #8
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	691b      	ldr	r3, [r3, #16]
 80043fe:	f003 0302 	and.w	r3, r3, #2
 8004402:	2b02      	cmp	r3, #2
 8004404:	d122      	bne.n	800444c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	f003 0302 	and.w	r3, r3, #2
 8004410:	2b02      	cmp	r3, #2
 8004412:	d11b      	bne.n	800444c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	f06f 0202 	mvn.w	r2, #2
 800441c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	2201      	movs	r2, #1
 8004422:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	699b      	ldr	r3, [r3, #24]
 800442a:	f003 0303 	and.w	r3, r3, #3
 800442e:	2b00      	cmp	r3, #0
 8004430:	d003      	beq.n	800443a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f905 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 8004438:	e005      	b.n	8004446 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f8f7 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004440:	6878      	ldr	r0, [r7, #4]
 8004442:	f000 f908 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	691b      	ldr	r3, [r3, #16]
 8004452:	f003 0304 	and.w	r3, r3, #4
 8004456:	2b04      	cmp	r3, #4
 8004458:	d122      	bne.n	80044a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	68db      	ldr	r3, [r3, #12]
 8004460:	f003 0304 	and.w	r3, r3, #4
 8004464:	2b04      	cmp	r3, #4
 8004466:	d11b      	bne.n	80044a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f06f 0204 	mvn.w	r2, #4
 8004470:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004482:	2b00      	cmp	r3, #0
 8004484:	d003      	beq.n	800448e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004486:	6878      	ldr	r0, [r7, #4]
 8004488:	f000 f8db 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 800448c:	e005      	b.n	800449a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800448e:	6878      	ldr	r0, [r7, #4]
 8004490:	f000 f8cd 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004494:	6878      	ldr	r0, [r7, #4]
 8004496:	f000 f8de 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f003 0308 	and.w	r3, r3, #8
 80044aa:	2b08      	cmp	r3, #8
 80044ac:	d122      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	68db      	ldr	r3, [r3, #12]
 80044b4:	f003 0308 	and.w	r3, r3, #8
 80044b8:	2b08      	cmp	r3, #8
 80044ba:	d11b      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f06f 0208 	mvn.w	r2, #8
 80044c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2204      	movs	r2, #4
 80044ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	69db      	ldr	r3, [r3, #28]
 80044d2:	f003 0303 	and.w	r3, r3, #3
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d003      	beq.n	80044e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 f8b1 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 80044e0:	e005      	b.n	80044ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044e2:	6878      	ldr	r0, [r7, #4]
 80044e4:	f000 f8a3 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044e8:	6878      	ldr	r0, [r7, #4]
 80044ea:	f000 f8b4 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	691b      	ldr	r3, [r3, #16]
 80044fa:	f003 0310 	and.w	r3, r3, #16
 80044fe:	2b10      	cmp	r3, #16
 8004500:	d122      	bne.n	8004548 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	68db      	ldr	r3, [r3, #12]
 8004508:	f003 0310 	and.w	r3, r3, #16
 800450c:	2b10      	cmp	r3, #16
 800450e:	d11b      	bne.n	8004548 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f06f 0210 	mvn.w	r2, #16
 8004518:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2208      	movs	r2, #8
 800451e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800452a:	2b00      	cmp	r3, #0
 800452c:	d003      	beq.n	8004536 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800452e:	6878      	ldr	r0, [r7, #4]
 8004530:	f000 f887 	bl	8004642 <HAL_TIM_IC_CaptureCallback>
 8004534:	e005      	b.n	8004542 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	f000 f879 	bl	800462e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800453c:	6878      	ldr	r0, [r7, #4]
 800453e:	f000 f88a 	bl	8004656 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2200      	movs	r2, #0
 8004546:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	691b      	ldr	r3, [r3, #16]
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b01      	cmp	r3, #1
 8004554:	d10e      	bne.n	8004574 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f003 0301 	and.w	r3, r3, #1
 8004560:	2b01      	cmp	r3, #1
 8004562:	d107      	bne.n	8004574 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f06f 0201 	mvn.w	r2, #1
 800456c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800456e:	6878      	ldr	r0, [r7, #4]
 8004570:	f7fc f994 	bl	800089c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	691b      	ldr	r3, [r3, #16]
 800457a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800457e:	2b80      	cmp	r3, #128	; 0x80
 8004580:	d10e      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	68db      	ldr	r3, [r3, #12]
 8004588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800458c:	2b80      	cmp	r3, #128	; 0x80
 800458e:	d107      	bne.n	80045a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 f91a 	bl	80047d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691b      	ldr	r3, [r3, #16]
 80045a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80045ae:	d10e      	bne.n	80045ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	68db      	ldr	r3, [r3, #12]
 80045b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045ba:	2b80      	cmp	r3, #128	; 0x80
 80045bc:	d107      	bne.n	80045ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80045c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80045c8:	6878      	ldr	r0, [r7, #4]
 80045ca:	f000 f90d 	bl	80047e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	691b      	ldr	r3, [r3, #16]
 80045d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045d8:	2b40      	cmp	r3, #64	; 0x40
 80045da:	d10e      	bne.n	80045fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68db      	ldr	r3, [r3, #12]
 80045e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d107      	bne.n	80045fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80045f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f838 	bl	800466a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	f003 0320 	and.w	r3, r3, #32
 8004604:	2b20      	cmp	r3, #32
 8004606:	d10e      	bne.n	8004626 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	68db      	ldr	r3, [r3, #12]
 800460e:	f003 0320 	and.w	r3, r3, #32
 8004612:	2b20      	cmp	r3, #32
 8004614:	d107      	bne.n	8004626 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	f06f 0220 	mvn.w	r2, #32
 800461e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004620:	6878      	ldr	r0, [r7, #4]
 8004622:	f000 f8cd 	bl	80047c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004626:	bf00      	nop
 8004628:	3708      	adds	r7, #8
 800462a:	46bd      	mov	sp, r7
 800462c:	bd80      	pop	{r7, pc}

0800462e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800462e:	b480      	push	{r7}
 8004630:	b083      	sub	sp, #12
 8004632:	af00      	add	r7, sp, #0
 8004634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004636:	bf00      	nop
 8004638:	370c      	adds	r7, #12
 800463a:	46bd      	mov	sp, r7
 800463c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004640:	4770      	bx	lr

08004642 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004642:	b480      	push	{r7}
 8004644:	b083      	sub	sp, #12
 8004646:	af00      	add	r7, sp, #0
 8004648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800464a:	bf00      	nop
 800464c:	370c      	adds	r7, #12
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr

08004656 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004656:	b480      	push	{r7}
 8004658:	b083      	sub	sp, #12
 800465a:	af00      	add	r7, sp, #0
 800465c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800465e:	bf00      	nop
 8004660:	370c      	adds	r7, #12
 8004662:	46bd      	mov	sp, r7
 8004664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004668:	4770      	bx	lr

0800466a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800466a:	b480      	push	{r7}
 800466c:	b083      	sub	sp, #12
 800466e:	af00      	add	r7, sp, #0
 8004670:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004672:	bf00      	nop
 8004674:	370c      	adds	r7, #12
 8004676:	46bd      	mov	sp, r7
 8004678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467c:	4770      	bx	lr
	...

08004680 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004680:	b480      	push	{r7}
 8004682:	b085      	sub	sp, #20
 8004684:	af00      	add	r7, sp, #0
 8004686:	6078      	str	r0, [r7, #4]
 8004688:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a40      	ldr	r2, [pc, #256]	; (8004794 <TIM_Base_SetConfig+0x114>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d013      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800469e:	d00f      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	4a3d      	ldr	r2, [pc, #244]	; (8004798 <TIM_Base_SetConfig+0x118>)
 80046a4:	4293      	cmp	r3, r2
 80046a6:	d00b      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	4a3c      	ldr	r2, [pc, #240]	; (800479c <TIM_Base_SetConfig+0x11c>)
 80046ac:	4293      	cmp	r3, r2
 80046ae:	d007      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	4a3b      	ldr	r2, [pc, #236]	; (80047a0 <TIM_Base_SetConfig+0x120>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d003      	beq.n	80046c0 <TIM_Base_SetConfig+0x40>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	4a3a      	ldr	r2, [pc, #232]	; (80047a4 <TIM_Base_SetConfig+0x124>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d108      	bne.n	80046d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	68fa      	ldr	r2, [r7, #12]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a2f      	ldr	r2, [pc, #188]	; (8004794 <TIM_Base_SetConfig+0x114>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d02b      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046e0:	d027      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	4a2c      	ldr	r2, [pc, #176]	; (8004798 <TIM_Base_SetConfig+0x118>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d023      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	4a2b      	ldr	r2, [pc, #172]	; (800479c <TIM_Base_SetConfig+0x11c>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d01f      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a2a      	ldr	r2, [pc, #168]	; (80047a0 <TIM_Base_SetConfig+0x120>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d01b      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a29      	ldr	r2, [pc, #164]	; (80047a4 <TIM_Base_SetConfig+0x124>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d017      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a28      	ldr	r2, [pc, #160]	; (80047a8 <TIM_Base_SetConfig+0x128>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d013      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a27      	ldr	r2, [pc, #156]	; (80047ac <TIM_Base_SetConfig+0x12c>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d00f      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a26      	ldr	r2, [pc, #152]	; (80047b0 <TIM_Base_SetConfig+0x130>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d00b      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	4a25      	ldr	r2, [pc, #148]	; (80047b4 <TIM_Base_SetConfig+0x134>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d007      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	4a24      	ldr	r2, [pc, #144]	; (80047b8 <TIM_Base_SetConfig+0x138>)
 8004726:	4293      	cmp	r3, r2
 8004728:	d003      	beq.n	8004732 <TIM_Base_SetConfig+0xb2>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	4a23      	ldr	r2, [pc, #140]	; (80047bc <TIM_Base_SetConfig+0x13c>)
 800472e:	4293      	cmp	r3, r2
 8004730:	d108      	bne.n	8004744 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004738:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	68db      	ldr	r3, [r3, #12]
 800473e:	68fa      	ldr	r2, [r7, #12]
 8004740:	4313      	orrs	r3, r2
 8004742:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	4313      	orrs	r3, r2
 8004750:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	68fa      	ldr	r2, [r7, #12]
 8004756:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004758:	683b      	ldr	r3, [r7, #0]
 800475a:	689a      	ldr	r2, [r3, #8]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004760:	683b      	ldr	r3, [r7, #0]
 8004762:	681a      	ldr	r2, [r3, #0]
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	4a0a      	ldr	r2, [pc, #40]	; (8004794 <TIM_Base_SetConfig+0x114>)
 800476c:	4293      	cmp	r3, r2
 800476e:	d003      	beq.n	8004778 <TIM_Base_SetConfig+0xf8>
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	4a0c      	ldr	r2, [pc, #48]	; (80047a4 <TIM_Base_SetConfig+0x124>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d103      	bne.n	8004780 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	691a      	ldr	r2, [r3, #16]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2201      	movs	r2, #1
 8004784:	615a      	str	r2, [r3, #20]
}
 8004786:	bf00      	nop
 8004788:	3714      	adds	r7, #20
 800478a:	46bd      	mov	sp, r7
 800478c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004790:	4770      	bx	lr
 8004792:	bf00      	nop
 8004794:	40010000 	.word	0x40010000
 8004798:	40000400 	.word	0x40000400
 800479c:	40000800 	.word	0x40000800
 80047a0:	40000c00 	.word	0x40000c00
 80047a4:	40010400 	.word	0x40010400
 80047a8:	40014000 	.word	0x40014000
 80047ac:	40014400 	.word	0x40014400
 80047b0:	40014800 	.word	0x40014800
 80047b4:	40001800 	.word	0x40001800
 80047b8:	40001c00 	.word	0x40001c00
 80047bc:	40002000 	.word	0x40002000

080047c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b083      	sub	sp, #12
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80047c8:	bf00      	nop
 80047ca:	370c      	adds	r7, #12
 80047cc:	46bd      	mov	sp, r7
 80047ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d2:	4770      	bx	lr

080047d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80047dc:	bf00      	nop
 80047de:	370c      	adds	r7, #12
 80047e0:	46bd      	mov	sp, r7
 80047e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e6:	4770      	bx	lr

080047e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80047e8:	b480      	push	{r7}
 80047ea:	b083      	sub	sp, #12
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80047f0:	bf00      	nop
 80047f2:	370c      	adds	r7, #12
 80047f4:	46bd      	mov	sp, r7
 80047f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fa:	4770      	bx	lr

080047fc <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure   
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80047fc:	b084      	sub	sp, #16
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	f107 001c 	add.w	r0, r7, #28
 800480a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 800480e:	2300      	movs	r3, #0
 8004810:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));
  
  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           |\
 8004812:	69fa      	ldr	r2, [r7, #28]
             Init.ClockBypass         |\
 8004814:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           |\
 8004816:	431a      	orrs	r2, r3
             Init.ClockPowerSave      |\
 8004818:	6a7b      	ldr	r3, [r7, #36]	; 0x24
             Init.ClockBypass         |\
 800481a:	431a      	orrs	r2, r3
             Init.BusWide             |\
 800481c:	6abb      	ldr	r3, [r7, #40]	; 0x28
             Init.ClockPowerSave      |\
 800481e:	431a      	orrs	r2, r3
             Init.HardwareFlowControl |\
 8004820:	6afb      	ldr	r3, [r7, #44]	; 0x2c
             Init.BusWide             |\
 8004822:	431a      	orrs	r2, r3
             Init.ClockDiv
 8004824:	6b3b      	ldr	r3, [r7, #48]	; 0x30
             Init.HardwareFlowControl |\
 8004826:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           |\
 8004828:	68fa      	ldr	r2, [r7, #12]
 800482a:	4313      	orrs	r3, r2
 800482c:	60fb      	str	r3, [r7, #12]
             ); 
  
  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);  
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <SDMMC_Init+0x54>)
 8004834:	4013      	ands	r3, r2
 8004836:	68fa      	ldr	r2, [r7, #12]
 8004838:	431a      	orrs	r2, r3
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3714      	adds	r7, #20
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	b004      	add	sp, #16
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	ffff8100 	.word	0xffff8100

08004854 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling) 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(SDMMC_TypeDef *SDMMCx)
{
 8004854:	b480      	push	{r7}
 8004856:	b083      	sub	sp, #12
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */ 
  return (SDMMCx->FIFO);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
}
 8004862:	4618      	mov	r0, r3
 8004864:	370c      	adds	r7, #12
 8004866:	46bd      	mov	sp, r7
 8004868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800486c:	4770      	bx	lr

0800486e <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{ 
 800486e:	b480      	push	{r7}
 8004870:	b083      	sub	sp, #12
 8004872:	af00      	add	r7, sp, #0
 8004874:	6078      	str	r0, [r7, #4]
 8004876:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */ 
  SDMMCx->FIFO = *pWriteData;
 8004878:	683b      	ldr	r3, [r7, #0]
 800487a:	681a      	ldr	r2, [r3, #0]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8004882:	2300      	movs	r3, #0
}
 8004884:	4618      	mov	r0, r3
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON. 
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{  
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */ 
  SDMMCx->POWER = SDMMC_POWER_PWRCTRL;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2203      	movs	r2, #3
 800489c:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800489e:	2300      	movs	r3, #0
}
 80048a0:	4618      	mov	r0, r3
 80048a2:	370c      	adds	r7, #12
 80048a4:	46bd      	mov	sp, r7
 80048a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048aa:	4770      	bx	lr

080048ac <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON 
  */
uint32_t SDMMC_GetPowerState(SDMMC_TypeDef *SDMMCx)  
{
 80048ac:	b480      	push	{r7}
 80048ae:	b083      	sub	sp, #12
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f003 0303 	and.w	r3, r3, #3
}
 80048bc:	4618      	mov	r0, r3
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains 
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, SDMMC_CmdInitTypeDef *Command)
{
 80048c8:	b480      	push	{r7}
 80048ca:	b085      	sub	sp, #20
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	6078      	str	r0, [r7, #4]
 80048d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80048d2:	2300      	movs	r3, #0
 80048d4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	681a      	ldr	r2, [r3, #0]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         |\
 80048e2:	683b      	ldr	r3, [r7, #0]
 80048e4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048e6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt |\
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	68db      	ldr	r3, [r3, #12]
                       Command->Response         |\
 80048ec:	431a      	orrs	r2, r3
                       Command->CPSM);
 80048ee:	683b      	ldr	r3, [r7, #0]
 80048f0:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt |\
 80048f2:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         |\
 80048f4:	68fa      	ldr	r2, [r7, #12]
 80048f6:	4313      	orrs	r3, r2
 80048f8:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg); 
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68da      	ldr	r2, [r3, #12]
 80048fe:	4b06      	ldr	r3, [pc, #24]	; (8004918 <SDMMC_SendCommand+0x50>)
 8004900:	4013      	ands	r3, r2
 8004902:	68fa      	ldr	r2, [r7, #12]
 8004904:	431a      	orrs	r2, r3
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60da      	str	r2, [r3, #12]
  
  return HAL_OK;  
 800490a:	2300      	movs	r3, #0
}
 800490c:	4618      	mov	r0, r3
 800490e:	3714      	adds	r7, #20
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr
 8004918:	fffff000 	.word	0xfffff000

0800491c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(SDMMC_TypeDef *SDMMCx)
{
 800491c:	b480      	push	{r7}
 800491e:	b083      	sub	sp, #12
 8004920:	af00      	add	r7, sp, #0
 8004922:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	691b      	ldr	r3, [r3, #16]
 8004928:	b2db      	uxtb	r3, r3
}
 800492a:	4618      	mov	r0, r3
 800492c:	370c      	adds	r7, #12
 800492e:	46bd      	mov	sp, r7
 8004930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004934:	4770      	bx	lr

08004936 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4  
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));
  
  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	3314      	adds	r3, #20
 8004944:	461a      	mov	r2, r3
 8004946:	683b      	ldr	r3, [r7, #0]
 8004948:	4413      	add	r3, r2
 800494a:	60fb      	str	r3, [r7, #12]
  
  return (*(__IO uint32_t *) tmp);
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	681b      	ldr	r3, [r3, #0]
}  
 8004950:	4618      	mov	r0, r3
 8004952:	3714      	adds	r7, #20
 8004954:	46bd      	mov	sp, r7
 8004956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495a:	4770      	bx	lr

0800495c <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure 
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, SDMMC_DataInitTypeDef* Data)
{
 800495c:	b480      	push	{r7}
 800495e:	b085      	sub	sp, #20
 8004960:	af00      	add	r7, sp, #0
 8004962:	6078      	str	r0, [r7, #4]
 8004964:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8004966:	2300      	movs	r3, #0
 8004968:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	685a      	ldr	r2, [r3, #4]
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   |\
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004982:	431a      	orrs	r2, r3
                       Data->TransferMode  |\
 8004984:	683b      	ldr	r3, [r7, #0]
 8004986:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   |\
 8004988:	431a      	orrs	r2, r3
                       Data->DPSM);
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  |\
 800498e:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize |\
 8004990:	68fa      	ldr	r2, [r7, #12]
 8004992:	4313      	orrs	r3, r2
 8004994:	60fb      	str	r3, [r7, #12]
  
  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800499a:	f023 02f7 	bic.w	r2, r3, #247	; 0xf7
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	431a      	orrs	r2, r3
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	62da      	str	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 80049a6:	2300      	movs	r3, #0

}
 80049a8:	4618      	mov	r0, r3
 80049aa:	3714      	adds	r7, #20
 80049ac:	46bd      	mov	sp, r7
 80049ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b2:	4770      	bx	lr

080049b4 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b088      	sub	sp, #32
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
 80049bc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 80049c2:	2310      	movs	r3, #16
 80049c4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 80049c6:	2340      	movs	r3, #64	; 0x40
 80049c8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80049ce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80049d2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80049d4:	f107 0308 	add.w	r3, r7, #8
 80049d8:	4619      	mov	r1, r3
 80049da:	6878      	ldr	r0, [r7, #4]
 80049dc:	f7ff ff74 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 80049e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049e4:	2110      	movs	r1, #16
 80049e6:	6878      	ldr	r0, [r7, #4]
 80049e8:	f000 fa1a 	bl	8004e20 <SDMMC_GetCmdResp1>
 80049ec:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80049ee:	69fb      	ldr	r3, [r7, #28]
}
 80049f0:	4618      	mov	r0, r3
 80049f2:	3720      	adds	r7, #32
 80049f4:	46bd      	mov	sp, r7
 80049f6:	bd80      	pop	{r7, pc}

080049f8 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b088      	sub	sp, #32
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
 8004a00:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a02:	683b      	ldr	r3, [r7, #0]
 8004a04:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8004a06:	2311      	movs	r3, #17
 8004a08:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a0a:	2340      	movs	r3, #64	; 0x40
 8004a0c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a12:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a16:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a18:	f107 0308 	add.w	r3, r7, #8
 8004a1c:	4619      	mov	r1, r3
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f7ff ff52 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004a24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a28:	2111      	movs	r1, #17
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 f9f8 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004a30:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a32:	69fb      	ldr	r3, [r7, #28]
}
 8004a34:	4618      	mov	r0, r3
 8004a36:	3720      	adds	r7, #32
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	bd80      	pop	{r7, pc}

08004a3c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8004a3c:	b580      	push	{r7, lr}
 8004a3e:	b088      	sub	sp, #32
 8004a40:	af00      	add	r7, sp, #0
 8004a42:	6078      	str	r0, [r7, #4]
 8004a44:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8004a4a:	2312      	movs	r3, #18
 8004a4c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a4e:	2340      	movs	r3, #64	; 0x40
 8004a50:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a52:	2300      	movs	r3, #0
 8004a54:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a5a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004a5c:	f107 0308 	add.w	r3, r7, #8
 8004a60:	4619      	mov	r1, r3
 8004a62:	6878      	ldr	r0, [r7, #4]
 8004a64:	f7ff ff30 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004a68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004a6c:	2112      	movs	r1, #18
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f9d6 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004a74:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004a76:	69fb      	ldr	r3, [r7, #28]
}
 8004a78:	4618      	mov	r0, r3
 8004a7a:	3720      	adds	r7, #32
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b088      	sub	sp, #32
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8004a8e:	2318      	movs	r3, #24
 8004a90:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004a92:	2340      	movs	r3, #64	; 0x40
 8004a94:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004a96:	2300      	movs	r3, #0
 8004a98:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004a9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004a9e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004aa0:	f107 0308 	add.w	r3, r7, #8
 8004aa4:	4619      	mov	r1, r3
 8004aa6:	6878      	ldr	r0, [r7, #4]
 8004aa8:	f7ff ff0e 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8004aac:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ab0:	2118      	movs	r1, #24
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f000 f9b4 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004ab8:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004aba:	69fb      	ldr	r3, [r7, #28]
}
 8004abc:	4618      	mov	r0, r3
 8004abe:	3720      	adds	r7, #32
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}

08004ac4 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8004ac4:	b580      	push	{r7, lr}
 8004ac6:	b088      	sub	sp, #32
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Set Block Size for Card */ 
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8004ad2:	2319      	movs	r3, #25
 8004ad4:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004ad6:	2340      	movs	r3, #64	; 0x40
 8004ad8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ada:	2300      	movs	r3, #0
 8004adc:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004ade:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004ae2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004ae4:	f107 0308 	add.w	r3, r7, #8
 8004ae8:	4619      	mov	r1, r3
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff feec 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8004af0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004af4:	2119      	movs	r1, #25
 8004af6:	6878      	ldr	r0, [r7, #4]
 8004af8:	f000 f992 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004afc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004afe:	69fb      	ldr	r3, [r7, #28]
}
 8004b00:	4618      	mov	r0, r3
 8004b02:	3720      	adds	r7, #32
 8004b04:	46bd      	mov	sp, r7
 8004b06:	bd80      	pop	{r7, pc}

08004b08 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8004b08:	b580      	push	{r7, lr}
 8004b0a:	b088      	sub	sp, #32
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8004b10:	2300      	movs	r3, #0
 8004b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8004b14:	230c      	movs	r3, #12
 8004b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b18:	2340      	movs	r3, #64	; 0x40
 8004b1a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b20:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b24:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b26:	f107 0308 	add.w	r3, r7, #8
 8004b2a:	4619      	mov	r1, r3
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f7ff fecb 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8004b32:	4a05      	ldr	r2, [pc, #20]	; (8004b48 <SDMMC_CmdStopTransfer+0x40>)
 8004b34:	210c      	movs	r1, #12
 8004b36:	6878      	ldr	r0, [r7, #4]
 8004b38:	f000 f972 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004b3c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004b3e:	69fb      	ldr	r3, [r7, #28]
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3720      	adds	r7, #32
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	05f5e100 	.word	0x05f5e100

08004b4c <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  addr: Address of the card to be selected  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint64_t Addr)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08a      	sub	sp, #40	; 0x28
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	e9c7 2300 	strd	r2, r3, [r7]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8004b5c:	2307      	movs	r3, #7
 8004b5e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004b60:	2340      	movs	r3, #64	; 0x40
 8004b62:	61bb      	str	r3, [r7, #24]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004b64:	2300      	movs	r3, #0
 8004b66:	61fb      	str	r3, [r7, #28]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004b68:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004b6c:	623b      	str	r3, [r7, #32]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004b6e:	f107 0310 	add.w	r3, r7, #16
 8004b72:	4619      	mov	r1, r3
 8004b74:	68f8      	ldr	r0, [r7, #12]
 8004b76:	f7ff fea7 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8004b7a:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b7e:	2107      	movs	r1, #7
 8004b80:	68f8      	ldr	r0, [r7, #12]
 8004b82:	f000 f94d 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004b86:	6278      	str	r0, [r7, #36]	; 0x24

  return errorstate;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3728      	adds	r7, #40	; 0x28
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8004b92:	b580      	push	{r7, lr}
 8004b94:	b088      	sub	sp, #32
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = 0U;
 8004b9a:	2300      	movs	r3, #0
 8004b9c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8004b9e:	2300      	movs	r3, #0
 8004ba0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004baa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bae:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bb0:	f107 0308 	add.w	r3, r7, #8
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	6878      	ldr	r0, [r7, #4]
 8004bb8:	f7ff fe86 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fb67 	bl	8005290 <SDMMC_GetCmdError>
 8004bc2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004bc4:	69fb      	ldr	r3, [r7, #28]
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3720      	adds	r7, #32
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}

08004bce <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8004bce:	b580      	push	{r7, lr}
 8004bd0:	b088      	sub	sp, #32
 8004bd2:	af00      	add	r7, sp, #0
 8004bd4:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8004bd6:	f44f 73d5 	mov.w	r3, #426	; 0x1aa
 8004bda:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8004bdc:	2308      	movs	r3, #8
 8004bde:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004be0:	2340      	movs	r3, #64	; 0x40
 8004be2:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004be4:	2300      	movs	r3, #0
 8004be6:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004be8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004bec:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004bee:	f107 0308 	add.w	r3, r7, #8
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f7ff fe67 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f000 fafa 	bl	80051f4 <SDMMC_GetCmdResp7>
 8004c00:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c02:	69fb      	ldr	r3, [r7, #28]
}
 8004c04:	4618      	mov	r0, r3
 8004c06:	3720      	adds	r7, #32
 8004c08:	46bd      	mov	sp, r7
 8004c0a:	bd80      	pop	{r7, pc}

08004c0c <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument 
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004c0c:	b580      	push	{r7, lr}
 8004c0e:	b088      	sub	sp, #32
 8004c10:	af00      	add	r7, sp, #0
 8004c12:	6078      	str	r0, [r7, #4]
 8004c14:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8004c1a:	2337      	movs	r3, #55	; 0x37
 8004c1c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c1e:	2340      	movs	r3, #64	; 0x40
 8004c20:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c22:	2300      	movs	r3, #0
 8004c24:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c2a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c2c:	f107 0308 	add.w	r3, r7, #8
 8004c30:	4619      	mov	r1, r3
 8004c32:	6878      	ldr	r0, [r7, #4]
 8004c34:	f7ff fe48 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8004c38:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c3c:	2137      	movs	r1, #55	; 0x37
 8004c3e:	6878      	ldr	r0, [r7, #4]
 8004c40:	f000 f8ee 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004c44:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c46:	69fb      	ldr	r3, [r7, #28]
}
 8004c48:	4618      	mov	r0, r3
 8004c4a:	3720      	adds	r7, #32
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd80      	pop	{r7, pc}

08004c50 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b088      	sub	sp, #32
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = SDMMC_VOLTAGE_WINDOW_SD | Argument;
 8004c5a:	683a      	ldr	r2, [r7, #0]
 8004c5c:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <SDMMC_CmdAppOperCommand+0x44>)
 8004c5e:	4313      	orrs	r3, r2
 8004c60:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8004c62:	2329      	movs	r3, #41	; 0x29
 8004c64:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004c66:	2340      	movs	r3, #64	; 0x40
 8004c68:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004c6a:	2300      	movs	r3, #0
 8004c6c:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004c6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004c72:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004c74:	f107 0308 	add.w	r3, r7, #8
 8004c78:	4619      	mov	r1, r3
 8004c7a:	6878      	ldr	r0, [r7, #4]
 8004c7c:	f7ff fe24 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8004c80:	6878      	ldr	r0, [r7, #4]
 8004c82:	f000 fa03 	bl	800508c <SDMMC_GetCmdResp3>
 8004c86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004c88:	69fb      	ldr	r3, [r7, #28]
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3720      	adds	r7, #32
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	80100000 	.word	0x80100000

08004c98 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b088      	sub	sp, #32
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8004ca6:	2306      	movs	r3, #6
 8004ca8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004caa:	2340      	movs	r3, #64	; 0x40
 8004cac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cae:	2300      	movs	r3, #0
 8004cb0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cb6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cb8:	f107 0308 	add.w	r3, r7, #8
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f7ff fe02 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8004cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc8:	2106      	movs	r1, #6
 8004cca:	6878      	ldr	r0, [r7, #4]
 8004ccc:	f000 f8a8 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004cd0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004cd2:	69fb      	ldr	r3, [r7, #28]
}
 8004cd4:	4618      	mov	r0, r3
 8004cd6:	3720      	adds	r7, #32
 8004cd8:	46bd      	mov	sp, r7
 8004cda:	bd80      	pop	{r7, pc}

08004cdc <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b088      	sub	sp, #32
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8004ce4:	2300      	movs	r3, #0
 8004ce6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8004ce8:	2333      	movs	r3, #51	; 0x33
 8004cea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004cec:	2340      	movs	r3, #64	; 0x40
 8004cee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004cf0:	2300      	movs	r3, #0
 8004cf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004cf4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004cf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004cfa:	f107 0308 	add.w	r3, r7, #8
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f7ff fde1 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8004d06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004d0a:	2133      	movs	r1, #51	; 0x33
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f000 f887 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004d12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d14:	69fb      	ldr	r3, [r7, #28]
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3720      	adds	r7, #32
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	bd80      	pop	{r7, pc}

08004d1e <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8004d1e:	b580      	push	{r7, lr}
 8004d20:	b088      	sub	sp, #32
 8004d22:	af00      	add	r7, sp, #0
 8004d24:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8004d26:	2300      	movs	r3, #0
 8004d28:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8004d2a:	2302      	movs	r3, #2
 8004d2c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004d2e:	23c0      	movs	r3, #192	; 0xc0
 8004d30:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d32:	2300      	movs	r3, #0
 8004d34:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d36:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d3a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d3c:	f107 0308 	add.w	r3, r7, #8
 8004d40:	4619      	mov	r1, r3
 8004d42:	6878      	ldr	r0, [r7, #4]
 8004d44:	f7ff fdc0 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004d48:	6878      	ldr	r0, [r7, #4]
 8004d4a:	f000 f957 	bl	8004ffc <SDMMC_GetCmdResp2>
 8004d4e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d50:	69fb      	ldr	r3, [r7, #28]
}
 8004d52:	4618      	mov	r0, r3
 8004d54:	3720      	adds	r7, #32
 8004d56:	46bd      	mov	sp, r7
 8004d58:	bd80      	pop	{r7, pc}

08004d5a <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004d5a:	b580      	push	{r7, lr}
 8004d5c:	b088      	sub	sp, #32
 8004d5e:	af00      	add	r7, sp, #0
 8004d60:	6078      	str	r0, [r7, #4]
 8004d62:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8004d68:	2309      	movs	r3, #9
 8004d6a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8004d6c:	23c0      	movs	r3, #192	; 0xc0
 8004d6e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004d70:	2300      	movs	r3, #0
 8004d72:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004d74:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d78:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004d7a:	f107 0308 	add.w	r3, r7, #8
 8004d7e:	4619      	mov	r1, r3
 8004d80:	6878      	ldr	r0, [r7, #4]
 8004d82:	f7ff fda1 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f938 	bl	8004ffc <SDMMC_GetCmdResp2>
 8004d8c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004d8e:	69fb      	ldr	r3, [r7, #28]
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3720      	adds	r7, #32
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  pRCA: Card RCA  
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b088      	sub	sp, #32
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
 8004da0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8004da2:	2300      	movs	r3, #0
 8004da4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8004da6:	2303      	movs	r3, #3
 8004da8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004daa:	2340      	movs	r3, #64	; 0x40
 8004dac:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004dae:	2300      	movs	r3, #0
 8004db0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004db2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004db6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004db8:	f107 0308 	add.w	r3, r7, #8
 8004dbc:	4619      	mov	r1, r3
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f7ff fd82 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8004dc4:	683a      	ldr	r2, [r7, #0]
 8004dc6:	2103      	movs	r1, #3
 8004dc8:	6878      	ldr	r0, [r7, #4]
 8004dca:	f000 f99d 	bl	8005108 <SDMMC_GetCmdResp6>
 8004dce:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004dd0:	69fb      	ldr	r3, [r7, #28]
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}

08004dda <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base 
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8004dda:	b580      	push	{r7, lr}
 8004ddc:	b088      	sub	sp, #32
 8004dde:	af00      	add	r7, sp, #0
 8004de0:	6078      	str	r0, [r7, #4]
 8004de2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;
  
  sdmmc_cmdinit.Argument         = Argument;
 8004de4:	683b      	ldr	r3, [r7, #0]
 8004de6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 8004de8:	230d      	movs	r3, #13
 8004dea:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8004dec:	2340      	movs	r3, #64	; 0x40
 8004dee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8004df0:	2300      	movs	r3, #0
 8004df2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8004df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004df8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8004dfa:	f107 0308 	add.w	r3, r7, #8
 8004dfe:	4619      	mov	r1, r3
 8004e00:	6878      	ldr	r0, [r7, #4]
 8004e02:	f7ff fd61 	bl	80048c8 <SDMMC_SendCommand>
  
  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 8004e06:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e0a:	210d      	movs	r1, #13
 8004e0c:	6878      	ldr	r0, [r7, #4]
 8004e0e:	f000 f807 	bl	8004e20 <SDMMC_GetCmdResp1>
 8004e12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8004e14:	69fb      	ldr	r3, [r7, #28]
}
 8004e16:	4618      	mov	r0, r3
 8004e18:	3720      	adds	r7, #32
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	bd80      	pop	{r7, pc}
	...

08004e20 <SDMMC_GetCmdResp1>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  SD_CMD: The sent command index  
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	460b      	mov	r3, r1
 8004e2a:	607a      	str	r2, [r7, #4]
 8004e2c:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;
  
  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U /1000U);
 8004e2e:	4b70      	ldr	r3, [pc, #448]	; (8004ff0 <SDMMC_GetCmdResp1+0x1d0>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a70      	ldr	r2, [pc, #448]	; (8004ff4 <SDMMC_GetCmdResp1+0x1d4>)
 8004e34:	fba2 2303 	umull	r2, r3, r2, r3
 8004e38:	0a5a      	lsrs	r2, r3, #9
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	fb02 f303 	mul.w	r3, r2, r3
 8004e40:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	1e5a      	subs	r2, r3, #1
 8004e46:	61fa      	str	r2, [r7, #28]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d102      	bne.n	8004e52 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8004e4c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004e50:	e0c9      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8004e52:	68fb      	ldr	r3, [r7, #12]
 8004e54:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e56:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d0ef      	beq.n	8004e42 <SDMMC_GetCmdResp1+0x22>
 8004e62:	69bb      	ldr	r3, [r7, #24]
 8004e64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d1ea      	bne.n	8004e42 <SDMMC_GetCmdResp1+0x22>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e70:	f003 0304 	and.w	r3, r3, #4
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d004      	beq.n	8004e82 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	2204      	movs	r2, #4
 8004e7c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8004e7e:	2304      	movs	r3, #4
 8004e80:	e0b1      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e86:	f003 0301 	and.w	r3, r3, #1
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8004e8e:	68fb      	ldr	r3, [r7, #12]
 8004e90:	2201      	movs	r2, #1
 8004e92:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004e94:	2301      	movs	r3, #1
 8004e96:	e0a6      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	22c5      	movs	r2, #197	; 0xc5
 8004e9c:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8004e9e:	68f8      	ldr	r0, [r7, #12]
 8004ea0:	f7ff fd3c 	bl	800491c <SDMMC_GetCommandResponse>
 8004ea4:	4603      	mov	r3, r0
 8004ea6:	461a      	mov	r2, r3
 8004ea8:	7afb      	ldrb	r3, [r7, #11]
 8004eaa:	4293      	cmp	r3, r2
 8004eac:	d001      	beq.n	8004eb2 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	e099      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  
  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8004eb2:	2100      	movs	r1, #0
 8004eb4:	68f8      	ldr	r0, [r7, #12]
 8004eb6:	f7ff fd3e 	bl	8004936 <SDMMC_GetResponse>
 8004eba:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8004ebc:	697a      	ldr	r2, [r7, #20]
 8004ebe:	4b4e      	ldr	r3, [pc, #312]	; (8004ff8 <SDMMC_GetCmdResp1+0x1d8>)
 8004ec0:	4013      	ands	r3, r2
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d101      	bne.n	8004eca <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8004ec6:	2300      	movs	r3, #0
 8004ec8:	e08d      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	da02      	bge.n	8004ed6 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8004ed0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8004ed4:	e087      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d001      	beq.n	8004ee4 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 8004ee0:	2340      	movs	r3, #64	; 0x40
 8004ee2:	e080      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8004ee4:	697b      	ldr	r3, [r7, #20]
 8004ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d001      	beq.n	8004ef2 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 8004eee:	2380      	movs	r3, #128	; 0x80
 8004ef0:	e079      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d002      	beq.n	8004f02 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 8004efc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f00:	e071      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 8004f02:	697b      	ldr	r3, [r7, #20]
 8004f04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 8004f0c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004f10:	e069      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 8004f12:	697b      	ldr	r3, [r7, #20]
 8004f14:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d002      	beq.n	8004f22 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 8004f1c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004f20:	e061      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 8004f22:	697b      	ldr	r3, [r7, #20]
 8004f24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d002      	beq.n	8004f32 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 8004f2c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004f30:	e059      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d002      	beq.n	8004f42 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8004f3c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004f40:	e051      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d002      	beq.n	8004f52 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8004f4c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004f50:	e049      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d002      	beq.n	8004f62 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8004f5c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004f60:	e041      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d002      	beq.n	8004f72 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8004f6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f70:	e039      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d002      	beq.n	8004f82 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8004f7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004f80:	e031      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d002      	beq.n	8004f92 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8004f8c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004f90:	e029      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8004f92:	697b      	ldr	r3, [r7, #20]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d002      	beq.n	8004fa2 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8004f9c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8004fa0:	e021      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d002      	beq.n	8004fb2 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8004fac:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8004fb0:	e019      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8004fb2:	697b      	ldr	r3, [r7, #20]
 8004fb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d002      	beq.n	8004fc2 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8004fbc:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004fc0:	e011      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8004fc2:	697b      	ldr	r3, [r7, #20]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8004fcc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004fd0:	e009      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8004fd2:	697b      	ldr	r3, [r7, #20]
 8004fd4:	f003 0308 	and.w	r3, r3, #8
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d002      	beq.n	8004fe2 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8004fdc:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004fe0:	e001      	b.n	8004fe6 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 8004fe2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 8004fe6:	4618      	mov	r0, r3
 8004fe8:	3720      	adds	r7, #32
 8004fea:	46bd      	mov	sp, r7
 8004fec:	bd80      	pop	{r7, pc}
 8004fee:	bf00      	nop
 8004ff0:	20000000 	.word	0x20000000
 8004ff4:	10624dd3 	.word	0x10624dd3
 8004ff8:	fdffe008 	.word	0xfdffe008

08004ffc <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b085      	sub	sp, #20
 8005000:	af00      	add	r7, sp, #0
 8005002:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005004:	4b1f      	ldr	r3, [pc, #124]	; (8005084 <SDMMC_GetCmdResp2+0x88>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4a1f      	ldr	r2, [pc, #124]	; (8005088 <SDMMC_GetCmdResp2+0x8c>)
 800500a:	fba2 2303 	umull	r2, r3, r2, r3
 800500e:	0a5b      	lsrs	r3, r3, #9
 8005010:	f241 3288 	movw	r2, #5000	; 0x1388
 8005014:	fb02 f303 	mul.w	r3, r2, r3
 8005018:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	1e5a      	subs	r2, r3, #1
 800501e:	60fa      	str	r2, [r7, #12]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d102      	bne.n	800502a <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005024:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005028:	e026      	b.n	8005078 <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800502e:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005030:	68bb      	ldr	r3, [r7, #8]
 8005032:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005036:	2b00      	cmp	r3, #0
 8005038:	d0ef      	beq.n	800501a <SDMMC_GetCmdResp2+0x1e>
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005040:	2b00      	cmp	r3, #0
 8005042:	d1ea      	bne.n	800501a <SDMMC_GetCmdResp2+0x1e>
    
  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005048:	f003 0304 	and.w	r3, r3, #4
 800504c:	2b00      	cmp	r3, #0
 800504e:	d004      	beq.n	800505a <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2204      	movs	r2, #4
 8005054:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005056:	2304      	movs	r3, #4
 8005058:	e00e      	b.n	8005078 <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d004      	beq.n	8005070 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2201      	movs	r2, #1
 800506a:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800506c:	2301      	movs	r3, #1
 800506e:	e003      	b.n	8005078 <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	22c5      	movs	r2, #197	; 0xc5
 8005074:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return SDMMC_ERROR_NONE;
 8005076:	2300      	movs	r3, #0
}
 8005078:	4618      	mov	r0, r3
 800507a:	3714      	adds	r7, #20
 800507c:	46bd      	mov	sp, r7
 800507e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005082:	4770      	bx	lr
 8005084:	20000000 	.word	0x20000000
 8005088:	10624dd3 	.word	0x10624dd3

0800508c <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 800508c:	b480      	push	{r7}
 800508e:	b085      	sub	sp, #20
 8005090:	af00      	add	r7, sp, #0
 8005092:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005094:	4b1a      	ldr	r3, [pc, #104]	; (8005100 <SDMMC_GetCmdResp3+0x74>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a1a      	ldr	r2, [pc, #104]	; (8005104 <SDMMC_GetCmdResp3+0x78>)
 800509a:	fba2 2303 	umull	r2, r3, r2, r3
 800509e:	0a5b      	lsrs	r3, r3, #9
 80050a0:	f241 3288 	movw	r2, #5000	; 0x1388
 80050a4:	fb02 f303 	mul.w	r3, r2, r3
 80050a8:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	1e5a      	subs	r2, r3, #1
 80050ae:	60fa      	str	r2, [r7, #12]
 80050b0:	2b00      	cmp	r3, #0
 80050b2:	d102      	bne.n	80050ba <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80050b4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80050b8:	e01b      	b.n	80050f2 <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050be:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050c0:	68bb      	ldr	r3, [r7, #8]
 80050c2:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d0ef      	beq.n	80050aa <SDMMC_GetCmdResp3+0x1e>
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d1ea      	bne.n	80050aa <SDMMC_GetCmdResp3+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d004      	beq.n	80050ea <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2204      	movs	r2, #4
 80050e4:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 80050e6:	2304      	movs	r3, #4
 80050e8:	e003      	b.n	80050f2 <SDMMC_GetCmdResp3+0x66>
  }
  else
  {  
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	22c5      	movs	r2, #197	; 0xc5
 80050ee:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	3714      	adds	r7, #20
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr
 80050fe:	bf00      	nop
 8005100:	20000000 	.word	0x20000000
 8005104:	10624dd3 	.word	0x10624dd3

08005108 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative 
  *         address RCA   
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	b088      	sub	sp, #32
 800510c:	af00      	add	r7, sp, #0
 800510e:	60f8      	str	r0, [r7, #12]
 8005110:	460b      	mov	r3, r1
 8005112:	607a      	str	r2, [r7, #4]
 8005114:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005116:	4b35      	ldr	r3, [pc, #212]	; (80051ec <SDMMC_GetCmdResp6+0xe4>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4a35      	ldr	r2, [pc, #212]	; (80051f0 <SDMMC_GetCmdResp6+0xe8>)
 800511c:	fba2 2303 	umull	r2, r3, r2, r3
 8005120:	0a5b      	lsrs	r3, r3, #9
 8005122:	f241 3288 	movw	r2, #5000	; 0x1388
 8005126:	fb02 f303 	mul.w	r3, r2, r3
 800512a:	61fb      	str	r3, [r7, #28]
  
  do
  {
    if (count-- == 0U)
 800512c:	69fb      	ldr	r3, [r7, #28]
 800512e:	1e5a      	subs	r2, r3, #1
 8005130:	61fa      	str	r2, [r7, #28]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d102      	bne.n	800513c <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 8005136:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800513a:	e052      	b.n	80051e2 <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005140:	61bb      	str	r3, [r7, #24]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 8005148:	2b00      	cmp	r3, #0
 800514a:	d0ef      	beq.n	800512c <SDMMC_GetCmdResp6+0x24>
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1ea      	bne.n	800512c <SDMMC_GetCmdResp6+0x24>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8005156:	68fb      	ldr	r3, [r7, #12]
 8005158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800515a:	f003 0304 	and.w	r3, r3, #4
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2204      	movs	r2, #4
 8005166:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8005168:	2304      	movs	r3, #4
 800516a:	e03a      	b.n	80051e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d004      	beq.n	8005182 <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	2201      	movs	r2, #1
 800517c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 800517e:	2301      	movs	r3, #1
 8005180:	e02f      	b.n	80051e2 <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }
  
  /* Check response received is of desired command */
  if(SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8005182:	68f8      	ldr	r0, [r7, #12]
 8005184:	f7ff fbca 	bl	800491c <SDMMC_GetCommandResponse>
 8005188:	4603      	mov	r3, r0
 800518a:	461a      	mov	r2, r3
 800518c:	7afb      	ldrb	r3, [r7, #11]
 800518e:	4293      	cmp	r3, r2
 8005190:	d001      	beq.n	8005196 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005192:	2301      	movs	r3, #1
 8005194:	e025      	b.n	80051e2 <SDMMC_GetCmdResp6+0xda>
  }
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	22c5      	movs	r2, #197	; 0xc5
 800519a:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 800519c:	2100      	movs	r1, #0
 800519e:	68f8      	ldr	r0, [r7, #12]
 80051a0:	f7ff fbc9 	bl	8004936 <SDMMC_GetResponse>
 80051a4:	6178      	str	r0, [r7, #20]
  
  if((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD | SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
 80051a6:	697b      	ldr	r3, [r7, #20]
 80051a8:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d106      	bne.n	80051be <SDMMC_GetCmdResp6+0xb6>
  {
    *pRCA = (uint16_t) (response_r1 >> 16);
 80051b0:	697b      	ldr	r3, [r7, #20]
 80051b2:	0c1b      	lsrs	r3, r3, #16
 80051b4:	b29a      	uxth	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	801a      	strh	r2, [r3, #0]
    
    return SDMMC_ERROR_NONE;
 80051ba:	2300      	movs	r3, #0
 80051bc:	e011      	b.n	80051e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d002      	beq.n	80051ce <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80051c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80051cc:	e009      	b.n	80051e2 <SDMMC_GetCmdResp6+0xda>
  }
  else if((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 80051ce:	697b      	ldr	r3, [r7, #20]
 80051d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d002      	beq.n	80051de <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80051d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80051dc:	e001      	b.n	80051e2 <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80051de:	f44f 3380 	mov.w	r3, #65536	; 0x10000
  }
}
 80051e2:	4618      	mov	r0, r3
 80051e4:	3720      	adds	r7, #32
 80051e6:	46bd      	mov	sp, r7
 80051e8:	bd80      	pop	{r7, pc}
 80051ea:	bf00      	nop
 80051ec:	20000000 	.word	0x20000000
 80051f0:	10624dd3 	.word	0x10624dd3

080051f4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80051f4:	b480      	push	{r7}
 80051f6:	b085      	sub	sp, #20
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 80051fc:	4b22      	ldr	r3, [pc, #136]	; (8005288 <SDMMC_GetCmdResp7+0x94>)
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4a22      	ldr	r2, [pc, #136]	; (800528c <SDMMC_GetCmdResp7+0x98>)
 8005202:	fba2 2303 	umull	r2, r3, r2, r3
 8005206:	0a5b      	lsrs	r3, r3, #9
 8005208:	f241 3288 	movw	r2, #5000	; 0x1388
 800520c:	fb02 f303 	mul.w	r3, r2, r3
 8005210:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	1e5a      	subs	r2, r3, #1
 8005216:	60fa      	str	r2, [r7, #12]
 8005218:	2b00      	cmp	r3, #0
 800521a:	d102      	bne.n	8005222 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 800521c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8005220:	e02c      	b.n	800527c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005226:	60bb      	str	r3, [r7, #8]
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	f003 0345 	and.w	r3, r3, #69	; 0x45
         ((sta_reg & SDMMC_FLAG_CMDACT) != 0U ));
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0ef      	beq.n	8005212 <SDMMC_GetCmdResp7+0x1e>
 8005232:	68bb      	ldr	r3, [r7, #8]
 8005234:	f403 6300 	and.w	r3, r3, #2048	; 0x800
  }while(((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1ea      	bne.n	8005212 <SDMMC_GetCmdResp7+0x1e>
    
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005240:	f003 0304 	and.w	r3, r3, #4
 8005244:	2b00      	cmp	r3, #0
 8005246:	d004      	beq.n	8005252 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2204      	movs	r2, #4
 800524c:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 800524e:	2304      	movs	r3, #4
 8005250:	e014      	b.n	800527c <SDMMC_GetCmdResp7+0x88>
  }
  else if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2201      	movs	r2, #1
 8005262:	639a      	str	r2, [r3, #56]	; 0x38
    
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8005264:	2301      	movs	r3, #1
 8005266:	e009      	b.n	800527c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }
  
  if(__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800526c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005270:	2b00      	cmp	r3, #0
 8005272:	d002      	beq.n	800527a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2240      	movs	r2, #64	; 0x40
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
  }
  
  return SDMMC_ERROR_NONE;
 800527a:	2300      	movs	r3, #0
  
}
 800527c:	4618      	mov	r0, r3
 800527e:	3714      	adds	r7, #20
 8005280:	46bd      	mov	sp, r7
 8005282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005286:	4770      	bx	lr
 8005288:	20000000 	.word	0x20000000
 800528c:	10624dd3 	.word	0x10624dd3

08005290 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  SDMMCx Pointer to SDMMC register base
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8005290:	b480      	push	{r7}
 8005292:	b085      	sub	sp, #20
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U /1000U);
 8005298:	4b11      	ldr	r3, [pc, #68]	; (80052e0 <SDMMC_GetCmdError+0x50>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a11      	ldr	r2, [pc, #68]	; (80052e4 <SDMMC_GetCmdError+0x54>)
 800529e:	fba2 2303 	umull	r2, r3, r2, r3
 80052a2:	0a5b      	lsrs	r3, r3, #9
 80052a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80052a8:	fb02 f303 	mul.w	r3, r2, r3
 80052ac:	60fb      	str	r3, [r7, #12]
  
  do
  {
    if (count-- == 0U)
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	1e5a      	subs	r2, r3, #1
 80052b2:	60fa      	str	r2, [r7, #12]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d102      	bne.n	80052be <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80052b8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80052bc:	e009      	b.n	80052d2 <SDMMC_GetCmdError+0x42>
    }
    
  }while(!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d0f1      	beq.n	80052ae <SDMMC_GetCmdError+0x1e>
  
  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	22c5      	movs	r2, #197	; 0xc5
 80052ce:	639a      	str	r2, [r3, #56]	; 0x38
  
  return SDMMC_ERROR_NONE;
 80052d0:	2300      	movs	r3, #0
}
 80052d2:	4618      	mov	r0, r3
 80052d4:	3714      	adds	r7, #20
 80052d6:	46bd      	mov	sp, r7
 80052d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052dc:	4770      	bx	lr
 80052de:	bf00      	nop
 80052e0:	20000000 	.word	0x20000000
 80052e4:	10624dd3 	.word	0x10624dd3

080052e8 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80052e8:	b580      	push	{r7, lr}
 80052ea:	af00      	add	r7, sp, #0
  /*## FatFS: Link the SD driver ###########################*/
  retSD = FATFS_LinkDriver(&SD_Driver, SDPath);
 80052ec:	4904      	ldr	r1, [pc, #16]	; (8005300 <MX_FATFS_Init+0x18>)
 80052ee:	4805      	ldr	r0, [pc, #20]	; (8005304 <MX_FATFS_Init+0x1c>)
 80052f0:	f002 fe3a 	bl	8007f68 <FATFS_LinkDriver>
 80052f4:	4603      	mov	r3, r0
 80052f6:	461a      	mov	r2, r3
 80052f8:	4b03      	ldr	r3, [pc, #12]	; (8005308 <MX_FATFS_Init+0x20>)
 80052fa:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80052fc:	bf00      	nop
 80052fe:	bd80      	pop	{r7, pc}
 8005300:	200003fc 	.word	0x200003fc
 8005304:	08008230 	.word	0x08008230
 8005308:	200003f8 	.word	0x200003f8

0800530c <get_fattime>:
  * @brief  Gets Time from RTC
  * @param  None
  * @retval Time in DWORD
  */
DWORD get_fattime(void)
{
 800530c:	b480      	push	{r7}
 800530e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN get_fattime */
  return 0;
 8005310:	2300      	movs	r3, #0
  /* USER CODE END get_fattime */
}
 8005312:	4618      	mov	r0, r3
 8005314:	46bd      	mov	sp, r7
 8005316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531a:	4770      	bx	lr

0800531c <BSP_SD_Init>:
/**
  * @brief  Initializes the SD card device.
  * @retval SD status
  */
__weak uint8_t BSP_SD_Init(void)
{
 800531c:	b580      	push	{r7, lr}
 800531e:	b082      	sub	sp, #8
 8005320:	af00      	add	r7, sp, #0
  uint8_t sd_state = MSD_OK;
 8005322:	2300      	movs	r3, #0
 8005324:	71fb      	strb	r3, [r7, #7]
  /* Check if the SD card is plugged in the slot */
  if (BSP_SD_IsDetected() != SD_PRESENT)
 8005326:	f000 f896 	bl	8005456 <BSP_SD_IsDetected>
 800532a:	4603      	mov	r3, r0
 800532c:	2b01      	cmp	r3, #1
 800532e:	d001      	beq.n	8005334 <BSP_SD_Init+0x18>
  {
    return MSD_ERROR_SD_NOT_PRESENT;
 8005330:	2302      	movs	r3, #2
 8005332:	e012      	b.n	800535a <BSP_SD_Init+0x3e>
  }
  /* HAL SD initialization */
  sd_state = HAL_SD_Init(&hsd2);
 8005334:	480b      	ldr	r0, [pc, #44]	; (8005364 <BSP_SD_Init+0x48>)
 8005336:	f7fd fc57 	bl	8002be8 <HAL_SD_Init>
 800533a:	4603      	mov	r3, r0
 800533c:	71fb      	strb	r3, [r7, #7]
  /* Configure SD Bus width (4 bits mode selected) */
  if (sd_state == MSD_OK)
 800533e:	79fb      	ldrb	r3, [r7, #7]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d109      	bne.n	8005358 <BSP_SD_Init+0x3c>
  {
    /* Enable wide operation */
    if (HAL_SD_ConfigWideBusOperation(&hsd2, SDMMC_BUS_WIDE_4B) != HAL_OK)
 8005344:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8005348:	4806      	ldr	r0, [pc, #24]	; (8005364 <BSP_SD_Init+0x48>)
 800534a:	f7fe fa1d 	bl	8003788 <HAL_SD_ConfigWideBusOperation>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <BSP_SD_Init+0x3c>
    {
      sd_state = MSD_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	71fb      	strb	r3, [r7, #7]
    }
  }

  return sd_state;
 8005358:	79fb      	ldrb	r3, [r7, #7]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
 8005362:	bf00      	nop
 8005364:	200002c4 	.word	0x200002c4

08005368 <BSP_SD_ReadBlocks_DMA>:
  * @param  ReadAddr: Address from where data is to be read
  * @param  NumOfBlocks: Number of SD blocks to read
  * @retval SD status
  */
__weak uint8_t BSP_SD_ReadBlocks_DMA(uint32_t *pData, uint32_t ReadAddr, uint32_t NumOfBlocks)
{
 8005368:	b580      	push	{r7, lr}
 800536a:	b086      	sub	sp, #24
 800536c:	af00      	add	r7, sp, #0
 800536e:	60f8      	str	r0, [r7, #12]
 8005370:	60b9      	str	r1, [r7, #8]
 8005372:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 8005374:	2300      	movs	r3, #0
 8005376:	75fb      	strb	r3, [r7, #23]

  /* Read block(s) in DMA transfer mode */
  if (HAL_SD_ReadBlocks_DMA(&hsd2, (uint8_t *)pData, ReadAddr, NumOfBlocks) != HAL_OK)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	68f9      	ldr	r1, [r7, #12]
 800537e:	4806      	ldr	r0, [pc, #24]	; (8005398 <BSP_SD_ReadBlocks_DMA+0x30>)
 8005380:	f7fd fcea 	bl	8002d58 <HAL_SD_ReadBlocks_DMA>
 8005384:	4603      	mov	r3, r0
 8005386:	2b00      	cmp	r3, #0
 8005388:	d001      	beq.n	800538e <BSP_SD_ReadBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 800538a:	2301      	movs	r3, #1
 800538c:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 800538e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005390:	4618      	mov	r0, r3
 8005392:	3718      	adds	r7, #24
 8005394:	46bd      	mov	sp, r7
 8005396:	bd80      	pop	{r7, pc}
 8005398:	200002c4 	.word	0x200002c4

0800539c <BSP_SD_WriteBlocks_DMA>:
  * @param  WriteAddr: Address from where data is to be written
  * @param  NumOfBlocks: Number of SD blocks to write
  * @retval SD status
  */
__weak uint8_t BSP_SD_WriteBlocks_DMA(uint32_t *pData, uint32_t WriteAddr, uint32_t NumOfBlocks)
{
 800539c:	b580      	push	{r7, lr}
 800539e:	b086      	sub	sp, #24
 80053a0:	af00      	add	r7, sp, #0
 80053a2:	60f8      	str	r0, [r7, #12]
 80053a4:	60b9      	str	r1, [r7, #8]
 80053a6:	607a      	str	r2, [r7, #4]
  uint8_t sd_state = MSD_OK;
 80053a8:	2300      	movs	r3, #0
 80053aa:	75fb      	strb	r3, [r7, #23]

  /* Write block(s) in DMA transfer mode */
  if (HAL_SD_WriteBlocks_DMA(&hsd2, (uint8_t *)pData, WriteAddr, NumOfBlocks) != HAL_OK)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	68f9      	ldr	r1, [r7, #12]
 80053b2:	4806      	ldr	r0, [pc, #24]	; (80053cc <BSP_SD_WriteBlocks_DMA+0x30>)
 80053b4:	f7fd fdb2 	bl	8002f1c <HAL_SD_WriteBlocks_DMA>
 80053b8:	4603      	mov	r3, r0
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d001      	beq.n	80053c2 <BSP_SD_WriteBlocks_DMA+0x26>
  {
    sd_state = MSD_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
  }

  return sd_state;
 80053c2:	7dfb      	ldrb	r3, [r7, #23]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	200002c4 	.word	0x200002c4

080053d0 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
__weak uint8_t BSP_SD_GetCardState(void)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	af00      	add	r7, sp, #0
  return ((HAL_SD_GetCardState(&hsd2) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 80053d4:	4805      	ldr	r0, [pc, #20]	; (80053ec <BSP_SD_GetCardState+0x1c>)
 80053d6:	f7fe fa71 	bl	80038bc <HAL_SD_GetCardState>
 80053da:	4603      	mov	r3, r0
 80053dc:	2b04      	cmp	r3, #4
 80053de:	bf14      	ite	ne
 80053e0:	2301      	movne	r3, #1
 80053e2:	2300      	moveq	r3, #0
 80053e4:	b2db      	uxtb	r3, r3
}
 80053e6:	4618      	mov	r0, r3
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200002c4 	.word	0x200002c4

080053f0 <BSP_SD_GetCardInfo>:
  * @brief  Get SD information about specific SD card.
  * @param  CardInfo: Pointer to HAL_SD_CardInfoTypedef structure
  * @retval None
  */
__weak void BSP_SD_GetCardInfo(HAL_SD_CardInfoTypeDef *CardInfo)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b082      	sub	sp, #8
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  /* Get SD card Information */
  HAL_SD_GetCardInfo(&hsd2, CardInfo);
 80053f8:	6879      	ldr	r1, [r7, #4]
 80053fa:	4803      	ldr	r0, [pc, #12]	; (8005408 <BSP_SD_GetCardInfo+0x18>)
 80053fc:	f7fe f998 	bl	8003730 <HAL_SD_GetCardInfo>
}
 8005400:	bf00      	nop
 8005402:	3708      	adds	r7, #8
 8005404:	46bd      	mov	sp, r7
 8005406:	bd80      	pop	{r7, pc}
 8005408:	200002c4 	.word	0x200002c4

0800540c <HAL_SD_AbortCallback>:
  * @brief SD Abort callbacks
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_AbortCallback(SD_HandleTypeDef *hsd)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b082      	sub	sp, #8
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]
  BSP_SD_AbortCallback();
 8005414:	f000 f818 	bl	8005448 <BSP_SD_AbortCallback>
}
 8005418:	bf00      	nop
 800541a:	3708      	adds	r7, #8
 800541c:	46bd      	mov	sp, r7
 800541e:	bd80      	pop	{r7, pc}

08005420 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b082      	sub	sp, #8
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback();
 8005428:	f000 f9a8 	bl	800577c <BSP_SD_WriteCpltCallback>
}
 800542c:	bf00      	nop
 800542e:	3708      	adds	r7, #8
 8005430:	46bd      	mov	sp, r7
 8005432:	bd80      	pop	{r7, pc}

08005434 <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callback
  * @param hsd: SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback();
 800543c:	f000 f9aa 	bl	8005794 <BSP_SD_ReadCpltCallback>
}
 8005440:	bf00      	nop
 8005442:	3708      	adds	r7, #8
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <BSP_SD_AbortCallback>:
  * @brief BSP SD Abort callback
  * @retval None
  * @note empty (up to the user to fill it in or to remove it if useless)
  */
__weak void BSP_SD_AbortCallback(void)
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0

}
 800544c:	bf00      	nop
 800544e:	46bd      	mov	sp, r7
 8005450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005454:	4770      	bx	lr

08005456 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
 * @param  None
 * @retval Returns if SD is detected or not
 */
__weak uint8_t BSP_SD_IsDetected(void)
{
 8005456:	b580      	push	{r7, lr}
 8005458:	b082      	sub	sp, #8
 800545a:	af00      	add	r7, sp, #0
  __IO uint8_t status = SD_PRESENT;
 800545c:	2301      	movs	r3, #1
 800545e:	71fb      	strb	r3, [r7, #7]

  if (BSP_PlatformIsDetected() == 0x0)
 8005460:	f000 f80c 	bl	800547c <BSP_PlatformIsDetected>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d101      	bne.n	800546e <BSP_SD_IsDetected+0x18>
  {
    status = SD_NOT_PRESENT;
 800546a:	2300      	movs	r3, #0
 800546c:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 800546e:	79fb      	ldrb	r3, [r7, #7]
 8005470:	b2db      	uxtb	r3, r3
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}
	...

0800547c <BSP_PlatformIsDetected>:
  *
  ******************************************************************************
*/
#include "fatfs_platform.h"

uint8_t	BSP_PlatformIsDetected(void) {
 800547c:	b580      	push	{r7, lr}
 800547e:	b082      	sub	sp, #8
 8005480:	af00      	add	r7, sp, #0
    uint8_t status = SD_PRESENT;
 8005482:	2301      	movs	r3, #1
 8005484:	71fb      	strb	r3, [r7, #7]
    /* Check SD card detect pin */
    if(HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT, SD_DETECT_PIN) != GPIO_PIN_RESET)
 8005486:	2120      	movs	r1, #32
 8005488:	4806      	ldr	r0, [pc, #24]	; (80054a4 <BSP_PlatformIsDetected+0x28>)
 800548a:	f7fc facf 	bl	8001a2c <HAL_GPIO_ReadPin>
 800548e:	4603      	mov	r3, r0
 8005490:	2b00      	cmp	r3, #0
 8005492:	d001      	beq.n	8005498 <BSP_PlatformIsDetected+0x1c>
    {
        status = SD_NOT_PRESENT;
 8005494:	2300      	movs	r3, #0
 8005496:	71fb      	strb	r3, [r7, #7]
    {
    	status = SD_PRESENT;
    }
    /* user code can be inserted here */
    /* USER CODE END 1 */
    return status;
 8005498:	79fb      	ldrb	r3, [r7, #7]
}
 800549a:	4618      	mov	r0, r3
 800549c:	3708      	adds	r7, #8
 800549e:	46bd      	mov	sp, r7
 80054a0:	bd80      	pop	{r7, pc}
 80054a2:	bf00      	nop
 80054a4:	40020400 	.word	0x40020400

080054a8 <SD_CheckStatusWithTimeout>:
/* USER CODE END beforeFunctionSection */

/* Private functions ---------------------------------------------------------*/

static int SD_CheckStatusWithTimeout(uint32_t timeout)
{
 80054a8:	b580      	push	{r7, lr}
 80054aa:	b084      	sub	sp, #16
 80054ac:	af00      	add	r7, sp, #0
 80054ae:	6078      	str	r0, [r7, #4]
  uint32_t timer = HAL_GetTick();
 80054b0:	f7fb fc5e 	bl	8000d70 <HAL_GetTick>
 80054b4:	60f8      	str	r0, [r7, #12]
  /* block until SDIO IP is ready again or a timeout occur */
  while(HAL_GetTick() - timer < timeout)
 80054b6:	e006      	b.n	80054c6 <SD_CheckStatusWithTimeout+0x1e>
  {
    if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80054b8:	f7ff ff8a 	bl	80053d0 <BSP_SD_GetCardState>
 80054bc:	4603      	mov	r3, r0
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d101      	bne.n	80054c6 <SD_CheckStatusWithTimeout+0x1e>
    {
      return 0;
 80054c2:	2300      	movs	r3, #0
 80054c4:	e009      	b.n	80054da <SD_CheckStatusWithTimeout+0x32>
  while(HAL_GetTick() - timer < timeout)
 80054c6:	f7fb fc53 	bl	8000d70 <HAL_GetTick>
 80054ca:	4602      	mov	r2, r0
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	1ad3      	subs	r3, r2, r3
 80054d0:	687a      	ldr	r2, [r7, #4]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d8f0      	bhi.n	80054b8 <SD_CheckStatusWithTimeout+0x10>
    }
  }

  return -1;
 80054d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3710      	adds	r7, #16
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
	...

080054e4 <SD_CheckStatus>:

static DSTATUS SD_CheckStatus(BYTE lun)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b082      	sub	sp, #8
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	4603      	mov	r3, r0
 80054ec:	71fb      	strb	r3, [r7, #7]
  Stat = STA_NOINIT;
 80054ee:	4b0b      	ldr	r3, [pc, #44]	; (800551c <SD_CheckStatus+0x38>)
 80054f0:	2201      	movs	r2, #1
 80054f2:	701a      	strb	r2, [r3, #0]

  if(BSP_SD_GetCardState() == MSD_OK)
 80054f4:	f7ff ff6c 	bl	80053d0 <BSP_SD_GetCardState>
 80054f8:	4603      	mov	r3, r0
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d107      	bne.n	800550e <SD_CheckStatus+0x2a>
  {
    Stat &= ~STA_NOINIT;
 80054fe:	4b07      	ldr	r3, [pc, #28]	; (800551c <SD_CheckStatus+0x38>)
 8005500:	781b      	ldrb	r3, [r3, #0]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f023 0301 	bic.w	r3, r3, #1
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4b04      	ldr	r3, [pc, #16]	; (800551c <SD_CheckStatus+0x38>)
 800550c:	701a      	strb	r2, [r3, #0]
  }

  return Stat;
 800550e:	4b03      	ldr	r3, [pc, #12]	; (800551c <SD_CheckStatus+0x38>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b2db      	uxtb	r3, r3
}
 8005514:	4618      	mov	r0, r3
 8005516:	3708      	adds	r7, #8
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000009 	.word	0x20000009

08005520 <SD_initialize>:
  * @brief  Initializes a Drive
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_initialize(BYTE lun)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b082      	sub	sp, #8
 8005524:	af00      	add	r7, sp, #0
 8005526:	4603      	mov	r3, r0
 8005528:	71fb      	strb	r3, [r7, #7]

#if !defined(DISABLE_SD_INIT)

  if(BSP_SD_Init() == MSD_OK)
 800552a:	f7ff fef7 	bl	800531c <BSP_SD_Init>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d107      	bne.n	8005544 <SD_initialize+0x24>
  {
    Stat = SD_CheckStatus(lun);
 8005534:	79fb      	ldrb	r3, [r7, #7]
 8005536:	4618      	mov	r0, r3
 8005538:	f7ff ffd4 	bl	80054e4 <SD_CheckStatus>
 800553c:	4603      	mov	r3, r0
 800553e:	461a      	mov	r2, r3
 8005540:	4b04      	ldr	r3, [pc, #16]	; (8005554 <SD_initialize+0x34>)
 8005542:	701a      	strb	r2, [r3, #0]

#else
  Stat = SD_CheckStatus(lun);
#endif

  return Stat;
 8005544:	4b03      	ldr	r3, [pc, #12]	; (8005554 <SD_initialize+0x34>)
 8005546:	781b      	ldrb	r3, [r3, #0]
 8005548:	b2db      	uxtb	r3, r3
}
 800554a:	4618      	mov	r0, r3
 800554c:	3708      	adds	r7, #8
 800554e:	46bd      	mov	sp, r7
 8005550:	bd80      	pop	{r7, pc}
 8005552:	bf00      	nop
 8005554:	20000009 	.word	0x20000009

08005558 <SD_status>:
  * @brief  Gets Disk Status
  * @param  lun : not used
  * @retval DSTATUS: Operation status
  */
DSTATUS SD_status(BYTE lun)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  return SD_CheckStatus(lun);
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	4618      	mov	r0, r3
 8005566:	f7ff ffbd 	bl	80054e4 <SD_CheckStatus>
 800556a:	4603      	mov	r3, r0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3708      	adds	r7, #8
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}

08005574 <SD_read>:
  * @param  count: Number of sectors to read (1..128)
  * @retval DRESULT: Operation result
  */

DRESULT SD_read(BYTE lun, BYTE *buff, DWORD sector, UINT count)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b086      	sub	sp, #24
 8005578:	af00      	add	r7, sp, #0
 800557a:	60b9      	str	r1, [r7, #8]
 800557c:	607a      	str	r2, [r7, #4]
 800557e:	603b      	str	r3, [r7, #0]
 8005580:	4603      	mov	r3, r0
 8005582:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	75fb      	strb	r3, [r7, #23]

  /*
  * ensure the SDCard is ready for a new operation
  */

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 8005588:	f247 5030 	movw	r0, #30000	; 0x7530
 800558c:	f7ff ff8c 	bl	80054a8 <SD_CheckStatusWithTimeout>
 8005590:	4603      	mov	r3, r0
 8005592:	2b00      	cmp	r3, #0
 8005594:	da01      	bge.n	800559a <SD_read+0x26>
  {
    return res;
 8005596:	7dfb      	ldrb	r3, [r7, #23]
 8005598:	e03b      	b.n	8005612 <SD_read+0x9e>

#if defined(ENABLE_SCRATCH_BUFFER)
  if (!((uint32_t)buff & 0x3))
  {
#endif
    if(BSP_SD_ReadBlocks_DMA((uint32_t*)buff,
 800559a:	683a      	ldr	r2, [r7, #0]
 800559c:	6879      	ldr	r1, [r7, #4]
 800559e:	68b8      	ldr	r0, [r7, #8]
 80055a0:	f7ff fee2 	bl	8005368 <BSP_SD_ReadBlocks_DMA>
 80055a4:	4603      	mov	r3, r0
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d132      	bne.n	8005610 <SD_read+0x9c>
                             (uint32_t) (sector),
                             count) == MSD_OK)
    {
      ReadStatus = 0;
 80055aa:	4b1c      	ldr	r3, [pc, #112]	; (800561c <SD_read+0xa8>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	601a      	str	r2, [r3, #0]
      /* Wait that the reading process is completed or a timeout occurs */
      timeout = HAL_GetTick();
 80055b0:	f7fb fbde 	bl	8000d70 <HAL_GetTick>
 80055b4:	6138      	str	r0, [r7, #16]
      while((ReadStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 80055b6:	bf00      	nop
 80055b8:	4b18      	ldr	r3, [pc, #96]	; (800561c <SD_read+0xa8>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d108      	bne.n	80055d2 <SD_read+0x5e>
 80055c0:	f7fb fbd6 	bl	8000d70 <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	f247 522f 	movw	r2, #29999	; 0x752f
 80055ce:	4293      	cmp	r3, r2
 80055d0:	d9f2      	bls.n	80055b8 <SD_read+0x44>
      {
      }
      /* incase of a timeout return error */
      if (ReadStatus == 0)
 80055d2:	4b12      	ldr	r3, [pc, #72]	; (800561c <SD_read+0xa8>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d102      	bne.n	80055e0 <SD_read+0x6c>
      {
        res = RES_ERROR;
 80055da:	2301      	movs	r3, #1
 80055dc:	75fb      	strb	r3, [r7, #23]
 80055de:	e017      	b.n	8005610 <SD_read+0x9c>
      }
      else
      {
        ReadStatus = 0;
 80055e0:	4b0e      	ldr	r3, [pc, #56]	; (800561c <SD_read+0xa8>)
 80055e2:	2200      	movs	r2, #0
 80055e4:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 80055e6:	f7fb fbc3 	bl	8000d70 <HAL_GetTick>
 80055ea:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80055ec:	e007      	b.n	80055fe <SD_read+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 80055ee:	f7ff feef 	bl	80053d0 <BSP_SD_GetCardState>
 80055f2:	4603      	mov	r3, r0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d102      	bne.n	80055fe <SD_read+0x8a>
          {
            res = RES_OK;
 80055f8:	2300      	movs	r3, #0
 80055fa:	75fb      	strb	r3, [r7, #23]
            adjust the address and the D-Cache size to invalidate accordingly.
            */
            alignedAddr = (uint32_t)buff & ~0x1F;
            SCB_InvalidateDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif
            break;
 80055fc:	e008      	b.n	8005610 <SD_read+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80055fe:	f7fb fbb7 	bl	8000d70 <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	693b      	ldr	r3, [r7, #16]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	f247 522f 	movw	r2, #29999	; 0x752f
 800560c:	4293      	cmp	r3, r2
 800560e:	d9ee      	bls.n	80055ee <SD_read+0x7a>
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif

  return res;
 8005610:	7dfb      	ldrb	r3, [r7, #23]
}
 8005612:	4618      	mov	r0, r3
 8005614:	3718      	adds	r7, #24
 8005616:	46bd      	mov	sp, r7
 8005618:	bd80      	pop	{r7, pc}
 800561a:	bf00      	nop
 800561c:	2000002c 	.word	0x2000002c

08005620 <SD_write>:
  * @retval DRESULT: Operation result
  */
#if _USE_WRITE == 1

DRESULT SD_write(BYTE lun, const BYTE *buff, DWORD sector, UINT count)
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b086      	sub	sp, #24
 8005624:	af00      	add	r7, sp, #0
 8005626:	60b9      	str	r1, [r7, #8]
 8005628:	607a      	str	r2, [r7, #4]
 800562a:	603b      	str	r3, [r7, #0]
 800562c:	4603      	mov	r3, r0
 800562e:	73fb      	strb	r3, [r7, #15]
  DRESULT res = RES_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	75fb      	strb	r3, [r7, #23]
#if defined(ENABLE_SCRATCH_BUFFER)
  uint8_t ret;
  int i;
#endif

   WriteStatus = 0;
 8005634:	4b24      	ldr	r3, [pc, #144]	; (80056c8 <SD_write+0xa8>)
 8005636:	2200      	movs	r2, #0
 8005638:	601a      	str	r2, [r3, #0]
#if (ENABLE_SD_DMA_CACHE_MAINTENANCE == 1)
  uint32_t alignedAddr;
#endif

  if (SD_CheckStatusWithTimeout(SD_TIMEOUT) < 0)
 800563a:	f247 5030 	movw	r0, #30000	; 0x7530
 800563e:	f7ff ff33 	bl	80054a8 <SD_CheckStatusWithTimeout>
 8005642:	4603      	mov	r3, r0
 8005644:	2b00      	cmp	r3, #0
 8005646:	da01      	bge.n	800564c <SD_write+0x2c>
  {
    return res;
 8005648:	7dfb      	ldrb	r3, [r7, #23]
 800564a:	e038      	b.n	80056be <SD_write+0x9e>
    */
    alignedAddr = (uint32_t)buff &  ~0x1F;
    SCB_CleanDCache_by_Addr((uint32_t*)alignedAddr, count*BLOCKSIZE + ((uint32_t)buff - alignedAddr));
#endif

    if(BSP_SD_WriteBlocks_DMA((uint32_t*)buff,
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	68b8      	ldr	r0, [r7, #8]
 8005652:	f7ff fea3 	bl	800539c <BSP_SD_WriteBlocks_DMA>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d12f      	bne.n	80056bc <SD_write+0x9c>
                              (uint32_t)(sector),
                              count) == MSD_OK)
    {
      /* Wait that writing process is completed or a timeout occurs */

      timeout = HAL_GetTick();
 800565c:	f7fb fb88 	bl	8000d70 <HAL_GetTick>
 8005660:	6138      	str	r0, [r7, #16]
      while((WriteStatus == 0) && ((HAL_GetTick() - timeout) < SD_TIMEOUT))
 8005662:	bf00      	nop
 8005664:	4b18      	ldr	r3, [pc, #96]	; (80056c8 <SD_write+0xa8>)
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	2b00      	cmp	r3, #0
 800566a:	d108      	bne.n	800567e <SD_write+0x5e>
 800566c:	f7fb fb80 	bl	8000d70 <HAL_GetTick>
 8005670:	4602      	mov	r2, r0
 8005672:	693b      	ldr	r3, [r7, #16]
 8005674:	1ad3      	subs	r3, r2, r3
 8005676:	f247 522f 	movw	r2, #29999	; 0x752f
 800567a:	4293      	cmp	r3, r2
 800567c:	d9f2      	bls.n	8005664 <SD_write+0x44>
      {
      }
      /* incase of a timeout return error */
      if (WriteStatus == 0)
 800567e:	4b12      	ldr	r3, [pc, #72]	; (80056c8 <SD_write+0xa8>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	2b00      	cmp	r3, #0
 8005684:	d102      	bne.n	800568c <SD_write+0x6c>
      {
        res = RES_ERROR;
 8005686:	2301      	movs	r3, #1
 8005688:	75fb      	strb	r3, [r7, #23]
 800568a:	e017      	b.n	80056bc <SD_write+0x9c>
      }
      else
      {
        WriteStatus = 0;
 800568c:	4b0e      	ldr	r3, [pc, #56]	; (80056c8 <SD_write+0xa8>)
 800568e:	2200      	movs	r2, #0
 8005690:	601a      	str	r2, [r3, #0]
        timeout = HAL_GetTick();
 8005692:	f7fb fb6d 	bl	8000d70 <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 8005698:	e007      	b.n	80056aa <SD_write+0x8a>
        {
          if (BSP_SD_GetCardState() == SD_TRANSFER_OK)
 800569a:	f7ff fe99 	bl	80053d0 <BSP_SD_GetCardState>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d102      	bne.n	80056aa <SD_write+0x8a>
          {
            res = RES_OK;
 80056a4:	2300      	movs	r3, #0
 80056a6:	75fb      	strb	r3, [r7, #23]
            break;
 80056a8:	e008      	b.n	80056bc <SD_write+0x9c>
        while((HAL_GetTick() - timeout) < SD_TIMEOUT)
 80056aa:	f7fb fb61 	bl	8000d70 <HAL_GetTick>
 80056ae:	4602      	mov	r2, r0
 80056b0:	693b      	ldr	r3, [r7, #16]
 80056b2:	1ad3      	subs	r3, r2, r3
 80056b4:	f247 522f 	movw	r2, #29999	; 0x752f
 80056b8:	4293      	cmp	r3, r2
 80056ba:	d9ee      	bls.n	800569a <SD_write+0x7a>
      }
      if ((i == count) && (ret == MSD_OK))
        res = RES_OK;
    }
#endif
  return res;
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80056be:	4618      	mov	r0, r3
 80056c0:	3718      	adds	r7, #24
 80056c2:	46bd      	mov	sp, r7
 80056c4:	bd80      	pop	{r7, pc}
 80056c6:	bf00      	nop
 80056c8:	20000028 	.word	0x20000028

080056cc <SD_ioctl>:
  * @param  *buff: Buffer to send/receive control data
  * @retval DRESULT: Operation result
  */
#if _USE_IOCTL == 1
DRESULT SD_ioctl(BYTE lun, BYTE cmd, void *buff)
{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08c      	sub	sp, #48	; 0x30
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	4603      	mov	r3, r0
 80056d4:	603a      	str	r2, [r7, #0]
 80056d6:	71fb      	strb	r3, [r7, #7]
 80056d8:	460b      	mov	r3, r1
 80056da:	71bb      	strb	r3, [r7, #6]
  DRESULT res = RES_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  BSP_SD_CardInfo CardInfo;

  if (Stat & STA_NOINIT) return RES_NOTRDY;
 80056e2:	4b25      	ldr	r3, [pc, #148]	; (8005778 <SD_ioctl+0xac>)
 80056e4:	781b      	ldrb	r3, [r3, #0]
 80056e6:	b2db      	uxtb	r3, r3
 80056e8:	f003 0301 	and.w	r3, r3, #1
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d001      	beq.n	80056f4 <SD_ioctl+0x28>
 80056f0:	2303      	movs	r3, #3
 80056f2:	e03c      	b.n	800576e <SD_ioctl+0xa2>

  switch (cmd)
 80056f4:	79bb      	ldrb	r3, [r7, #6]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d834      	bhi.n	8005764 <SD_ioctl+0x98>
 80056fa:	a201      	add	r2, pc, #4	; (adr r2, 8005700 <SD_ioctl+0x34>)
 80056fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005700:	08005711 	.word	0x08005711
 8005704:	08005719 	.word	0x08005719
 8005708:	08005731 	.word	0x08005731
 800570c:	0800574b 	.word	0x0800574b
  {
  /* Make sure that no pending write process */
  case CTRL_SYNC :
    res = RES_OK;
 8005710:	2300      	movs	r3, #0
 8005712:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005716:	e028      	b.n	800576a <SD_ioctl+0x9e>

  /* Get number of sectors on the disk (DWORD) */
  case GET_SECTOR_COUNT :
    BSP_SD_GetCardInfo(&CardInfo);
 8005718:	f107 030c 	add.w	r3, r7, #12
 800571c:	4618      	mov	r0, r3
 800571e:	f7ff fe67 	bl	80053f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockNbr;
 8005722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005724:	683b      	ldr	r3, [r7, #0]
 8005726:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 8005728:	2300      	movs	r3, #0
 800572a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 800572e:	e01c      	b.n	800576a <SD_ioctl+0x9e>

  /* Get R/W sector size (WORD) */
  case GET_SECTOR_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 8005730:	f107 030c 	add.w	r3, r7, #12
 8005734:	4618      	mov	r0, r3
 8005736:	f7ff fe5b 	bl	80053f0 <BSP_SD_GetCardInfo>
    *(WORD*)buff = CardInfo.LogBlockSize;
 800573a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573c:	b29a      	uxth	r2, r3
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	801a      	strh	r2, [r3, #0]
    res = RES_OK;
 8005742:	2300      	movs	r3, #0
 8005744:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005748:	e00f      	b.n	800576a <SD_ioctl+0x9e>

  /* Get erase block size in unit of sector (DWORD) */
  case GET_BLOCK_SIZE :
    BSP_SD_GetCardInfo(&CardInfo);
 800574a:	f107 030c 	add.w	r3, r7, #12
 800574e:	4618      	mov	r0, r3
 8005750:	f7ff fe4e 	bl	80053f0 <BSP_SD_GetCardInfo>
    *(DWORD*)buff = CardInfo.LogBlockSize / SD_DEFAULT_BLOCK_SIZE;
 8005754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005756:	0a5a      	lsrs	r2, r3, #9
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	601a      	str	r2, [r3, #0]
    res = RES_OK;
 800575c:	2300      	movs	r3, #0
 800575e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    break;
 8005762:	e002      	b.n	800576a <SD_ioctl+0x9e>

  default:
    res = RES_PARERR;
 8005764:	2304      	movs	r3, #4
 8005766:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  }

  return res;
 800576a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 800576e:	4618      	mov	r0, r3
 8005770:	3730      	adds	r7, #48	; 0x30
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000009 	.word	0x20000009

0800577c <BSP_SD_WriteCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_WriteCpltCallback(void)
{
 800577c:	b480      	push	{r7}
 800577e:	af00      	add	r7, sp, #0

  WriteStatus = 1;
 8005780:	4b03      	ldr	r3, [pc, #12]	; (8005790 <BSP_SD_WriteCpltCallback+0x14>)
 8005782:	2201      	movs	r2, #1
 8005784:	601a      	str	r2, [r3, #0]
}
 8005786:	bf00      	nop
 8005788:	46bd      	mov	sp, r7
 800578a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800578e:	4770      	bx	lr
 8005790:	20000028 	.word	0x20000028

08005794 <BSP_SD_ReadCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
void BSP_SD_ReadCpltCallback(void)
{
 8005794:	b480      	push	{r7}
 8005796:	af00      	add	r7, sp, #0
  ReadStatus = 1;
 8005798:	4b03      	ldr	r3, [pc, #12]	; (80057a8 <BSP_SD_ReadCpltCallback+0x14>)
 800579a:	2201      	movs	r2, #1
 800579c:	601a      	str	r2, [r3, #0]
}
 800579e:	bf00      	nop
 80057a0:	46bd      	mov	sp, r7
 80057a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a6:	4770      	bx	lr
 80057a8:	2000002c 	.word	0x2000002c

080057ac <disk_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive number to identify the drive */
)
{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b084      	sub	sp, #16
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	4603      	mov	r3, r0
 80057b4:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat;

  stat = disk.drv[pdrv]->disk_status(disk.lun[pdrv]);
 80057b6:	79fb      	ldrb	r3, [r7, #7]
 80057b8:	4a08      	ldr	r2, [pc, #32]	; (80057dc <disk_status+0x30>)
 80057ba:	009b      	lsls	r3, r3, #2
 80057bc:	4413      	add	r3, r2
 80057be:	685b      	ldr	r3, [r3, #4]
 80057c0:	685b      	ldr	r3, [r3, #4]
 80057c2:	79fa      	ldrb	r2, [r7, #7]
 80057c4:	4905      	ldr	r1, [pc, #20]	; (80057dc <disk_status+0x30>)
 80057c6:	440a      	add	r2, r1
 80057c8:	7a12      	ldrb	r2, [r2, #8]
 80057ca:	4610      	mov	r0, r2
 80057cc:	4798      	blx	r3
 80057ce:	4603      	mov	r3, r0
 80057d0:	73fb      	strb	r3, [r7, #15]
  return stat;
 80057d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3710      	adds	r7, #16
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}
 80057dc:	20000258 	.word	0x20000258

080057e0 <disk_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber to identify the drive */
)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	b084      	sub	sp, #16
 80057e4:	af00      	add	r7, sp, #0
 80057e6:	4603      	mov	r3, r0
 80057e8:	71fb      	strb	r3, [r7, #7]
  DSTATUS stat = RES_OK;
 80057ea:	2300      	movs	r3, #0
 80057ec:	73fb      	strb	r3, [r7, #15]

  if(disk.is_initialized[pdrv] == 0)
 80057ee:	79fb      	ldrb	r3, [r7, #7]
 80057f0:	4a0d      	ldr	r2, [pc, #52]	; (8005828 <disk_initialize+0x48>)
 80057f2:	5cd3      	ldrb	r3, [r2, r3]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d111      	bne.n	800581c <disk_initialize+0x3c>
  {
    disk.is_initialized[pdrv] = 1;
 80057f8:	79fb      	ldrb	r3, [r7, #7]
 80057fa:	4a0b      	ldr	r2, [pc, #44]	; (8005828 <disk_initialize+0x48>)
 80057fc:	2101      	movs	r1, #1
 80057fe:	54d1      	strb	r1, [r2, r3]
    stat = disk.drv[pdrv]->disk_initialize(disk.lun[pdrv]);
 8005800:	79fb      	ldrb	r3, [r7, #7]
 8005802:	4a09      	ldr	r2, [pc, #36]	; (8005828 <disk_initialize+0x48>)
 8005804:	009b      	lsls	r3, r3, #2
 8005806:	4413      	add	r3, r2
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	79fa      	ldrb	r2, [r7, #7]
 800580e:	4906      	ldr	r1, [pc, #24]	; (8005828 <disk_initialize+0x48>)
 8005810:	440a      	add	r2, r1
 8005812:	7a12      	ldrb	r2, [r2, #8]
 8005814:	4610      	mov	r0, r2
 8005816:	4798      	blx	r3
 8005818:	4603      	mov	r3, r0
 800581a:	73fb      	strb	r3, [r7, #15]
  }
  return stat;
 800581c:	7bfb      	ldrb	r3, [r7, #15]
}
 800581e:	4618      	mov	r0, r3
 8005820:	3710      	adds	r7, #16
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
 8005826:	bf00      	nop
 8005828:	20000258 	.word	0x20000258

0800582c <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	        /* Sector address in LBA */
	UINT count		/* Number of sectors to read */
)
{
 800582c:	b590      	push	{r4, r7, lr}
 800582e:	b087      	sub	sp, #28
 8005830:	af00      	add	r7, sp, #0
 8005832:	60b9      	str	r1, [r7, #8]
 8005834:	607a      	str	r2, [r7, #4]
 8005836:	603b      	str	r3, [r7, #0]
 8005838:	4603      	mov	r3, r0
 800583a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_read(disk.lun[pdrv], buff, sector, count);
 800583c:	7bfb      	ldrb	r3, [r7, #15]
 800583e:	4a0a      	ldr	r2, [pc, #40]	; (8005868 <disk_read+0x3c>)
 8005840:	009b      	lsls	r3, r3, #2
 8005842:	4413      	add	r3, r2
 8005844:	685b      	ldr	r3, [r3, #4]
 8005846:	689c      	ldr	r4, [r3, #8]
 8005848:	7bfb      	ldrb	r3, [r7, #15]
 800584a:	4a07      	ldr	r2, [pc, #28]	; (8005868 <disk_read+0x3c>)
 800584c:	4413      	add	r3, r2
 800584e:	7a18      	ldrb	r0, [r3, #8]
 8005850:	683b      	ldr	r3, [r7, #0]
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	68b9      	ldr	r1, [r7, #8]
 8005856:	47a0      	blx	r4
 8005858:	4603      	mov	r3, r0
 800585a:	75fb      	strb	r3, [r7, #23]
  return res;
 800585c:	7dfb      	ldrb	r3, [r7, #23]
}
 800585e:	4618      	mov	r0, r3
 8005860:	371c      	adds	r7, #28
 8005862:	46bd      	mov	sp, r7
 8005864:	bd90      	pop	{r4, r7, pc}
 8005866:	bf00      	nop
 8005868:	20000258 	.word	0x20000258

0800586c <disk_write>:
	BYTE pdrv,		/* Physical drive nmuber to identify the drive */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address in LBA */
	UINT count        	/* Number of sectors to write */
)
{
 800586c:	b590      	push	{r4, r7, lr}
 800586e:	b087      	sub	sp, #28
 8005870:	af00      	add	r7, sp, #0
 8005872:	60b9      	str	r1, [r7, #8]
 8005874:	607a      	str	r2, [r7, #4]
 8005876:	603b      	str	r3, [r7, #0]
 8005878:	4603      	mov	r3, r0
 800587a:	73fb      	strb	r3, [r7, #15]
  DRESULT res;

  res = disk.drv[pdrv]->disk_write(disk.lun[pdrv], buff, sector, count);
 800587c:	7bfb      	ldrb	r3, [r7, #15]
 800587e:	4a0a      	ldr	r2, [pc, #40]	; (80058a8 <disk_write+0x3c>)
 8005880:	009b      	lsls	r3, r3, #2
 8005882:	4413      	add	r3, r2
 8005884:	685b      	ldr	r3, [r3, #4]
 8005886:	68dc      	ldr	r4, [r3, #12]
 8005888:	7bfb      	ldrb	r3, [r7, #15]
 800588a:	4a07      	ldr	r2, [pc, #28]	; (80058a8 <disk_write+0x3c>)
 800588c:	4413      	add	r3, r2
 800588e:	7a18      	ldrb	r0, [r3, #8]
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	68b9      	ldr	r1, [r7, #8]
 8005896:	47a0      	blx	r4
 8005898:	4603      	mov	r3, r0
 800589a:	75fb      	strb	r3, [r7, #23]
  return res;
 800589c:	7dfb      	ldrb	r3, [r7, #23]
}
 800589e:	4618      	mov	r0, r3
 80058a0:	371c      	adds	r7, #28
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd90      	pop	{r4, r7, pc}
 80058a6:	bf00      	nop
 80058a8:	20000258 	.word	0x20000258

080058ac <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b084      	sub	sp, #16
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	4603      	mov	r3, r0
 80058b4:	603a      	str	r2, [r7, #0]
 80058b6:	71fb      	strb	r3, [r7, #7]
 80058b8:	460b      	mov	r3, r1
 80058ba:	71bb      	strb	r3, [r7, #6]
  DRESULT res;

  res = disk.drv[pdrv]->disk_ioctl(disk.lun[pdrv], cmd, buff);
 80058bc:	79fb      	ldrb	r3, [r7, #7]
 80058be:	4a09      	ldr	r2, [pc, #36]	; (80058e4 <disk_ioctl+0x38>)
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	4413      	add	r3, r2
 80058c4:	685b      	ldr	r3, [r3, #4]
 80058c6:	691b      	ldr	r3, [r3, #16]
 80058c8:	79fa      	ldrb	r2, [r7, #7]
 80058ca:	4906      	ldr	r1, [pc, #24]	; (80058e4 <disk_ioctl+0x38>)
 80058cc:	440a      	add	r2, r1
 80058ce:	7a10      	ldrb	r0, [r2, #8]
 80058d0:	79b9      	ldrb	r1, [r7, #6]
 80058d2:	683a      	ldr	r2, [r7, #0]
 80058d4:	4798      	blx	r3
 80058d6:	4603      	mov	r3, r0
 80058d8:	73fb      	strb	r3, [r7, #15]
  return res;
 80058da:	7bfb      	ldrb	r3, [r7, #15]
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}
 80058e4:	20000258 	.word	0x20000258

080058e8 <ld_word>:
/* Load/Store multi-byte word in the FAT structure                       */
/*-----------------------------------------------------------------------*/

static
WORD ld_word (const BYTE* ptr)	/*	 Load a 2-byte little-endian word */
{
 80058e8:	b480      	push	{r7}
 80058ea:	b085      	sub	sp, #20
 80058ec:	af00      	add	r7, sp, #0
 80058ee:	6078      	str	r0, [r7, #4]
	WORD rv;

	rv = ptr[1];
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	3301      	adds	r3, #1
 80058f4:	781b      	ldrb	r3, [r3, #0]
 80058f6:	81fb      	strh	r3, [r7, #14]
	rv = rv << 8 | ptr[0];
 80058f8:	89fb      	ldrh	r3, [r7, #14]
 80058fa:	021b      	lsls	r3, r3, #8
 80058fc:	b21a      	sxth	r2, r3
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	781b      	ldrb	r3, [r3, #0]
 8005902:	b21b      	sxth	r3, r3
 8005904:	4313      	orrs	r3, r2
 8005906:	b21b      	sxth	r3, r3
 8005908:	81fb      	strh	r3, [r7, #14]
	return rv;
 800590a:	89fb      	ldrh	r3, [r7, #14]
}
 800590c:	4618      	mov	r0, r3
 800590e:	3714      	adds	r7, #20
 8005910:	46bd      	mov	sp, r7
 8005912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005916:	4770      	bx	lr

08005918 <ld_dword>:

static
DWORD ld_dword (const BYTE* ptr)	/* Load a 4-byte little-endian word */
{
 8005918:	b480      	push	{r7}
 800591a:	b085      	sub	sp, #20
 800591c:	af00      	add	r7, sp, #0
 800591e:	6078      	str	r0, [r7, #4]
	DWORD rv;

	rv = ptr[3];
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	3303      	adds	r3, #3
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[2];
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	021b      	lsls	r3, r3, #8
 800592c:	687a      	ldr	r2, [r7, #4]
 800592e:	3202      	adds	r2, #2
 8005930:	7812      	ldrb	r2, [r2, #0]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[1];
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	021b      	lsls	r3, r3, #8
 800593a:	687a      	ldr	r2, [r7, #4]
 800593c:	3201      	adds	r2, #1
 800593e:	7812      	ldrb	r2, [r2, #0]
 8005940:	4313      	orrs	r3, r2
 8005942:	60fb      	str	r3, [r7, #12]
	rv = rv << 8 | ptr[0];
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	021b      	lsls	r3, r3, #8
 8005948:	687a      	ldr	r2, [r7, #4]
 800594a:	7812      	ldrb	r2, [r2, #0]
 800594c:	4313      	orrs	r3, r2
 800594e:	60fb      	str	r3, [r7, #12]
	return rv;
 8005950:	68fb      	ldr	r3, [r7, #12]
}
 8005952:	4618      	mov	r0, r3
 8005954:	3714      	adds	r7, #20
 8005956:	46bd      	mov	sp, r7
 8005958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800595c:	4770      	bx	lr

0800595e <st_word>:
#endif

#if !_FS_READONLY
static
void st_word (BYTE* ptr, WORD val)	/* Store a 2-byte word in little-endian */
{
 800595e:	b480      	push	{r7}
 8005960:	b083      	sub	sp, #12
 8005962:	af00      	add	r7, sp, #0
 8005964:	6078      	str	r0, [r7, #4]
 8005966:	460b      	mov	r3, r1
 8005968:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val; val >>= 8;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	607a      	str	r2, [r7, #4]
 8005970:	887a      	ldrh	r2, [r7, #2]
 8005972:	b2d2      	uxtb	r2, r2
 8005974:	701a      	strb	r2, [r3, #0]
 8005976:	887b      	ldrh	r3, [r7, #2]
 8005978:	0a1b      	lsrs	r3, r3, #8
 800597a:	807b      	strh	r3, [r7, #2]
	*ptr++ = (BYTE)val;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	1c5a      	adds	r2, r3, #1
 8005980:	607a      	str	r2, [r7, #4]
 8005982:	887a      	ldrh	r2, [r7, #2]
 8005984:	b2d2      	uxtb	r2, r2
 8005986:	701a      	strb	r2, [r3, #0]
}
 8005988:	bf00      	nop
 800598a:	370c      	adds	r7, #12
 800598c:	46bd      	mov	sp, r7
 800598e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005992:	4770      	bx	lr

08005994 <st_dword>:

static
void st_dword (BYTE* ptr, DWORD val)	/* Store a 4-byte word in little-endian */
{
 8005994:	b480      	push	{r7}
 8005996:	b083      	sub	sp, #12
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]
 800599c:	6039      	str	r1, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	1c5a      	adds	r2, r3, #1
 80059a2:	607a      	str	r2, [r7, #4]
 80059a4:	683a      	ldr	r2, [r7, #0]
 80059a6:	b2d2      	uxtb	r2, r2
 80059a8:	701a      	strb	r2, [r3, #0]
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	1c5a      	adds	r2, r3, #1
 80059b4:	607a      	str	r2, [r7, #4]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	b2d2      	uxtb	r2, r2
 80059ba:	701a      	strb	r2, [r3, #0]
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	0a1b      	lsrs	r3, r3, #8
 80059c0:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val; val >>= 8;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	1c5a      	adds	r2, r3, #1
 80059c6:	607a      	str	r2, [r7, #4]
 80059c8:	683a      	ldr	r2, [r7, #0]
 80059ca:	b2d2      	uxtb	r2, r2
 80059cc:	701a      	strb	r2, [r3, #0]
 80059ce:	683b      	ldr	r3, [r7, #0]
 80059d0:	0a1b      	lsrs	r3, r3, #8
 80059d2:	603b      	str	r3, [r7, #0]
	*ptr++ = (BYTE)val;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	1c5a      	adds	r2, r3, #1
 80059d8:	607a      	str	r2, [r7, #4]
 80059da:	683a      	ldr	r2, [r7, #0]
 80059dc:	b2d2      	uxtb	r2, r2
 80059de:	701a      	strb	r2, [r3, #0]
}
 80059e0:	bf00      	nop
 80059e2:	370c      	adds	r7, #12
 80059e4:	46bd      	mov	sp, r7
 80059e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ea:	4770      	bx	lr

080059ec <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 80059ec:	b480      	push	{r7}
 80059ee:	b087      	sub	sp, #28
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	60f8      	str	r0, [r7, #12]
 80059f4:	60b9      	str	r1, [r7, #8]
 80059f6:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 80059fc:	68bb      	ldr	r3, [r7, #8]
 80059fe:	613b      	str	r3, [r7, #16]

	if (cnt) {
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d00d      	beq.n	8005a22 <mem_cpy+0x36>
		do {
			*d++ = *s++;
 8005a06:	693a      	ldr	r2, [r7, #16]
 8005a08:	1c53      	adds	r3, r2, #1
 8005a0a:	613b      	str	r3, [r7, #16]
 8005a0c:	697b      	ldr	r3, [r7, #20]
 8005a0e:	1c59      	adds	r1, r3, #1
 8005a10:	6179      	str	r1, [r7, #20]
 8005a12:	7812      	ldrb	r2, [r2, #0]
 8005a14:	701a      	strb	r2, [r3, #0]
		} while (--cnt);
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	3b01      	subs	r3, #1
 8005a1a:	607b      	str	r3, [r7, #4]
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d1f1      	bne.n	8005a06 <mem_cpy+0x1a>
	}
}
 8005a22:	bf00      	nop
 8005a24:	371c      	adds	r7, #28
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr

08005a2e <mem_set>:

/* Fill memory block */
static
void mem_set (void* dst, int val, UINT cnt) {
 8005a2e:	b480      	push	{r7}
 8005a30:	b087      	sub	sp, #28
 8005a32:	af00      	add	r7, sp, #0
 8005a34:	60f8      	str	r0, [r7, #12]
 8005a36:	60b9      	str	r1, [r7, #8]
 8005a38:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	617b      	str	r3, [r7, #20]

	do {
		*d++ = (BYTE)val;
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	1c5a      	adds	r2, r3, #1
 8005a42:	617a      	str	r2, [r7, #20]
 8005a44:	68ba      	ldr	r2, [r7, #8]
 8005a46:	b2d2      	uxtb	r2, r2
 8005a48:	701a      	strb	r2, [r3, #0]
	} while (--cnt);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	3b01      	subs	r3, #1
 8005a4e:	607b      	str	r3, [r7, #4]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d1f3      	bne.n	8005a3e <mem_set+0x10>
}
 8005a56:	bf00      	nop
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr

08005a62 <mem_cmp>:

/* Compare memory block */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {	/* ZR:same, NZ:different */
 8005a62:	b480      	push	{r7}
 8005a64:	b089      	sub	sp, #36	; 0x24
 8005a66:	af00      	add	r7, sp, #0
 8005a68:	60f8      	str	r0, [r7, #12]
 8005a6a:	60b9      	str	r1, [r7, #8]
 8005a6c:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	61fb      	str	r3, [r7, #28]
 8005a72:	68bb      	ldr	r3, [r7, #8]
 8005a74:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8005a76:	2300      	movs	r3, #0
 8005a78:	617b      	str	r3, [r7, #20]

	do {
		r = *d++ - *s++;
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	1c5a      	adds	r2, r3, #1
 8005a7e:	61fa      	str	r2, [r7, #28]
 8005a80:	781b      	ldrb	r3, [r3, #0]
 8005a82:	4619      	mov	r1, r3
 8005a84:	69bb      	ldr	r3, [r7, #24]
 8005a86:	1c5a      	adds	r2, r3, #1
 8005a88:	61ba      	str	r2, [r7, #24]
 8005a8a:	781b      	ldrb	r3, [r3, #0]
 8005a8c:	1acb      	subs	r3, r1, r3
 8005a8e:	617b      	str	r3, [r7, #20]
	} while (--cnt && r == 0);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	3b01      	subs	r3, #1
 8005a94:	607b      	str	r3, [r7, #4]
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d002      	beq.n	8005aa2 <mem_cmp+0x40>
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d0eb      	beq.n	8005a7a <mem_cmp+0x18>

	return r;
 8005aa2:	697b      	ldr	r3, [r7, #20]
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	3724      	adds	r7, #36	; 0x24
 8005aa8:	46bd      	mov	sp, r7
 8005aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aae:	4770      	bx	lr

08005ab0 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {	/* NZ:contained, ZR:not contained */
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
 8005ab8:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8005aba:	e002      	b.n	8005ac2 <chk_chr+0x12>
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	3301      	adds	r3, #1
 8005ac0:	607b      	str	r3, [r7, #4]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d005      	beq.n	8005ad6 <chk_chr+0x26>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	461a      	mov	r2, r3
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d1f2      	bne.n	8005abc <chk_chr+0xc>
	return *str;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	781b      	ldrb	r3, [r3, #0]
}
 8005ada:	4618      	mov	r0, r3
 8005adc:	370c      	adds	r7, #12
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae4:	4770      	bx	lr
	...

08005ae8 <chk_lock>:
static
FRESULT chk_lock (	/* Check if the file can be accessed */
	DIR* dp,		/* Directory object pointing the file to be checked */
	int acc			/* Desired access type (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
 8005af0:	6039      	str	r1, [r7, #0]
	UINT i, be;

	/* Search file semaphore table */
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005af2:	2300      	movs	r3, #0
 8005af4:	60bb      	str	r3, [r7, #8]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	60fb      	str	r3, [r7, #12]
 8005afa:	e029      	b.n	8005b50 <chk_lock+0x68>
		if (Files[i].fs) {	/* Existing entry */
 8005afc:	4a27      	ldr	r2, [pc, #156]	; (8005b9c <chk_lock+0xb4>)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	011b      	lsls	r3, r3, #4
 8005b02:	4413      	add	r3, r2
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d01d      	beq.n	8005b46 <chk_lock+0x5e>
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b0a:	4a24      	ldr	r2, [pc, #144]	; (8005b9c <chk_lock+0xb4>)
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	011b      	lsls	r3, r3, #4
 8005b10:	4413      	add	r3, r2
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d116      	bne.n	8005b4a <chk_lock+0x62>
				Files[i].clu == dp->obj.sclust &&
 8005b1c:	4a1f      	ldr	r2, [pc, #124]	; (8005b9c <chk_lock+0xb4>)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	011b      	lsls	r3, r3, #4
 8005b22:	4413      	add	r3, r2
 8005b24:	3304      	adds	r3, #4
 8005b26:	681a      	ldr	r2, [r3, #0]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	689b      	ldr	r3, [r3, #8]
			if (Files[i].fs == dp->obj.fs &&	 	/* Check if the object matched with an open object */
 8005b2c:	429a      	cmp	r2, r3
 8005b2e:	d10c      	bne.n	8005b4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b30:	4a1a      	ldr	r2, [pc, #104]	; (8005b9c <chk_lock+0xb4>)
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	011b      	lsls	r3, r3, #4
 8005b36:	4413      	add	r3, r2
 8005b38:	3308      	adds	r3, #8
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	695b      	ldr	r3, [r3, #20]
				Files[i].clu == dp->obj.sclust &&
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d102      	bne.n	8005b4a <chk_lock+0x62>
				Files[i].ofs == dp->dptr) break;
 8005b44:	e007      	b.n	8005b56 <chk_lock+0x6e>
		} else {			/* Blank entry */
			be = 1;
 8005b46:	2301      	movs	r3, #1
 8005b48:	60bb      	str	r3, [r7, #8]
	for (i = be = 0; i < _FS_LOCK; i++) {
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	3301      	adds	r3, #1
 8005b4e:	60fb      	str	r3, [r7, #12]
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	2b01      	cmp	r3, #1
 8005b54:	d9d2      	bls.n	8005afc <chk_lock+0x14>
		}
	}
	if (i == _FS_LOCK) {	/* The object is not opened */
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	2b02      	cmp	r3, #2
 8005b5a:	d109      	bne.n	8005b70 <chk_lock+0x88>
		return (be || acc == 2) ? FR_OK : FR_TOO_MANY_OPEN_FILES;	/* Is there a blank entry for new object? */
 8005b5c:	68bb      	ldr	r3, [r7, #8]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d102      	bne.n	8005b68 <chk_lock+0x80>
 8005b62:	683b      	ldr	r3, [r7, #0]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d101      	bne.n	8005b6c <chk_lock+0x84>
 8005b68:	2300      	movs	r3, #0
 8005b6a:	e010      	b.n	8005b8e <chk_lock+0xa6>
 8005b6c:	2312      	movs	r3, #18
 8005b6e:	e00e      	b.n	8005b8e <chk_lock+0xa6>
	}

	/* The object has been opened. Reject any open against writing file and all write mode open */
	return (acc || Files[i].ctr == 0x100) ? FR_LOCKED : FR_OK;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d108      	bne.n	8005b88 <chk_lock+0xa0>
 8005b76:	4a09      	ldr	r2, [pc, #36]	; (8005b9c <chk_lock+0xb4>)
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	011b      	lsls	r3, r3, #4
 8005b7c:	4413      	add	r3, r2
 8005b7e:	330c      	adds	r3, #12
 8005b80:	881b      	ldrh	r3, [r3, #0]
 8005b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b86:	d101      	bne.n	8005b8c <chk_lock+0xa4>
 8005b88:	2310      	movs	r3, #16
 8005b8a:	e000      	b.n	8005b8e <chk_lock+0xa6>
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000038 	.word	0x20000038

08005ba0 <enq_lock>:


static
int enq_lock (void)	/* Check if an entry is available for a new object */
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b083      	sub	sp, #12
 8005ba4:	af00      	add	r7, sp, #0
	UINT i;

	for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	607b      	str	r3, [r7, #4]
 8005baa:	e002      	b.n	8005bb2 <enq_lock+0x12>
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	3301      	adds	r3, #1
 8005bb0:	607b      	str	r3, [r7, #4]
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d806      	bhi.n	8005bc6 <enq_lock+0x26>
 8005bb8:	4a09      	ldr	r2, [pc, #36]	; (8005be0 <enq_lock+0x40>)
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	011b      	lsls	r3, r3, #4
 8005bbe:	4413      	add	r3, r2
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d1f2      	bne.n	8005bac <enq_lock+0xc>
	return (i == _FS_LOCK) ? 0 : 1;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	bf14      	ite	ne
 8005bcc:	2301      	movne	r3, #1
 8005bce:	2300      	moveq	r3, #0
 8005bd0:	b2db      	uxtb	r3, r3
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	370c      	adds	r7, #12
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr
 8005bde:	bf00      	nop
 8005be0:	20000038 	.word	0x20000038

08005be4 <inc_lock>:
static
UINT inc_lock (	/* Increment object open counter and returns its index (0:Internal error) */
	DIR* dp,	/* Directory object pointing the file to register or increment */
	int acc		/* Desired access (0:Read, 1:Write, 2:Delete/Rename) */
)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b085      	sub	sp, #20
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
 8005bec:	6039      	str	r1, [r7, #0]
	UINT i;


	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005bee:	2300      	movs	r3, #0
 8005bf0:	60fb      	str	r3, [r7, #12]
 8005bf2:	e01f      	b.n	8005c34 <inc_lock+0x50>
		if (Files[i].fs == dp->obj.fs &&
 8005bf4:	4a41      	ldr	r2, [pc, #260]	; (8005cfc <inc_lock+0x118>)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	011b      	lsls	r3, r3, #4
 8005bfa:	4413      	add	r3, r2
 8005bfc:	681a      	ldr	r2, [r3, #0]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	429a      	cmp	r2, r3
 8005c04:	d113      	bne.n	8005c2e <inc_lock+0x4a>
			Files[i].clu == dp->obj.sclust &&
 8005c06:	4a3d      	ldr	r2, [pc, #244]	; (8005cfc <inc_lock+0x118>)
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	4413      	add	r3, r2
 8005c0e:	3304      	adds	r3, #4
 8005c10:	681a      	ldr	r2, [r3, #0]
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	689b      	ldr	r3, [r3, #8]
		if (Files[i].fs == dp->obj.fs &&
 8005c16:	429a      	cmp	r2, r3
 8005c18:	d109      	bne.n	8005c2e <inc_lock+0x4a>
			Files[i].ofs == dp->dptr) break;
 8005c1a:	4a38      	ldr	r2, [pc, #224]	; (8005cfc <inc_lock+0x118>)
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	011b      	lsls	r3, r3, #4
 8005c20:	4413      	add	r3, r2
 8005c22:	3308      	adds	r3, #8
 8005c24:	681a      	ldr	r2, [r3, #0]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	695b      	ldr	r3, [r3, #20]
			Files[i].clu == dp->obj.sclust &&
 8005c2a:	429a      	cmp	r2, r3
 8005c2c:	d006      	beq.n	8005c3c <inc_lock+0x58>
	for (i = 0; i < _FS_LOCK; i++) {	/* Find the object */
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	3301      	adds	r3, #1
 8005c32:	60fb      	str	r3, [r7, #12]
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d9dc      	bls.n	8005bf4 <inc_lock+0x10>
 8005c3a:	e000      	b.n	8005c3e <inc_lock+0x5a>
			Files[i].ofs == dp->dptr) break;
 8005c3c:	bf00      	nop
	}

	if (i == _FS_LOCK) {				/* Not opened. Register it as new. */
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	2b02      	cmp	r3, #2
 8005c42:	d132      	bne.n	8005caa <inc_lock+0xc6>
		for (i = 0; i < _FS_LOCK && Files[i].fs; i++) ;
 8005c44:	2300      	movs	r3, #0
 8005c46:	60fb      	str	r3, [r7, #12]
 8005c48:	e002      	b.n	8005c50 <inc_lock+0x6c>
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	3301      	adds	r3, #1
 8005c4e:	60fb      	str	r3, [r7, #12]
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2b01      	cmp	r3, #1
 8005c54:	d806      	bhi.n	8005c64 <inc_lock+0x80>
 8005c56:	4a29      	ldr	r2, [pc, #164]	; (8005cfc <inc_lock+0x118>)
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	011b      	lsls	r3, r3, #4
 8005c5c:	4413      	add	r3, r2
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d1f2      	bne.n	8005c4a <inc_lock+0x66>
		if (i == _FS_LOCK) return 0;	/* No free entry to register (int err) */
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	2b02      	cmp	r3, #2
 8005c68:	d101      	bne.n	8005c6e <inc_lock+0x8a>
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	e040      	b.n	8005cf0 <inc_lock+0x10c>
		Files[i].fs = dp->obj.fs;
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681a      	ldr	r2, [r3, #0]
 8005c72:	4922      	ldr	r1, [pc, #136]	; (8005cfc <inc_lock+0x118>)
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	011b      	lsls	r3, r3, #4
 8005c78:	440b      	add	r3, r1
 8005c7a:	601a      	str	r2, [r3, #0]
		Files[i].clu = dp->obj.sclust;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	689a      	ldr	r2, [r3, #8]
 8005c80:	491e      	ldr	r1, [pc, #120]	; (8005cfc <inc_lock+0x118>)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	011b      	lsls	r3, r3, #4
 8005c86:	440b      	add	r3, r1
 8005c88:	3304      	adds	r3, #4
 8005c8a:	601a      	str	r2, [r3, #0]
		Files[i].ofs = dp->dptr;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	695a      	ldr	r2, [r3, #20]
 8005c90:	491a      	ldr	r1, [pc, #104]	; (8005cfc <inc_lock+0x118>)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	011b      	lsls	r3, r3, #4
 8005c96:	440b      	add	r3, r1
 8005c98:	3308      	adds	r3, #8
 8005c9a:	601a      	str	r2, [r3, #0]
		Files[i].ctr = 0;
 8005c9c:	4a17      	ldr	r2, [pc, #92]	; (8005cfc <inc_lock+0x118>)
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	011b      	lsls	r3, r3, #4
 8005ca2:	4413      	add	r3, r2
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	2200      	movs	r2, #0
 8005ca8:	801a      	strh	r2, [r3, #0]
	}

	if (acc && Files[i].ctr) return 0;	/* Access violation (int err) */
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <inc_lock+0xe0>
 8005cb0:	4a12      	ldr	r2, [pc, #72]	; (8005cfc <inc_lock+0x118>)
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	011b      	lsls	r3, r3, #4
 8005cb6:	4413      	add	r3, r2
 8005cb8:	330c      	adds	r3, #12
 8005cba:	881b      	ldrh	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d001      	beq.n	8005cc4 <inc_lock+0xe0>
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	e015      	b.n	8005cf0 <inc_lock+0x10c>

	Files[i].ctr = acc ? 0x100 : Files[i].ctr + 1;	/* Set semaphore value */
 8005cc4:	683b      	ldr	r3, [r7, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <inc_lock+0xf8>
 8005cca:	4a0c      	ldr	r2, [pc, #48]	; (8005cfc <inc_lock+0x118>)
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	011b      	lsls	r3, r3, #4
 8005cd0:	4413      	add	r3, r2
 8005cd2:	330c      	adds	r3, #12
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	b29a      	uxth	r2, r3
 8005cda:	e001      	b.n	8005ce0 <inc_lock+0xfc>
 8005cdc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005ce0:	4906      	ldr	r1, [pc, #24]	; (8005cfc <inc_lock+0x118>)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	011b      	lsls	r3, r3, #4
 8005ce6:	440b      	add	r3, r1
 8005ce8:	330c      	adds	r3, #12
 8005cea:	801a      	strh	r2, [r3, #0]

	return i + 1;
 8005cec:	68fb      	ldr	r3, [r7, #12]
 8005cee:	3301      	adds	r3, #1
}
 8005cf0:	4618      	mov	r0, r3
 8005cf2:	3714      	adds	r7, #20
 8005cf4:	46bd      	mov	sp, r7
 8005cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cfa:	4770      	bx	lr
 8005cfc:	20000038 	.word	0x20000038

08005d00 <dec_lock>:

static
FRESULT dec_lock (	/* Decrement object open counter */
	UINT i			/* Semaphore index (1..) */
)
{
 8005d00:	b480      	push	{r7}
 8005d02:	b085      	sub	sp, #20
 8005d04:	af00      	add	r7, sp, #0
 8005d06:	6078      	str	r0, [r7, #4]
	WORD n;
	FRESULT res;


	if (--i < _FS_LOCK) {	/* Shift index number origin from 0 */
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	3b01      	subs	r3, #1
 8005d0c:	607b      	str	r3, [r7, #4]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d825      	bhi.n	8005d60 <dec_lock+0x60>
		n = Files[i].ctr;
 8005d14:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <dec_lock+0x74>)
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	011b      	lsls	r3, r3, #4
 8005d1a:	4413      	add	r3, r2
 8005d1c:	330c      	adds	r3, #12
 8005d1e:	881b      	ldrh	r3, [r3, #0]
 8005d20:	81fb      	strh	r3, [r7, #14]
		if (n == 0x100) n = 0;		/* If write mode open, delete the entry */
 8005d22:	89fb      	ldrh	r3, [r7, #14]
 8005d24:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d28:	d101      	bne.n	8005d2e <dec_lock+0x2e>
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	81fb      	strh	r3, [r7, #14]
		if (n > 0) n--;				/* Decrement read mode open count */
 8005d2e:	89fb      	ldrh	r3, [r7, #14]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d002      	beq.n	8005d3a <dec_lock+0x3a>
 8005d34:	89fb      	ldrh	r3, [r7, #14]
 8005d36:	3b01      	subs	r3, #1
 8005d38:	81fb      	strh	r3, [r7, #14]
		Files[i].ctr = n;
 8005d3a:	4a0e      	ldr	r2, [pc, #56]	; (8005d74 <dec_lock+0x74>)
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	011b      	lsls	r3, r3, #4
 8005d40:	4413      	add	r3, r2
 8005d42:	330c      	adds	r3, #12
 8005d44:	89fa      	ldrh	r2, [r7, #14]
 8005d46:	801a      	strh	r2, [r3, #0]
		if (n == 0) Files[i].fs = 0;	/* Delete the entry if open count gets zero */
 8005d48:	89fb      	ldrh	r3, [r7, #14]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d105      	bne.n	8005d5a <dec_lock+0x5a>
 8005d4e:	4a09      	ldr	r2, [pc, #36]	; (8005d74 <dec_lock+0x74>)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	011b      	lsls	r3, r3, #4
 8005d54:	4413      	add	r3, r2
 8005d56:	2200      	movs	r2, #0
 8005d58:	601a      	str	r2, [r3, #0]
		res = FR_OK;
 8005d5a:	2300      	movs	r3, #0
 8005d5c:	737b      	strb	r3, [r7, #13]
 8005d5e:	e001      	b.n	8005d64 <dec_lock+0x64>
	} else {
		res = FR_INT_ERR;			/* Invalid index nunber */
 8005d60:	2302      	movs	r3, #2
 8005d62:	737b      	strb	r3, [r7, #13]
	}
	return res;
 8005d64:	7b7b      	ldrb	r3, [r7, #13]
}
 8005d66:	4618      	mov	r0, r3
 8005d68:	3714      	adds	r7, #20
 8005d6a:	46bd      	mov	sp, r7
 8005d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d70:	4770      	bx	lr
 8005d72:	bf00      	nop
 8005d74:	20000038 	.word	0x20000038

08005d78 <clear_lock>:

static
void clear_lock (	/* Clear lock entries of the volume */
	FATFS *fs
)
{
 8005d78:	b480      	push	{r7}
 8005d7a:	b085      	sub	sp, #20
 8005d7c:	af00      	add	r7, sp, #0
 8005d7e:	6078      	str	r0, [r7, #4]
	UINT i;

	for (i = 0; i < _FS_LOCK; i++) {
 8005d80:	2300      	movs	r3, #0
 8005d82:	60fb      	str	r3, [r7, #12]
 8005d84:	e010      	b.n	8005da8 <clear_lock+0x30>
		if (Files[i].fs == fs) Files[i].fs = 0;
 8005d86:	4a0d      	ldr	r2, [pc, #52]	; (8005dbc <clear_lock+0x44>)
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	011b      	lsls	r3, r3, #4
 8005d8c:	4413      	add	r3, r2
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	687a      	ldr	r2, [r7, #4]
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d105      	bne.n	8005da2 <clear_lock+0x2a>
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <clear_lock+0x44>)
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	011b      	lsls	r3, r3, #4
 8005d9c:	4413      	add	r3, r2
 8005d9e:	2200      	movs	r2, #0
 8005da0:	601a      	str	r2, [r3, #0]
	for (i = 0; i < _FS_LOCK; i++) {
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	3301      	adds	r3, #1
 8005da6:	60fb      	str	r3, [r7, #12]
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d9eb      	bls.n	8005d86 <clear_lock+0xe>
	}
}
 8005dae:	bf00      	nop
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	20000038 	.word	0x20000038

08005dc0 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs			/* File system object */
)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b086      	sub	sp, #24
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	78db      	ldrb	r3, [r3, #3]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d034      	beq.n	8005e3e <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dd8:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	7858      	ldrb	r0, [r3, #1]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005de4:	2301      	movs	r3, #1
 8005de6:	697a      	ldr	r2, [r7, #20]
 8005de8:	f7ff fd40 	bl	800586c <disk_write>
 8005dec:	4603      	mov	r3, r0
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <sync_window+0x38>
			res = FR_DISK_ERR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	73fb      	strb	r3, [r7, #15]
 8005df6:	e022      	b.n	8005e3e <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2200      	movs	r2, #0
 8005dfc:	70da      	strb	r2, [r3, #3]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e02:	697a      	ldr	r2, [r7, #20]
 8005e04:	1ad2      	subs	r2, r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d217      	bcs.n	8005e3e <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	789b      	ldrb	r3, [r3, #2]
 8005e12:	613b      	str	r3, [r7, #16]
 8005e14:	e010      	b.n	8005e38 <sync_window+0x78>
					wsect += fs->fsize;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69db      	ldr	r3, [r3, #28]
 8005e1a:	697a      	ldr	r2, [r7, #20]
 8005e1c:	4413      	add	r3, r2
 8005e1e:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	7858      	ldrb	r0, [r3, #1]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	697a      	ldr	r2, [r7, #20]
 8005e2e:	f7ff fd1d 	bl	800586c <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8005e32:	693b      	ldr	r3, [r7, #16]
 8005e34:	3b01      	subs	r3, #1
 8005e36:	613b      	str	r3, [r7, #16]
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	2b01      	cmp	r3, #1
 8005e3c:	d8eb      	bhi.n	8005e16 <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e40:	4618      	mov	r0, r3
 8005e42:	3718      	adds	r7, #24
 8005e44:	46bd      	mov	sp, r7
 8005e46:	bd80      	pop	{r7, pc}

08005e48 <move_window>:
static
FRESULT move_window (	/* Returns FR_OK or FR_DISK_ERROR */
	FATFS* fs,			/* File system object */
	DWORD sector		/* Sector number to make appearance in the fs->win[] */
)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
 8005e50:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8005e52:	2300      	movs	r3, #0
 8005e54:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	429a      	cmp	r2, r3
 8005e5e:	d01b      	beq.n	8005e98 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7ff ffad 	bl	8005dc0 <sync_window>
 8005e66:	4603      	mov	r3, r0
 8005e68:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8005e6a:	7bfb      	ldrb	r3, [r7, #15]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d113      	bne.n	8005e98 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	7858      	ldrb	r0, [r3, #1]
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	683a      	ldr	r2, [r7, #0]
 8005e7e:	f7ff fcd5 	bl	800582c <disk_read>
 8005e82:	4603      	mov	r3, r0
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d004      	beq.n	8005e92 <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8005e88:	f04f 33ff 	mov.w	r3, #4294967295
 8005e8c:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8005e8e:	2301      	movs	r3, #1
 8005e90:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	683a      	ldr	r2, [r7, #0]
 8005e96:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8005e98:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	3710      	adds	r7, #16
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	bd80      	pop	{r7, pc}
	...

08005ea4 <sync_fs>:

static
FRESULT sync_fs (	/* FR_OK:succeeded, !=0:error */
	FATFS* fs		/* File system object */
)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8005eac:	6878      	ldr	r0, [r7, #4]
 8005eae:	f7ff ff87 	bl	8005dc0 <sync_window>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8005eb6:	7bfb      	ldrb	r3, [r7, #15]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d158      	bne.n	8005f6e <sync_fs+0xca>
		/* Update FSInfo sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	781b      	ldrb	r3, [r3, #0]
 8005ec0:	2b03      	cmp	r3, #3
 8005ec2:	d148      	bne.n	8005f56 <sync_fs+0xb2>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	791b      	ldrb	r3, [r3, #4]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d144      	bne.n	8005f56 <sync_fs+0xb2>
			/* Create FSInfo structure */
			mem_set(fs->win, 0, SS(fs));
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	3334      	adds	r3, #52	; 0x34
 8005ed0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ed4:	2100      	movs	r1, #0
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7ff fda9 	bl	8005a2e <mem_set>
			st_word(fs->win + BS_55AA, 0xAA55);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	3334      	adds	r3, #52	; 0x34
 8005ee0:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8005ee4:	f64a 2155 	movw	r1, #43605	; 0xaa55
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f7ff fd38 	bl	800595e <st_word>
			st_dword(fs->win + FSI_LeadSig, 0x41615252);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	3334      	adds	r3, #52	; 0x34
 8005ef2:	4921      	ldr	r1, [pc, #132]	; (8005f78 <sync_fs+0xd4>)
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	f7ff fd4d 	bl	8005994 <st_dword>
			st_dword(fs->win + FSI_StrucSig, 0x61417272);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	3334      	adds	r3, #52	; 0x34
 8005efe:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8005f02:	491e      	ldr	r1, [pc, #120]	; (8005f7c <sync_fs+0xd8>)
 8005f04:	4618      	mov	r0, r3
 8005f06:	f7ff fd45 	bl	8005994 <st_dword>
			st_dword(fs->win + FSI_Free_Count, fs->free_clst);
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	3334      	adds	r3, #52	; 0x34
 8005f0e:	f503 72f4 	add.w	r2, r3, #488	; 0x1e8
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	4619      	mov	r1, r3
 8005f18:	4610      	mov	r0, r2
 8005f1a:	f7ff fd3b 	bl	8005994 <st_dword>
			st_dword(fs->win + FSI_Nxt_Free, fs->last_clst);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	3334      	adds	r3, #52	; 0x34
 8005f22:	f503 72f6 	add.w	r2, r3, #492	; 0x1ec
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	4619      	mov	r1, r3
 8005f2c:	4610      	mov	r0, r2
 8005f2e:	f7ff fd31 	bl	8005994 <st_dword>
			/* Write it into the FSInfo sector */
			fs->winsect = fs->volbase + 1;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	1c5a      	adds	r2, r3, #1
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	7858      	ldrb	r0, [r3, #1]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f4a:	2301      	movs	r3, #1
 8005f4c:	f7ff fc8e 	bl	800586c <disk_write>
			fs->fsi_flag = 0;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2200      	movs	r2, #0
 8005f54:	711a      	strb	r2, [r3, #4]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK) res = FR_DISK_ERR;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	785b      	ldrb	r3, [r3, #1]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	4618      	mov	r0, r3
 8005f60:	f7ff fca4 	bl	80058ac <disk_ioctl>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <sync_fs+0xca>
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8005f6e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f70:	4618      	mov	r0, r3
 8005f72:	3710      	adds	r7, #16
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	41615252 	.word	0x41615252
 8005f7c:	61417272 	.word	0x61417272

08005f80 <clust2sect>:
static
DWORD clust2sect (	/* !=0:Sector number, 0:Failed (invalid cluster#) */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b083      	sub	sp, #12
 8005f84:	af00      	add	r7, sp, #0
 8005f86:	6078      	str	r0, [r7, #4]
 8005f88:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8005f8a:	683b      	ldr	r3, [r7, #0]
 8005f8c:	3b02      	subs	r3, #2
 8005f8e:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	699b      	ldr	r3, [r3, #24]
 8005f94:	3b02      	subs	r3, #2
 8005f96:	683a      	ldr	r2, [r7, #0]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d301      	bcc.n	8005fa0 <clust2sect+0x20>
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e008      	b.n	8005fb2 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	895b      	ldrh	r3, [r3, #10]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	683b      	ldr	r3, [r7, #0]
 8005fa8:	fb03 f202 	mul.w	r2, r3, r2
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb0:	4413      	add	r3, r2
}
 8005fb2:	4618      	mov	r0, r3
 8005fb4:	370c      	adds	r7, #12
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr

08005fbe <get_fat>:
static
DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x7FFFFFFF:Cluster status */
	_FDID* obj,	/* Corresponding object */
	DWORD clst	/* Cluster number to get the value */
)
{
 8005fbe:	b580      	push	{r7, lr}
 8005fc0:	b086      	sub	sp, #24
 8005fc2:	af00      	add	r7, sp, #0
 8005fc4:	6078      	str	r0, [r7, #4]
 8005fc6:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	DWORD val;
	FATFS *fs = obj->fs;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	613b      	str	r3, [r7, #16]


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check if in valid range */
 8005fce:	683b      	ldr	r3, [r7, #0]
 8005fd0:	2b01      	cmp	r3, #1
 8005fd2:	d904      	bls.n	8005fde <get_fat+0x20>
 8005fd4:	693b      	ldr	r3, [r7, #16]
 8005fd6:	699b      	ldr	r3, [r3, #24]
 8005fd8:	683a      	ldr	r2, [r7, #0]
 8005fda:	429a      	cmp	r2, r3
 8005fdc:	d302      	bcc.n	8005fe4 <get_fat+0x26>
		val = 1;	/* Internal error */
 8005fde:	2301      	movs	r3, #1
 8005fe0:	617b      	str	r3, [r7, #20]
 8005fe2:	e08c      	b.n	80060fe <get_fat+0x140>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 8005fe4:	f04f 33ff 	mov.w	r3, #4294967295
 8005fe8:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 8005fea:	693b      	ldr	r3, [r7, #16]
 8005fec:	781b      	ldrb	r3, [r3, #0]
 8005fee:	2b02      	cmp	r3, #2
 8005ff0:	d045      	beq.n	800607e <get_fat+0xc0>
 8005ff2:	2b03      	cmp	r3, #3
 8005ff4:	d05d      	beq.n	80060b2 <get_fat+0xf4>
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	d177      	bne.n	80060ea <get_fat+0x12c>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	60fb      	str	r3, [r7, #12]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	085b      	lsrs	r3, r3, #1
 8006002:	68fa      	ldr	r2, [r7, #12]
 8006004:	4413      	add	r3, r2
 8006006:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	0a5b      	lsrs	r3, r3, #9
 8006010:	4413      	add	r3, r2
 8006012:	4619      	mov	r1, r3
 8006014:	6938      	ldr	r0, [r7, #16]
 8006016:	f7ff ff17 	bl	8005e48 <move_window>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	d167      	bne.n	80060f0 <get_fat+0x132>
			wc = fs->win[bc++ % SS(fs)];
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	1c5a      	adds	r2, r3, #1
 8006024:	60fa      	str	r2, [r7, #12]
 8006026:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800602a:	693a      	ldr	r2, [r7, #16]
 800602c:	4413      	add	r3, r2
 800602e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006032:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8006034:	693b      	ldr	r3, [r7, #16]
 8006036:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	0a5b      	lsrs	r3, r3, #9
 800603c:	4413      	add	r3, r2
 800603e:	4619      	mov	r1, r3
 8006040:	6938      	ldr	r0, [r7, #16]
 8006042:	f7ff ff01 	bl	8005e48 <move_window>
 8006046:	4603      	mov	r3, r0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d153      	bne.n	80060f4 <get_fat+0x136>
			wc |= fs->win[bc % SS(fs)] << 8;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006052:	693a      	ldr	r2, [r7, #16]
 8006054:	4413      	add	r3, r2
 8006056:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800605a:	021b      	lsls	r3, r3, #8
 800605c:	461a      	mov	r2, r3
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	4313      	orrs	r3, r2
 8006062:	60bb      	str	r3, [r7, #8]
			val = (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	f003 0301 	and.w	r3, r3, #1
 800606a:	2b00      	cmp	r3, #0
 800606c:	d002      	beq.n	8006074 <get_fat+0xb6>
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	091b      	lsrs	r3, r3, #4
 8006072:	e002      	b.n	800607a <get_fat+0xbc>
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800607a:	617b      	str	r3, [r7, #20]
			break;
 800607c:	e03f      	b.n	80060fe <get_fat+0x140>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800607e:	693b      	ldr	r3, [r7, #16]
 8006080:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	0a1b      	lsrs	r3, r3, #8
 8006086:	4413      	add	r3, r2
 8006088:	4619      	mov	r1, r3
 800608a:	6938      	ldr	r0, [r7, #16]
 800608c:	f7ff fedc 	bl	8005e48 <move_window>
 8006090:	4603      	mov	r3, r0
 8006092:	2b00      	cmp	r3, #0
 8006094:	d130      	bne.n	80060f8 <get_fat+0x13a>
			val = ld_word(fs->win + clst * 2 % SS(fs));
 8006096:	693b      	ldr	r3, [r7, #16]
 8006098:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	005b      	lsls	r3, r3, #1
 80060a0:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 80060a4:	4413      	add	r3, r2
 80060a6:	4618      	mov	r0, r3
 80060a8:	f7ff fc1e 	bl	80058e8 <ld_word>
 80060ac:	4603      	mov	r3, r0
 80060ae:	617b      	str	r3, [r7, #20]
			break;
 80060b0:	e025      	b.n	80060fe <get_fat+0x140>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	09db      	lsrs	r3, r3, #7
 80060ba:	4413      	add	r3, r2
 80060bc:	4619      	mov	r1, r3
 80060be:	6938      	ldr	r0, [r7, #16]
 80060c0:	f7ff fec2 	bl	8005e48 <move_window>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d118      	bne.n	80060fc <get_fat+0x13e>
			val = ld_dword(fs->win + clst * 4 % SS(fs)) & 0x0FFFFFFF;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	009b      	lsls	r3, r3, #2
 80060d4:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80060d8:	4413      	add	r3, r2
 80060da:	4618      	mov	r0, r3
 80060dc:	f7ff fc1c 	bl	8005918 <ld_dword>
 80060e0:	4603      	mov	r3, r0
 80060e2:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80060e6:	617b      	str	r3, [r7, #20]
			break;
 80060e8:	e009      	b.n	80060fe <get_fat+0x140>
				}
			}
			/* go to default */
#endif
		default:
			val = 1;	/* Internal error */
 80060ea:	2301      	movs	r3, #1
 80060ec:	617b      	str	r3, [r7, #20]
 80060ee:	e006      	b.n	80060fe <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060f0:	bf00      	nop
 80060f2:	e004      	b.n	80060fe <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80060f4:	bf00      	nop
 80060f6:	e002      	b.n	80060fe <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80060f8:	bf00      	nop
 80060fa:	e000      	b.n	80060fe <get_fat+0x140>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80060fc:	bf00      	nop
		}
	}

	return val;
 80060fe:	697b      	ldr	r3, [r7, #20]
}
 8006100:	4618      	mov	r0, r3
 8006102:	3718      	adds	r7, #24
 8006104:	46bd      	mov	sp, r7
 8006106:	bd80      	pop	{r7, pc}

08006108 <put_fat>:
FRESULT put_fat (	/* FR_OK(0):succeeded, !=0:error */
	FATFS* fs,		/* Corresponding file system object */
	DWORD clst,		/* FAT index number (cluster number) to be changed */
	DWORD val		/* New value to be set to the entry */
)
{
 8006108:	b590      	push	{r4, r7, lr}
 800610a:	b089      	sub	sp, #36	; 0x24
 800610c:	af00      	add	r7, sp, #0
 800610e:	60f8      	str	r0, [r7, #12]
 8006110:	60b9      	str	r1, [r7, #8]
 8006112:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res = FR_INT_ERR;
 8006114:	2302      	movs	r3, #2
 8006116:	77fb      	strb	r3, [r7, #31]

	if (clst >= 2 && clst < fs->n_fatent) {	/* Check if in valid range */
 8006118:	68bb      	ldr	r3, [r7, #8]
 800611a:	2b01      	cmp	r3, #1
 800611c:	f240 80d6 	bls.w	80062cc <put_fat+0x1c4>
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	699b      	ldr	r3, [r3, #24]
 8006124:	68ba      	ldr	r2, [r7, #8]
 8006126:	429a      	cmp	r2, r3
 8006128:	f080 80d0 	bcs.w	80062cc <put_fat+0x1c4>
		switch (fs->fs_type) {
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	781b      	ldrb	r3, [r3, #0]
 8006130:	2b02      	cmp	r3, #2
 8006132:	d073      	beq.n	800621c <put_fat+0x114>
 8006134:	2b03      	cmp	r3, #3
 8006136:	f000 8091 	beq.w	800625c <put_fat+0x154>
 800613a:	2b01      	cmp	r3, #1
 800613c:	f040 80c6 	bne.w	80062cc <put_fat+0x1c4>
		case FS_FAT12 :	/* Bitfield items */
			bc = (UINT)clst; bc += bc / 2;
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	61bb      	str	r3, [r7, #24]
 8006144:	69bb      	ldr	r3, [r7, #24]
 8006146:	085b      	lsrs	r3, r3, #1
 8006148:	69ba      	ldr	r2, [r7, #24]
 800614a:	4413      	add	r3, r2
 800614c:	61bb      	str	r3, [r7, #24]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006152:	69bb      	ldr	r3, [r7, #24]
 8006154:	0a5b      	lsrs	r3, r3, #9
 8006156:	4413      	add	r3, r2
 8006158:	4619      	mov	r1, r3
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f7ff fe74 	bl	8005e48 <move_window>
 8006160:	4603      	mov	r3, r0
 8006162:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006164:	7ffb      	ldrb	r3, [r7, #31]
 8006166:	2b00      	cmp	r3, #0
 8006168:	f040 80a9 	bne.w	80062be <put_fat+0x1b6>
			p = fs->win + bc++ % SS(fs);
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006172:	69bb      	ldr	r3, [r7, #24]
 8006174:	1c59      	adds	r1, r3, #1
 8006176:	61b9      	str	r1, [r7, #24]
 8006178:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800617c:	4413      	add	r3, r2
 800617e:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8006180:	68bb      	ldr	r3, [r7, #8]
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	2b00      	cmp	r3, #0
 8006188:	d00d      	beq.n	80061a6 <put_fat+0x9e>
 800618a:	697b      	ldr	r3, [r7, #20]
 800618c:	781b      	ldrb	r3, [r3, #0]
 800618e:	b25b      	sxtb	r3, r3
 8006190:	f003 030f 	and.w	r3, r3, #15
 8006194:	b25a      	sxtb	r2, r3
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	b2db      	uxtb	r3, r3
 800619a:	011b      	lsls	r3, r3, #4
 800619c:	b25b      	sxtb	r3, r3
 800619e:	4313      	orrs	r3, r2
 80061a0:	b25b      	sxtb	r3, r3
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	e001      	b.n	80061aa <put_fat+0xa2>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	697a      	ldr	r2, [r7, #20]
 80061ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	2201      	movs	r2, #1
 80061b2:	70da      	strb	r2, [r3, #3]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80061b8:	69bb      	ldr	r3, [r7, #24]
 80061ba:	0a5b      	lsrs	r3, r3, #9
 80061bc:	4413      	add	r3, r2
 80061be:	4619      	mov	r1, r3
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f7ff fe41 	bl	8005e48 <move_window>
 80061c6:	4603      	mov	r3, r0
 80061c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80061ca:	7ffb      	ldrb	r3, [r7, #31]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d178      	bne.n	80062c2 <put_fat+0x1ba>
			p = fs->win + bc % SS(fs);
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80061d6:	69bb      	ldr	r3, [r7, #24]
 80061d8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061dc:	4413      	add	r3, r2
 80061de:	617b      	str	r3, [r7, #20]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80061e0:	68bb      	ldr	r3, [r7, #8]
 80061e2:	f003 0301 	and.w	r3, r3, #1
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d003      	beq.n	80061f2 <put_fat+0xea>
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	091b      	lsrs	r3, r3, #4
 80061ee:	b2db      	uxtb	r3, r3
 80061f0:	e00e      	b.n	8006210 <put_fat+0x108>
 80061f2:	697b      	ldr	r3, [r7, #20]
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	b25b      	sxtb	r3, r3
 80061f8:	f023 030f 	bic.w	r3, r3, #15
 80061fc:	b25a      	sxtb	r2, r3
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	0a1b      	lsrs	r3, r3, #8
 8006202:	b25b      	sxtb	r3, r3
 8006204:	f003 030f 	and.w	r3, r3, #15
 8006208:	b25b      	sxtb	r3, r3
 800620a:	4313      	orrs	r3, r2
 800620c:	b25b      	sxtb	r3, r3
 800620e:	b2db      	uxtb	r3, r3
 8006210:	697a      	ldr	r2, [r7, #20]
 8006212:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	2201      	movs	r2, #1
 8006218:	70da      	strb	r2, [r3, #3]
			break;
 800621a:	e057      	b.n	80062cc <put_fat+0x1c4>

		case FS_FAT16 :	/* WORD aligned items */
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006220:	68bb      	ldr	r3, [r7, #8]
 8006222:	0a1b      	lsrs	r3, r3, #8
 8006224:	4413      	add	r3, r2
 8006226:	4619      	mov	r1, r3
 8006228:	68f8      	ldr	r0, [r7, #12]
 800622a:	f7ff fe0d 	bl	8005e48 <move_window>
 800622e:	4603      	mov	r3, r0
 8006230:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006232:	7ffb      	ldrb	r3, [r7, #31]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d146      	bne.n	80062c6 <put_fat+0x1be>
			st_word(fs->win + clst * 2 % SS(fs), (WORD)val);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800623e:	68bb      	ldr	r3, [r7, #8]
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8006246:	4413      	add	r3, r2
 8006248:	687a      	ldr	r2, [r7, #4]
 800624a:	b292      	uxth	r2, r2
 800624c:	4611      	mov	r1, r2
 800624e:	4618      	mov	r0, r3
 8006250:	f7ff fb85 	bl	800595e <st_word>
			fs->wflag = 1;
 8006254:	68fb      	ldr	r3, [r7, #12]
 8006256:	2201      	movs	r2, #1
 8006258:	70da      	strb	r2, [r3, #3]
			break;
 800625a:	e037      	b.n	80062cc <put_fat+0x1c4>

		case FS_FAT32 :	/* DWORD aligned items */
#if _FS_EXFAT
		case FS_EXFAT :
#endif
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006260:	68bb      	ldr	r3, [r7, #8]
 8006262:	09db      	lsrs	r3, r3, #7
 8006264:	4413      	add	r3, r2
 8006266:	4619      	mov	r1, r3
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f7ff fded 	bl	8005e48 <move_window>
 800626e:	4603      	mov	r3, r0
 8006270:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8006272:	7ffb      	ldrb	r3, [r7, #31]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d128      	bne.n	80062ca <put_fat+0x1c2>
			if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
				val = (val & 0x0FFFFFFF) | (ld_dword(fs->win + clst * 4 % SS(fs)) & 0xF0000000);
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f023 4470 	bic.w	r4, r3, #4026531840	; 0xf0000000
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	009b      	lsls	r3, r3, #2
 8006288:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 800628c:	4413      	add	r3, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f7ff fb42 	bl	8005918 <ld_dword>
 8006294:	4603      	mov	r3, r0
 8006296:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 800629a:	4323      	orrs	r3, r4
 800629c:	607b      	str	r3, [r7, #4]
			}
			st_dword(fs->win + clst * 4 % SS(fs), val);
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	009b      	lsls	r3, r3, #2
 80062a8:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80062ac:	4413      	add	r3, r2
 80062ae:	6879      	ldr	r1, [r7, #4]
 80062b0:	4618      	mov	r0, r3
 80062b2:	f7ff fb6f 	bl	8005994 <st_dword>
			fs->wflag = 1;
 80062b6:	68fb      	ldr	r3, [r7, #12]
 80062b8:	2201      	movs	r2, #1
 80062ba:	70da      	strb	r2, [r3, #3]
			break;
 80062bc:	e006      	b.n	80062cc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80062be:	bf00      	nop
 80062c0:	e004      	b.n	80062cc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80062c2:	bf00      	nop
 80062c4:	e002      	b.n	80062cc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80062c6:	bf00      	nop
 80062c8:	e000      	b.n	80062cc <put_fat+0x1c4>
			if (res != FR_OK) break;
 80062ca:	bf00      	nop
		}
	}
	return res;
 80062cc:	7ffb      	ldrb	r3, [r7, #31]
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3724      	adds	r7, #36	; 0x24
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd90      	pop	{r4, r7, pc}

080062d6 <remove_chain>:
FRESULT remove_chain (	/* FR_OK(0):succeeded, !=0:error */
	_FDID* obj,			/* Corresponding object */
	DWORD clst,			/* Cluster to remove a chain from */
	DWORD pclst			/* Previous cluster of clst (0:an entire chain) */
)
{
 80062d6:	b580      	push	{r7, lr}
 80062d8:	b088      	sub	sp, #32
 80062da:	af00      	add	r7, sp, #0
 80062dc:	60f8      	str	r0, [r7, #12]
 80062de:	60b9      	str	r1, [r7, #8]
 80062e0:	607a      	str	r2, [r7, #4]
	FRESULT res = FR_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	77fb      	strb	r3, [r7, #31]
	DWORD nxt;
	FATFS *fs = obj->fs;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	61bb      	str	r3, [r7, #24]
#endif
#if _USE_TRIM
	DWORD rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Check if in valid range */
 80062ec:	68bb      	ldr	r3, [r7, #8]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d904      	bls.n	80062fc <remove_chain+0x26>
 80062f2:	69bb      	ldr	r3, [r7, #24]
 80062f4:	699b      	ldr	r3, [r3, #24]
 80062f6:	68ba      	ldr	r2, [r7, #8]
 80062f8:	429a      	cmp	r2, r3
 80062fa:	d301      	bcc.n	8006300 <remove_chain+0x2a>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e04b      	b.n	8006398 <remove_chain+0xc2>

	/* Mark the previous cluster 'EOC' on the FAT if it exists */
	if (pclst && (!_FS_EXFAT || fs->fs_type != FS_EXFAT || obj->stat != 2)) {
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2b00      	cmp	r3, #0
 8006304:	d00c      	beq.n	8006320 <remove_chain+0x4a>
		res = put_fat(fs, pclst, 0xFFFFFFFF);
 8006306:	f04f 32ff 	mov.w	r2, #4294967295
 800630a:	6879      	ldr	r1, [r7, #4]
 800630c:	69b8      	ldr	r0, [r7, #24]
 800630e:	f7ff fefb 	bl	8006108 <put_fat>
 8006312:	4603      	mov	r3, r0
 8006314:	77fb      	strb	r3, [r7, #31]
		if (res != FR_OK) return res;
 8006316:	7ffb      	ldrb	r3, [r7, #31]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d001      	beq.n	8006320 <remove_chain+0x4a>
 800631c:	7ffb      	ldrb	r3, [r7, #31]
 800631e:	e03b      	b.n	8006398 <remove_chain+0xc2>
	}

	/* Remove the chain */
	do {
		nxt = get_fat(obj, clst);			/* Get cluster status */
 8006320:	68b9      	ldr	r1, [r7, #8]
 8006322:	68f8      	ldr	r0, [r7, #12]
 8006324:	f7ff fe4b 	bl	8005fbe <get_fat>
 8006328:	6178      	str	r0, [r7, #20]
		if (nxt == 0) break;				/* Empty cluster? */
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	2b00      	cmp	r3, #0
 800632e:	d031      	beq.n	8006394 <remove_chain+0xbe>
		if (nxt == 1) return FR_INT_ERR;	/* Internal error? */
 8006330:	697b      	ldr	r3, [r7, #20]
 8006332:	2b01      	cmp	r3, #1
 8006334:	d101      	bne.n	800633a <remove_chain+0x64>
 8006336:	2302      	movs	r3, #2
 8006338:	e02e      	b.n	8006398 <remove_chain+0xc2>
		if (nxt == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error? */
 800633a:	697b      	ldr	r3, [r7, #20]
 800633c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006340:	d101      	bne.n	8006346 <remove_chain+0x70>
 8006342:	2301      	movs	r3, #1
 8006344:	e028      	b.n	8006398 <remove_chain+0xc2>
		if (!_FS_EXFAT || fs->fs_type != FS_EXFAT) {
			res = put_fat(fs, clst, 0);		/* Mark the cluster 'free' on the FAT */
 8006346:	2200      	movs	r2, #0
 8006348:	68b9      	ldr	r1, [r7, #8]
 800634a:	69b8      	ldr	r0, [r7, #24]
 800634c:	f7ff fedc 	bl	8006108 <put_fat>
 8006350:	4603      	mov	r3, r0
 8006352:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) return res;
 8006354:	7ffb      	ldrb	r3, [r7, #31]
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <remove_chain+0x88>
 800635a:	7ffb      	ldrb	r3, [r7, #31]
 800635c:	e01c      	b.n	8006398 <remove_chain+0xc2>
		}
		if (fs->free_clst < fs->n_fatent - 2) {	/* Update FSINFO */
 800635e:	69bb      	ldr	r3, [r7, #24]
 8006360:	695a      	ldr	r2, [r3, #20]
 8006362:	69bb      	ldr	r3, [r7, #24]
 8006364:	699b      	ldr	r3, [r3, #24]
 8006366:	3b02      	subs	r3, #2
 8006368:	429a      	cmp	r2, r3
 800636a:	d20b      	bcs.n	8006384 <remove_chain+0xae>
			fs->free_clst++;
 800636c:	69bb      	ldr	r3, [r7, #24]
 800636e:	695b      	ldr	r3, [r3, #20]
 8006370:	1c5a      	adds	r2, r3, #1
 8006372:	69bb      	ldr	r3, [r7, #24]
 8006374:	615a      	str	r2, [r3, #20]
			fs->fsi_flag |= 1;
 8006376:	69bb      	ldr	r3, [r7, #24]
 8006378:	791b      	ldrb	r3, [r3, #4]
 800637a:	f043 0301 	orr.w	r3, r3, #1
 800637e:	b2da      	uxtb	r2, r3
 8006380:	69bb      	ldr	r3, [r7, #24]
 8006382:	711a      	strb	r2, [r3, #4]
			disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Inform device the block can be erased */
#endif
			scl = ecl = nxt;
		}
#endif
		clst = nxt;					/* Next cluster */
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	60bb      	str	r3, [r7, #8]
	} while (clst < fs->n_fatent);	/* Repeat while not the last link */
 8006388:	69bb      	ldr	r3, [r7, #24]
 800638a:	699b      	ldr	r3, [r3, #24]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	429a      	cmp	r2, r3
 8006390:	d3c6      	bcc.n	8006320 <remove_chain+0x4a>
 8006392:	e000      	b.n	8006396 <remove_chain+0xc0>
		if (nxt == 0) break;				/* Empty cluster? */
 8006394:	bf00      	nop
				obj->stat = 2;	/* Change the object status 'contiguous' */
			}
		}
	}
#endif
	return FR_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3720      	adds	r7, #32
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}

080063a0 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	_FDID* obj,			/* Corresponding object */
	DWORD clst			/* Cluster# to stretch, 0:Create a new chain */
)
{
 80063a0:	b580      	push	{r7, lr}
 80063a2:	b088      	sub	sp, #32
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;
	FATFS *fs = obj->fs;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	613b      	str	r3, [r7, #16]


	if (clst == 0) {	/* Create a new chain */
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d10d      	bne.n	80063d2 <create_chain+0x32>
		scl = fs->last_clst;				/* Get suggested cluster to start from */
 80063b6:	693b      	ldr	r3, [r7, #16]
 80063b8:	691b      	ldr	r3, [r3, #16]
 80063ba:	61bb      	str	r3, [r7, #24]
		if (scl == 0 || scl >= fs->n_fatent) scl = 1;
 80063bc:	69bb      	ldr	r3, [r7, #24]
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d004      	beq.n	80063cc <create_chain+0x2c>
 80063c2:	693b      	ldr	r3, [r7, #16]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	69ba      	ldr	r2, [r7, #24]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d31b      	bcc.n	8006404 <create_chain+0x64>
 80063cc:	2301      	movs	r3, #1
 80063ce:	61bb      	str	r3, [r7, #24]
 80063d0:	e018      	b.n	8006404 <create_chain+0x64>
	}
	else {				/* Stretch current chain */
		cs = get_fat(obj, clst);			/* Check the cluster status */
 80063d2:	6839      	ldr	r1, [r7, #0]
 80063d4:	6878      	ldr	r0, [r7, #4]
 80063d6:	f7ff fdf2 	bl	8005fbe <get_fat>
 80063da:	60f8      	str	r0, [r7, #12]
		if (cs < 2) return 1;				/* Invalid FAT value */
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	2b01      	cmp	r3, #1
 80063e0:	d801      	bhi.n	80063e6 <create_chain+0x46>
 80063e2:	2301      	movs	r3, #1
 80063e4:	e070      	b.n	80064c8 <create_chain+0x128>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ec:	d101      	bne.n	80063f2 <create_chain+0x52>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	e06a      	b.n	80064c8 <create_chain+0x128>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	699b      	ldr	r3, [r3, #24]
 80063f6:	68fa      	ldr	r2, [r7, #12]
 80063f8:	429a      	cmp	r2, r3
 80063fa:	d201      	bcs.n	8006400 <create_chain+0x60>
 80063fc:	68fb      	ldr	r3, [r7, #12]
 80063fe:	e063      	b.n	80064c8 <create_chain+0x128>
		scl = clst;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	61bb      	str	r3, [r7, #24]
			}
		}
	} else
#endif
	{	/* On the FAT12/16/32 volume */
		ncl = scl;	/* Start cluster */
 8006404:	69bb      	ldr	r3, [r7, #24]
 8006406:	61fb      	str	r3, [r7, #28]
		for (;;) {
			ncl++;							/* Next cluster */
 8006408:	69fb      	ldr	r3, [r7, #28]
 800640a:	3301      	adds	r3, #1
 800640c:	61fb      	str	r3, [r7, #28]
			if (ncl >= fs->n_fatent) {		/* Check wrap-around */
 800640e:	693b      	ldr	r3, [r7, #16]
 8006410:	699b      	ldr	r3, [r3, #24]
 8006412:	69fa      	ldr	r2, [r7, #28]
 8006414:	429a      	cmp	r2, r3
 8006416:	d307      	bcc.n	8006428 <create_chain+0x88>
				ncl = 2;
 8006418:	2302      	movs	r3, #2
 800641a:	61fb      	str	r3, [r7, #28]
				if (ncl > scl) return 0;	/* No free cluster */
 800641c:	69fa      	ldr	r2, [r7, #28]
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	429a      	cmp	r2, r3
 8006422:	d901      	bls.n	8006428 <create_chain+0x88>
 8006424:	2300      	movs	r3, #0
 8006426:	e04f      	b.n	80064c8 <create_chain+0x128>
			}
			cs = get_fat(obj, ncl);			/* Get the cluster status */
 8006428:	69f9      	ldr	r1, [r7, #28]
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f7ff fdc7 	bl	8005fbe <get_fat>
 8006430:	60f8      	str	r0, [r7, #12]
			if (cs == 0) break;				/* Found a free cluster */
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	2b00      	cmp	r3, #0
 8006436:	d00e      	beq.n	8006456 <create_chain+0xb6>
			if (cs == 1 || cs == 0xFFFFFFFF) return cs;	/* An error occurred */
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	2b01      	cmp	r3, #1
 800643c:	d003      	beq.n	8006446 <create_chain+0xa6>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006444:	d101      	bne.n	800644a <create_chain+0xaa>
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	e03e      	b.n	80064c8 <create_chain+0x128>
			if (ncl == scl) return 0;		/* No free cluster */
 800644a:	69fa      	ldr	r2, [r7, #28]
 800644c:	69bb      	ldr	r3, [r7, #24]
 800644e:	429a      	cmp	r2, r3
 8006450:	d1da      	bne.n	8006408 <create_chain+0x68>
 8006452:	2300      	movs	r3, #0
 8006454:	e038      	b.n	80064c8 <create_chain+0x128>
			if (cs == 0) break;				/* Found a free cluster */
 8006456:	bf00      	nop
		}
		res = put_fat(fs, ncl, 0xFFFFFFFF);	/* Mark the new cluster 'EOC' */
 8006458:	f04f 32ff 	mov.w	r2, #4294967295
 800645c:	69f9      	ldr	r1, [r7, #28]
 800645e:	6938      	ldr	r0, [r7, #16]
 8006460:	f7ff fe52 	bl	8006108 <put_fat>
 8006464:	4603      	mov	r3, r0
 8006466:	75fb      	strb	r3, [r7, #23]
		if (res == FR_OK && clst != 0) {
 8006468:	7dfb      	ldrb	r3, [r7, #23]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d109      	bne.n	8006482 <create_chain+0xe2>
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d006      	beq.n	8006482 <create_chain+0xe2>
			res = put_fat(fs, clst, ncl);	/* Link it from the previous one if needed */
 8006474:	69fa      	ldr	r2, [r7, #28]
 8006476:	6839      	ldr	r1, [r7, #0]
 8006478:	6938      	ldr	r0, [r7, #16]
 800647a:	f7ff fe45 	bl	8006108 <put_fat>
 800647e:	4603      	mov	r3, r0
 8006480:	75fb      	strb	r3, [r7, #23]
		}
	}

	if (res == FR_OK) {			/* Update FSINFO if function succeeded. */
 8006482:	7dfb      	ldrb	r3, [r7, #23]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d116      	bne.n	80064b6 <create_chain+0x116>
		fs->last_clst = ncl;
 8006488:	693b      	ldr	r3, [r7, #16]
 800648a:	69fa      	ldr	r2, [r7, #28]
 800648c:	611a      	str	r2, [r3, #16]
		if (fs->free_clst <= fs->n_fatent - 2) fs->free_clst--;
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	693b      	ldr	r3, [r7, #16]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	3b02      	subs	r3, #2
 8006498:	429a      	cmp	r2, r3
 800649a:	d804      	bhi.n	80064a6 <create_chain+0x106>
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	695b      	ldr	r3, [r3, #20]
 80064a0:	1e5a      	subs	r2, r3, #1
 80064a2:	693b      	ldr	r3, [r7, #16]
 80064a4:	615a      	str	r2, [r3, #20]
		fs->fsi_flag |= 1;
 80064a6:	693b      	ldr	r3, [r7, #16]
 80064a8:	791b      	ldrb	r3, [r3, #4]
 80064aa:	f043 0301 	orr.w	r3, r3, #1
 80064ae:	b2da      	uxtb	r2, r3
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	711a      	strb	r2, [r3, #4]
 80064b4:	e007      	b.n	80064c6 <create_chain+0x126>
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;	/* Failed. Generate error status */
 80064b6:	7dfb      	ldrb	r3, [r7, #23]
 80064b8:	2b01      	cmp	r3, #1
 80064ba:	d102      	bne.n	80064c2 <create_chain+0x122>
 80064bc:	f04f 33ff 	mov.w	r3, #4294967295
 80064c0:	e000      	b.n	80064c4 <create_chain+0x124>
 80064c2:	2301      	movs	r3, #1
 80064c4:	61fb      	str	r3, [r7, #28]
	}

	return ncl;		/* Return new cluster number or error status */
 80064c6:	69fb      	ldr	r3, [r7, #28]
}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3720      	adds	r7, #32
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <dir_sdi>:
static
FRESULT dir_sdi (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to directory object */
	DWORD ofs		/* Offset of directory table */
)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
 80064d8:	6039      	str	r1, [r7, #0]
	DWORD csz, clst;
	FATFS *fs = dp->obj.fs;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	613b      	str	r3, [r7, #16]


	if (ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR) || ofs % SZDIRE) {	/* Check range of offset and alignment */
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80064e6:	d204      	bcs.n	80064f2 <dir_sdi+0x22>
 80064e8:	683b      	ldr	r3, [r7, #0]
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d001      	beq.n	80064f6 <dir_sdi+0x26>
		return FR_INT_ERR;
 80064f2:	2302      	movs	r3, #2
 80064f4:	e063      	b.n	80065be <dir_sdi+0xee>
	}
	dp->dptr = ofs;				/* Set current offset */
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	683a      	ldr	r2, [r7, #0]
 80064fa:	615a      	str	r2, [r3, #20]
	clst = dp->obj.sclust;		/* Table start cluster (0:root) */
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	689b      	ldr	r3, [r3, #8]
 8006500:	617b      	str	r3, [r7, #20]
	if (clst == 0 && fs->fs_type >= FS_FAT32) {	/* Replace cluster# 0 with root cluster# */
 8006502:	697b      	ldr	r3, [r7, #20]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d106      	bne.n	8006516 <dir_sdi+0x46>
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	781b      	ldrb	r3, [r3, #0]
 800650c:	2b02      	cmp	r3, #2
 800650e:	d902      	bls.n	8006516 <dir_sdi+0x46>
		clst = fs->dirbase;
 8006510:	693b      	ldr	r3, [r7, #16]
 8006512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006514:	617b      	str	r3, [r7, #20]
		if (_FS_EXFAT) dp->obj.stat = 0;	/* exFAT: Root dir has an FAT chain */
	}

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d10c      	bne.n	8006536 <dir_sdi+0x66>
		if (ofs / SZDIRE >= fs->n_rootdir)	return FR_INT_ERR;	/* Is index out of range? */
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	095b      	lsrs	r3, r3, #5
 8006520:	693a      	ldr	r2, [r7, #16]
 8006522:	8912      	ldrh	r2, [r2, #8]
 8006524:	4293      	cmp	r3, r2
 8006526:	d301      	bcc.n	800652c <dir_sdi+0x5c>
 8006528:	2302      	movs	r3, #2
 800652a:	e048      	b.n	80065be <dir_sdi+0xee>
		dp->sect = fs->dirbase;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	61da      	str	r2, [r3, #28]
 8006534:	e029      	b.n	800658a <dir_sdi+0xba>

	} else {			/* Dynamic table (sub-directory or root-directory in FAT32+) */
		csz = (DWORD)fs->csize * SS(fs);	/* Bytes per cluster */
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	895b      	ldrh	r3, [r3, #10]
 800653a:	025b      	lsls	r3, r3, #9
 800653c:	60fb      	str	r3, [r7, #12]
		while (ofs >= csz) {				/* Follow cluster chain */
 800653e:	e019      	b.n	8006574 <dir_sdi+0xa4>
			clst = get_fat(&dp->obj, clst);				/* Get next cluster */
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	6979      	ldr	r1, [r7, #20]
 8006544:	4618      	mov	r0, r3
 8006546:	f7ff fd3a 	bl	8005fbe <get_fat>
 800654a:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006552:	d101      	bne.n	8006558 <dir_sdi+0x88>
 8006554:	2301      	movs	r3, #1
 8006556:	e032      	b.n	80065be <dir_sdi+0xee>
			if (clst < 2 || clst >= fs->n_fatent) return FR_INT_ERR;	/* Reached to end of table or internal error */
 8006558:	697b      	ldr	r3, [r7, #20]
 800655a:	2b01      	cmp	r3, #1
 800655c:	d904      	bls.n	8006568 <dir_sdi+0x98>
 800655e:	693b      	ldr	r3, [r7, #16]
 8006560:	699b      	ldr	r3, [r3, #24]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	429a      	cmp	r2, r3
 8006566:	d301      	bcc.n	800656c <dir_sdi+0x9c>
 8006568:	2302      	movs	r3, #2
 800656a:	e028      	b.n	80065be <dir_sdi+0xee>
			ofs -= csz;
 800656c:	683a      	ldr	r2, [r7, #0]
 800656e:	68fb      	ldr	r3, [r7, #12]
 8006570:	1ad3      	subs	r3, r2, r3
 8006572:	603b      	str	r3, [r7, #0]
		while (ofs >= csz) {				/* Follow cluster chain */
 8006574:	683a      	ldr	r2, [r7, #0]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	429a      	cmp	r2, r3
 800657a:	d2e1      	bcs.n	8006540 <dir_sdi+0x70>
		}
		dp->sect = clust2sect(fs, clst);
 800657c:	6979      	ldr	r1, [r7, #20]
 800657e:	6938      	ldr	r0, [r7, #16]
 8006580:	f7ff fcfe 	bl	8005f80 <clust2sect>
 8006584:	4602      	mov	r2, r0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	61da      	str	r2, [r3, #28]
	}
	dp->clust = clst;					/* Current cluster# */
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	697a      	ldr	r2, [r7, #20]
 800658e:	619a      	str	r2, [r3, #24]
	if (!dp->sect) return FR_INT_ERR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	69db      	ldr	r3, [r3, #28]
 8006594:	2b00      	cmp	r3, #0
 8006596:	d101      	bne.n	800659c <dir_sdi+0xcc>
 8006598:	2302      	movs	r3, #2
 800659a:	e010      	b.n	80065be <dir_sdi+0xee>
	dp->sect += ofs / SS(fs);			/* Sector# of the directory entry */
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	69da      	ldr	r2, [r3, #28]
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	0a5b      	lsrs	r3, r3, #9
 80065a4:	441a      	add	r2, r3
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	61da      	str	r2, [r3, #28]
	dp->dir = fs->win + (ofs % SS(fs));	/* Pointer to the entry in the win[] */
 80065aa:	693b      	ldr	r3, [r7, #16]
 80065ac:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065b6:	441a      	add	r2, r3
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	621a      	str	r2, [r3, #32]

	return FR_OK;
 80065bc:	2300      	movs	r3, #0
}
 80065be:	4618      	mov	r0, r3
 80065c0:	3718      	adds	r7, #24
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK(0):succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b086      	sub	sp, #24
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
	DWORD ofs, clst;
	FATFS *fs = dp->obj.fs;
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	60fb      	str	r3, [r7, #12]
#if !_FS_READONLY
	UINT n;
#endif

	ofs = dp->dptr + SZDIRE;	/* Next entry */
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	695b      	ldr	r3, [r3, #20]
 80065da:	3320      	adds	r3, #32
 80065dc:	60bb      	str	r3, [r7, #8]
	if (!dp->sect || ofs >= (DWORD)((_FS_EXFAT && fs->fs_type == FS_EXFAT) ? MAX_DIR_EX : MAX_DIR)) return FR_NO_FILE;	/* Report EOT when offset has reached max value */
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	69db      	ldr	r3, [r3, #28]
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d003      	beq.n	80065ee <dir_next+0x28>
 80065e6:	68bb      	ldr	r3, [r7, #8]
 80065e8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80065ec:	d301      	bcc.n	80065f2 <dir_next+0x2c>
 80065ee:	2304      	movs	r3, #4
 80065f0:	e0aa      	b.n	8006748 <dir_next+0x182>

	if (ofs % SS(fs) == 0) {	/* Sector changed? */
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	f040 8098 	bne.w	800672e <dir_next+0x168>
		dp->sect++;				/* Next sector */
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	69db      	ldr	r3, [r3, #28]
 8006602:	1c5a      	adds	r2, r3, #1
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	61da      	str	r2, [r3, #28]

		if (!dp->clust) {		/* Static table */
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	699b      	ldr	r3, [r3, #24]
 800660c:	2b00      	cmp	r3, #0
 800660e:	d10b      	bne.n	8006628 <dir_next+0x62>
			if (ofs / SZDIRE >= fs->n_rootdir) {	/* Report EOT if it reached end of static table */
 8006610:	68bb      	ldr	r3, [r7, #8]
 8006612:	095b      	lsrs	r3, r3, #5
 8006614:	68fa      	ldr	r2, [r7, #12]
 8006616:	8912      	ldrh	r2, [r2, #8]
 8006618:	4293      	cmp	r3, r2
 800661a:	f0c0 8088 	bcc.w	800672e <dir_next+0x168>
				dp->sect = 0; return FR_NO_FILE;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2200      	movs	r2, #0
 8006622:	61da      	str	r2, [r3, #28]
 8006624:	2304      	movs	r3, #4
 8006626:	e08f      	b.n	8006748 <dir_next+0x182>
			}
		}
		else {					/* Dynamic table */
			if ((ofs / SS(fs) & (fs->csize - 1)) == 0) {		/* Cluster changed? */
 8006628:	68bb      	ldr	r3, [r7, #8]
 800662a:	0a5b      	lsrs	r3, r3, #9
 800662c:	68fa      	ldr	r2, [r7, #12]
 800662e:	8952      	ldrh	r2, [r2, #10]
 8006630:	3a01      	subs	r2, #1
 8006632:	4013      	ands	r3, r2
 8006634:	2b00      	cmp	r3, #0
 8006636:	d17a      	bne.n	800672e <dir_next+0x168>
				clst = get_fat(&dp->obj, dp->clust);			/* Get next cluster */
 8006638:	687a      	ldr	r2, [r7, #4]
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	699b      	ldr	r3, [r3, #24]
 800663e:	4619      	mov	r1, r3
 8006640:	4610      	mov	r0, r2
 8006642:	f7ff fcbc 	bl	8005fbe <get_fat>
 8006646:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;				/* Internal error */
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b01      	cmp	r3, #1
 800664c:	d801      	bhi.n	8006652 <dir_next+0x8c>
 800664e:	2302      	movs	r3, #2
 8006650:	e07a      	b.n	8006748 <dir_next+0x182>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;		/* Disk error */
 8006652:	697b      	ldr	r3, [r7, #20]
 8006654:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006658:	d101      	bne.n	800665e <dir_next+0x98>
 800665a:	2301      	movs	r3, #1
 800665c:	e074      	b.n	8006748 <dir_next+0x182>
				if (clst >= fs->n_fatent) {						/* Reached end of dynamic table */
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	699b      	ldr	r3, [r3, #24]
 8006662:	697a      	ldr	r2, [r7, #20]
 8006664:	429a      	cmp	r2, r3
 8006666:	d358      	bcc.n	800671a <dir_next+0x154>
#if !_FS_READONLY
					if (!stretch) {								/* If no stretch, report EOT */
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <dir_next+0xb2>
						dp->sect = 0; return FR_NO_FILE;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	2200      	movs	r2, #0
 8006672:	61da      	str	r2, [r3, #28]
 8006674:	2304      	movs	r3, #4
 8006676:	e067      	b.n	8006748 <dir_next+0x182>
					}
					clst = create_chain(&dp->obj, dp->clust);	/* Allocate a cluster */
 8006678:	687a      	ldr	r2, [r7, #4]
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	699b      	ldr	r3, [r3, #24]
 800667e:	4619      	mov	r1, r3
 8006680:	4610      	mov	r0, r2
 8006682:	f7ff fe8d 	bl	80063a0 <create_chain>
 8006686:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <dir_next+0xcc>
 800668e:	2307      	movs	r3, #7
 8006690:	e05a      	b.n	8006748 <dir_next+0x182>
					if (clst == 1) return FR_INT_ERR;			/* Internal error */
 8006692:	697b      	ldr	r3, [r7, #20]
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <dir_next+0xd6>
 8006698:	2302      	movs	r3, #2
 800669a:	e055      	b.n	8006748 <dir_next+0x182>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800669c:	697b      	ldr	r3, [r7, #20]
 800669e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066a2:	d101      	bne.n	80066a8 <dir_next+0xe2>
 80066a4:	2301      	movs	r3, #1
 80066a6:	e04f      	b.n	8006748 <dir_next+0x182>
					/* Clean-up the stretched table */
					if (_FS_EXFAT) dp->obj.stat |= 4;			/* The directory needs to be updated */
					if (sync_window(fs) != FR_OK) return FR_DISK_ERR;	/* Flush disk access window */
 80066a8:	68f8      	ldr	r0, [r7, #12]
 80066aa:	f7ff fb89 	bl	8005dc0 <sync_window>
 80066ae:	4603      	mov	r3, r0
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d001      	beq.n	80066b8 <dir_next+0xf2>
 80066b4:	2301      	movs	r3, #1
 80066b6:	e047      	b.n	8006748 <dir_next+0x182>
					mem_set(fs->win, 0, SS(fs));				/* Clear window buffer */
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	3334      	adds	r3, #52	; 0x34
 80066bc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066c0:	2100      	movs	r1, #0
 80066c2:	4618      	mov	r0, r3
 80066c4:	f7ff f9b3 	bl	8005a2e <mem_set>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066c8:	2300      	movs	r3, #0
 80066ca:	613b      	str	r3, [r7, #16]
 80066cc:	6979      	ldr	r1, [r7, #20]
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff fc56 	bl	8005f80 <clust2sect>
 80066d4:	4602      	mov	r2, r0
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	631a      	str	r2, [r3, #48]	; 0x30
 80066da:	e012      	b.n	8006702 <dir_next+0x13c>
						fs->wflag = 1;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2201      	movs	r2, #1
 80066e0:	70da      	strb	r2, [r3, #3]
						if (sync_window(fs) != FR_OK) return FR_DISK_ERR;
 80066e2:	68f8      	ldr	r0, [r7, #12]
 80066e4:	f7ff fb6c 	bl	8005dc0 <sync_window>
 80066e8:	4603      	mov	r3, r0
 80066ea:	2b00      	cmp	r3, #0
 80066ec:	d001      	beq.n	80066f2 <dir_next+0x12c>
 80066ee:	2301      	movs	r3, #1
 80066f0:	e02a      	b.n	8006748 <dir_next+0x182>
					for (n = 0, fs->winsect = clust2sect(fs, clst); n < fs->csize; n++, fs->winsect++) {	/* Fill the new cluster with 0 */
 80066f2:	693b      	ldr	r3, [r7, #16]
 80066f4:	3301      	adds	r3, #1
 80066f6:	613b      	str	r3, [r7, #16]
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066fc:	1c5a      	adds	r2, r3, #1
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	631a      	str	r2, [r3, #48]	; 0x30
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	895b      	ldrh	r3, [r3, #10]
 8006706:	461a      	mov	r2, r3
 8006708:	693b      	ldr	r3, [r7, #16]
 800670a:	4293      	cmp	r3, r2
 800670c:	d3e6      	bcc.n	80066dc <dir_next+0x116>
					}
					fs->winsect -= n;							/* Restore window offset */
 800670e:	68fb      	ldr	r3, [r7, #12]
 8006710:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006712:	693b      	ldr	r3, [r7, #16]
 8006714:	1ad2      	subs	r2, r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) dp->sect = 0;					/* (this line is to suppress compiler warning) */
					dp->sect = 0; return FR_NO_FILE;			/* Report EOT */
#endif
				}
				dp->clust = clst;		/* Initialize data for new cluster */
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	619a      	str	r2, [r3, #24]
				dp->sect = clust2sect(fs, clst);
 8006720:	6979      	ldr	r1, [r7, #20]
 8006722:	68f8      	ldr	r0, [r7, #12]
 8006724:	f7ff fc2c 	bl	8005f80 <clust2sect>
 8006728:	4602      	mov	r2, r0
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	61da      	str	r2, [r3, #28]
			}
		}
	}
	dp->dptr = ofs;						/* Current entry */
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	68ba      	ldr	r2, [r7, #8]
 8006732:	615a      	str	r2, [r3, #20]
	dp->dir = fs->win + ofs % SS(fs);	/* Pointer to the entry in the win[] */
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	f103 0234 	add.w	r2, r3, #52	; 0x34
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006740:	441a      	add	r2, r3
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	621a      	str	r2, [r3, #32]

	return FR_OK;
 8006746:	2300      	movs	r3, #0
}
 8006748:	4618      	mov	r0, r3
 800674a:	3718      	adds	r7, #24
 800674c:	46bd      	mov	sp, r7
 800674e:	bd80      	pop	{r7, pc}

08006750 <dir_alloc>:
static
FRESULT dir_alloc (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp,		/* Pointer to the directory object */
	UINT nent		/* Number of contiguous entries to allocate */
)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	b086      	sub	sp, #24
 8006754:	af00      	add	r7, sp, #0
 8006756:	6078      	str	r0, [r7, #4]
 8006758:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;
	FATFS *fs = dp->obj.fs;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	60fb      	str	r3, [r7, #12]


	res = dir_sdi(dp, 0);
 8006760:	2100      	movs	r1, #0
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f7ff feb4 	bl	80064d0 <dir_sdi>
 8006768:	4603      	mov	r3, r0
 800676a:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 800676c:	7dfb      	ldrb	r3, [r7, #23]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d12b      	bne.n	80067ca <dir_alloc+0x7a>
		n = 0;
 8006772:	2300      	movs	r3, #0
 8006774:	613b      	str	r3, [r7, #16]
		do {
			res = move_window(fs, dp->sect);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	4619      	mov	r1, r3
 800677c:	68f8      	ldr	r0, [r7, #12]
 800677e:	f7ff fb63 	bl	8005e48 <move_window>
 8006782:	4603      	mov	r3, r0
 8006784:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 8006786:	7dfb      	ldrb	r3, [r7, #23]
 8006788:	2b00      	cmp	r3, #0
 800678a:	d11d      	bne.n	80067c8 <dir_alloc+0x78>
#if _FS_EXFAT
			if ((fs->fs_type == FS_EXFAT) ? (int)((dp->dir[XDIR_Type] & 0x80) == 0) : (int)(dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0)) {
#else
			if (dp->dir[DIR_Name] == DDEM || dp->dir[DIR_Name] == 0) {
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	6a1b      	ldr	r3, [r3, #32]
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	2be5      	cmp	r3, #229	; 0xe5
 8006794:	d004      	beq.n	80067a0 <dir_alloc+0x50>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6a1b      	ldr	r3, [r3, #32]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d107      	bne.n	80067b0 <dir_alloc+0x60>
#endif
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80067a0:	693b      	ldr	r3, [r7, #16]
 80067a2:	3301      	adds	r3, #1
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	683b      	ldr	r3, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d102      	bne.n	80067b4 <dir_alloc+0x64>
 80067ae:	e00c      	b.n	80067ca <dir_alloc+0x7a>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80067b0:	2300      	movs	r3, #0
 80067b2:	613b      	str	r3, [r7, #16]
			}
			res = dir_next(dp, 1);
 80067b4:	2101      	movs	r1, #1
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7ff ff05 	bl	80065c6 <dir_next>
 80067bc:	4603      	mov	r3, r0
 80067be:	75fb      	strb	r3, [r7, #23]
		} while (res == FR_OK);	/* Next entry with table stretch enabled */
 80067c0:	7dfb      	ldrb	r3, [r7, #23]
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d0d7      	beq.n	8006776 <dir_alloc+0x26>
 80067c6:	e000      	b.n	80067ca <dir_alloc+0x7a>
			if (res != FR_OK) break;
 80067c8:	bf00      	nop
	}

	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 80067ca:	7dfb      	ldrb	r3, [r7, #23]
 80067cc:	2b04      	cmp	r3, #4
 80067ce:	d101      	bne.n	80067d4 <dir_alloc+0x84>
 80067d0:	2307      	movs	r3, #7
 80067d2:	75fb      	strb	r3, [r7, #23]
	return res;
 80067d4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067d6:	4618      	mov	r0, r3
 80067d8:	3718      	adds	r7, #24
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}

080067de <ld_clust>:
static
DWORD ld_clust (	/* Returns the top cluster value of the SFN entry */
	FATFS* fs,		/* Pointer to the fs object */
	const BYTE* dir	/* Pointer to the key entry */
)
{
 80067de:	b580      	push	{r7, lr}
 80067e0:	b084      	sub	sp, #16
 80067e2:	af00      	add	r7, sp, #0
 80067e4:	6078      	str	r0, [r7, #4]
 80067e6:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = ld_word(dir + DIR_FstClusLO);
 80067e8:	683b      	ldr	r3, [r7, #0]
 80067ea:	331a      	adds	r3, #26
 80067ec:	4618      	mov	r0, r3
 80067ee:	f7ff f87b 	bl	80058e8 <ld_word>
 80067f2:	4603      	mov	r3, r0
 80067f4:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32) {
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	2b03      	cmp	r3, #3
 80067fc:	d109      	bne.n	8006812 <ld_clust+0x34>
		cl |= (DWORD)ld_word(dir + DIR_FstClusHI) << 16;
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	3314      	adds	r3, #20
 8006802:	4618      	mov	r0, r3
 8006804:	f7ff f870 	bl	80058e8 <ld_word>
 8006808:	4603      	mov	r3, r0
 800680a:	041b      	lsls	r3, r3, #16
 800680c:	68fa      	ldr	r2, [r7, #12]
 800680e:	4313      	orrs	r3, r2
 8006810:	60fb      	str	r3, [r7, #12]
	}

	return cl;
 8006812:	68fb      	ldr	r3, [r7, #12]
}
 8006814:	4618      	mov	r0, r3
 8006816:	3710      	adds	r7, #16
 8006818:	46bd      	mov	sp, r7
 800681a:	bd80      	pop	{r7, pc}

0800681c <st_clust>:
void st_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir,	/* Pointer to the key entry */
	DWORD cl	/* Value to be set */
)
{
 800681c:	b580      	push	{r7, lr}
 800681e:	b084      	sub	sp, #16
 8006820:	af00      	add	r7, sp, #0
 8006822:	60f8      	str	r0, [r7, #12]
 8006824:	60b9      	str	r1, [r7, #8]
 8006826:	607a      	str	r2, [r7, #4]
	st_word(dir + DIR_FstClusLO, (WORD)cl);
 8006828:	68bb      	ldr	r3, [r7, #8]
 800682a:	331a      	adds	r3, #26
 800682c:	687a      	ldr	r2, [r7, #4]
 800682e:	b292      	uxth	r2, r2
 8006830:	4611      	mov	r1, r2
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff f893 	bl	800595e <st_word>
	if (fs->fs_type == FS_FAT32) {
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	781b      	ldrb	r3, [r3, #0]
 800683c:	2b03      	cmp	r3, #3
 800683e:	d109      	bne.n	8006854 <st_clust+0x38>
		st_word(dir + DIR_FstClusHI, (WORD)(cl >> 16));
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	f103 0214 	add.w	r2, r3, #20
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	0c1b      	lsrs	r3, r3, #16
 800684a:	b29b      	uxth	r3, r3
 800684c:	4619      	mov	r1, r3
 800684e:	4610      	mov	r0, r2
 8006850:	f7ff f885 	bl	800595e <st_word>
	}
}
 8006854:	bf00      	nop
 8006856:	3710      	adds	r7, #16
 8006858:	46bd      	mov	sp, r7
 800685a:	bd80      	pop	{r7, pc}

0800685c <cmp_lfn>:
static
int cmp_lfn (				/* 1:matched, 0:not matched */
	const WCHAR* lfnbuf,	/* Pointer to the LFN working buffer to be compared */
	BYTE* dir				/* Pointer to the directory entry containing the part of LFN */
)
{
 800685c:	b590      	push	{r4, r7, lr}
 800685e:	b087      	sub	sp, #28
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	6039      	str	r1, [r7, #0]
	UINT i, s;
	WCHAR wc, uc;


	if (ld_word(dir + LDIR_FstClusLO) != 0) return 0;	/* Check LDIR_FstClusLO */
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	331a      	adds	r3, #26
 800686a:	4618      	mov	r0, r3
 800686c:	f7ff f83c 	bl	80058e8 <ld_word>
 8006870:	4603      	mov	r3, r0
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <cmp_lfn+0x1e>
 8006876:	2300      	movs	r3, #0
 8006878:	e059      	b.n	800692e <cmp_lfn+0xd2>

	i = ((dir[LDIR_Ord] & 0x3F) - 1) * 13;	/* Offset in the LFN buffer */
 800687a:	683b      	ldr	r3, [r7, #0]
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006882:	1e5a      	subs	r2, r3, #1
 8006884:	4613      	mov	r3, r2
 8006886:	005b      	lsls	r3, r3, #1
 8006888:	4413      	add	r3, r2
 800688a:	009b      	lsls	r3, r3, #2
 800688c:	4413      	add	r3, r2
 800688e:	617b      	str	r3, [r7, #20]

	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 8006890:	2301      	movs	r3, #1
 8006892:	81fb      	strh	r3, [r7, #14]
 8006894:	2300      	movs	r3, #0
 8006896:	613b      	str	r3, [r7, #16]
 8006898:	e033      	b.n	8006902 <cmp_lfn+0xa6>
		uc = ld_word(dir + LfnOfs[s]);		/* Pick an LFN character */
 800689a:	4a27      	ldr	r2, [pc, #156]	; (8006938 <cmp_lfn+0xdc>)
 800689c:	693b      	ldr	r3, [r7, #16]
 800689e:	4413      	add	r3, r2
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	461a      	mov	r2, r3
 80068a4:	683b      	ldr	r3, [r7, #0]
 80068a6:	4413      	add	r3, r2
 80068a8:	4618      	mov	r0, r3
 80068aa:	f7ff f81d 	bl	80058e8 <ld_word>
 80068ae:	4603      	mov	r3, r0
 80068b0:	81bb      	strh	r3, [r7, #12]
		if (wc) {
 80068b2:	89fb      	ldrh	r3, [r7, #14]
 80068b4:	2b00      	cmp	r3, #0
 80068b6:	d01a      	beq.n	80068ee <cmp_lfn+0x92>
			if (i >= _MAX_LFN || ff_wtoupper(uc) != ff_wtoupper(lfnbuf[i++])) {	/* Compare it */
 80068b8:	697b      	ldr	r3, [r7, #20]
 80068ba:	2bfe      	cmp	r3, #254	; 0xfe
 80068bc:	d812      	bhi.n	80068e4 <cmp_lfn+0x88>
 80068be:	89bb      	ldrh	r3, [r7, #12]
 80068c0:	4618      	mov	r0, r3
 80068c2:	f001 fb9d 	bl	8008000 <ff_wtoupper>
 80068c6:	4603      	mov	r3, r0
 80068c8:	461c      	mov	r4, r3
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	1c5a      	adds	r2, r3, #1
 80068ce:	617a      	str	r2, [r7, #20]
 80068d0:	005b      	lsls	r3, r3, #1
 80068d2:	687a      	ldr	r2, [r7, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	881b      	ldrh	r3, [r3, #0]
 80068d8:	4618      	mov	r0, r3
 80068da:	f001 fb91 	bl	8008000 <ff_wtoupper>
 80068de:	4603      	mov	r3, r0
 80068e0:	429c      	cmp	r4, r3
 80068e2:	d001      	beq.n	80068e8 <cmp_lfn+0x8c>
				return 0;					/* Not matched */
 80068e4:	2300      	movs	r3, #0
 80068e6:	e022      	b.n	800692e <cmp_lfn+0xd2>
			}
			wc = uc;
 80068e8:	89bb      	ldrh	r3, [r7, #12]
 80068ea:	81fb      	strh	r3, [r7, #14]
 80068ec:	e006      	b.n	80068fc <cmp_lfn+0xa0>
		} else {
			if (uc != 0xFFFF) return 0;		/* Check filler */
 80068ee:	89bb      	ldrh	r3, [r7, #12]
 80068f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80068f4:	4293      	cmp	r3, r2
 80068f6:	d001      	beq.n	80068fc <cmp_lfn+0xa0>
 80068f8:	2300      	movs	r3, #0
 80068fa:	e018      	b.n	800692e <cmp_lfn+0xd2>
	for (wc = 1, s = 0; s < 13; s++) {		/* Process all characters in the entry */
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	3301      	adds	r3, #1
 8006900:	613b      	str	r3, [r7, #16]
 8006902:	693b      	ldr	r3, [r7, #16]
 8006904:	2b0c      	cmp	r3, #12
 8006906:	d9c8      	bls.n	800689a <cmp_lfn+0x3e>
		}
	}

	if ((dir[LDIR_Ord] & LLEF) && wc && lfnbuf[i]) return 0;	/* Last segment matched but different length */
 8006908:	683b      	ldr	r3, [r7, #0]
 800690a:	781b      	ldrb	r3, [r3, #0]
 800690c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006910:	2b00      	cmp	r3, #0
 8006912:	d00b      	beq.n	800692c <cmp_lfn+0xd0>
 8006914:	89fb      	ldrh	r3, [r7, #14]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d008      	beq.n	800692c <cmp_lfn+0xd0>
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	005b      	lsls	r3, r3, #1
 800691e:	687a      	ldr	r2, [r7, #4]
 8006920:	4413      	add	r3, r2
 8006922:	881b      	ldrh	r3, [r3, #0]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d001      	beq.n	800692c <cmp_lfn+0xd0>
 8006928:	2300      	movs	r3, #0
 800692a:	e000      	b.n	800692e <cmp_lfn+0xd2>

	return 1;		/* The part of LFN matched */
 800692c:	2301      	movs	r3, #1
}
 800692e:	4618      	mov	r0, r3
 8006930:	371c      	adds	r7, #28
 8006932:	46bd      	mov	sp, r7
 8006934:	bd90      	pop	{r4, r7, pc}
 8006936:	bf00      	nop
 8006938:	080082c4 	.word	0x080082c4

0800693c <put_lfn>:
	const WCHAR* lfn,	/* Pointer to the LFN */
	BYTE* dir,			/* Pointer to the LFN entry to be created */
	BYTE ord,			/* LFN order (1-20) */
	BYTE sum			/* Checksum of the corresponding SFN */
)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b088      	sub	sp, #32
 8006940:	af00      	add	r7, sp, #0
 8006942:	60f8      	str	r0, [r7, #12]
 8006944:	60b9      	str	r1, [r7, #8]
 8006946:	4611      	mov	r1, r2
 8006948:	461a      	mov	r2, r3
 800694a:	460b      	mov	r3, r1
 800694c:	71fb      	strb	r3, [r7, #7]
 800694e:	4613      	mov	r3, r2
 8006950:	71bb      	strb	r3, [r7, #6]
	UINT i, s;
	WCHAR wc;


	dir[LDIR_Chksum] = sum;			/* Set checksum */
 8006952:	68bb      	ldr	r3, [r7, #8]
 8006954:	330d      	adds	r3, #13
 8006956:	79ba      	ldrb	r2, [r7, #6]
 8006958:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Attr] = AM_LFN;		/* Set attribute. LFN entry */
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	330b      	adds	r3, #11
 800695e:	220f      	movs	r2, #15
 8006960:	701a      	strb	r2, [r3, #0]
	dir[LDIR_Type] = 0;
 8006962:	68bb      	ldr	r3, [r7, #8]
 8006964:	330c      	adds	r3, #12
 8006966:	2200      	movs	r2, #0
 8006968:	701a      	strb	r2, [r3, #0]
	st_word(dir + LDIR_FstClusLO, 0);
 800696a:	68bb      	ldr	r3, [r7, #8]
 800696c:	331a      	adds	r3, #26
 800696e:	2100      	movs	r1, #0
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fff4 	bl	800595e <st_word>

	i = (ord - 1) * 13;				/* Get offset in the LFN working buffer */
 8006976:	79fb      	ldrb	r3, [r7, #7]
 8006978:	1e5a      	subs	r2, r3, #1
 800697a:	4613      	mov	r3, r2
 800697c:	005b      	lsls	r3, r3, #1
 800697e:	4413      	add	r3, r2
 8006980:	009b      	lsls	r3, r3, #2
 8006982:	4413      	add	r3, r2
 8006984:	61fb      	str	r3, [r7, #28]
	s = wc = 0;
 8006986:	2300      	movs	r3, #0
 8006988:	82fb      	strh	r3, [r7, #22]
 800698a:	2300      	movs	r3, #0
 800698c:	61bb      	str	r3, [r7, #24]
	do {
		if (wc != 0xFFFF) wc = lfn[i++];	/* Get an effective character */
 800698e:	8afb      	ldrh	r3, [r7, #22]
 8006990:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8006994:	4293      	cmp	r3, r2
 8006996:	d007      	beq.n	80069a8 <put_lfn+0x6c>
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	1c5a      	adds	r2, r3, #1
 800699c:	61fa      	str	r2, [r7, #28]
 800699e:	005b      	lsls	r3, r3, #1
 80069a0:	68fa      	ldr	r2, [r7, #12]
 80069a2:	4413      	add	r3, r2
 80069a4:	881b      	ldrh	r3, [r3, #0]
 80069a6:	82fb      	strh	r3, [r7, #22]
		st_word(dir + LfnOfs[s], wc);		/* Put it */
 80069a8:	4a17      	ldr	r2, [pc, #92]	; (8006a08 <put_lfn+0xcc>)
 80069aa:	69bb      	ldr	r3, [r7, #24]
 80069ac:	4413      	add	r3, r2
 80069ae:	781b      	ldrb	r3, [r3, #0]
 80069b0:	461a      	mov	r2, r3
 80069b2:	68bb      	ldr	r3, [r7, #8]
 80069b4:	4413      	add	r3, r2
 80069b6:	8afa      	ldrh	r2, [r7, #22]
 80069b8:	4611      	mov	r1, r2
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe ffcf 	bl	800595e <st_word>
		if (wc == 0) wc = 0xFFFF;		/* Padding characters for left locations */
 80069c0:	8afb      	ldrh	r3, [r7, #22]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d102      	bne.n	80069cc <put_lfn+0x90>
 80069c6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80069ca:	82fb      	strh	r3, [r7, #22]
	} while (++s < 13);
 80069cc:	69bb      	ldr	r3, [r7, #24]
 80069ce:	3301      	adds	r3, #1
 80069d0:	61bb      	str	r3, [r7, #24]
 80069d2:	69bb      	ldr	r3, [r7, #24]
 80069d4:	2b0c      	cmp	r3, #12
 80069d6:	d9da      	bls.n	800698e <put_lfn+0x52>
	if (wc == 0xFFFF || !lfn[i]) ord |= LLEF;	/* Last LFN part is the start of LFN sequence */
 80069d8:	8afb      	ldrh	r3, [r7, #22]
 80069da:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80069de:	4293      	cmp	r3, r2
 80069e0:	d006      	beq.n	80069f0 <put_lfn+0xb4>
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	005b      	lsls	r3, r3, #1
 80069e6:	68fa      	ldr	r2, [r7, #12]
 80069e8:	4413      	add	r3, r2
 80069ea:	881b      	ldrh	r3, [r3, #0]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d103      	bne.n	80069f8 <put_lfn+0xbc>
 80069f0:	79fb      	ldrb	r3, [r7, #7]
 80069f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f6:	71fb      	strb	r3, [r7, #7]
	dir[LDIR_Ord] = ord;			/* Set the LFN order */
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	79fa      	ldrb	r2, [r7, #7]
 80069fc:	701a      	strb	r2, [r3, #0]
}
 80069fe:	bf00      	nop
 8006a00:	3720      	adds	r7, #32
 8006a02:	46bd      	mov	sp, r7
 8006a04:	bd80      	pop	{r7, pc}
 8006a06:	bf00      	nop
 8006a08:	080082c4 	.word	0x080082c4

08006a0c <gen_numname>:
	BYTE* dst,			/* Pointer to the buffer to store numbered SFN */
	const BYTE* src,	/* Pointer to SFN */
	const WCHAR* lfn,	/* Pointer to LFN */
	UINT seq			/* Sequence number */
)
{
 8006a0c:	b580      	push	{r7, lr}
 8006a0e:	b08c      	sub	sp, #48	; 0x30
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	60f8      	str	r0, [r7, #12]
 8006a14:	60b9      	str	r1, [r7, #8]
 8006a16:	607a      	str	r2, [r7, #4]
 8006a18:	603b      	str	r3, [r7, #0]
	UINT i, j;
	WCHAR wc;
	DWORD sr;


	mem_cpy(dst, src, 11);
 8006a1a:	220b      	movs	r2, #11
 8006a1c:	68b9      	ldr	r1, [r7, #8]
 8006a1e:	68f8      	ldr	r0, [r7, #12]
 8006a20:	f7fe ffe4 	bl	80059ec <mem_cpy>

	if (seq > 5) {	/* In case of many collisions, generate a hash number instead of sequential number */
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	2b05      	cmp	r3, #5
 8006a28:	d929      	bls.n	8006a7e <gen_numname+0x72>
		sr = seq;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	61fb      	str	r3, [r7, #28]
		while (*lfn) {	/* Create a CRC */
 8006a2e:	e020      	b.n	8006a72 <gen_numname+0x66>
			wc = *lfn++;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	1c9a      	adds	r2, r3, #2
 8006a34:	607a      	str	r2, [r7, #4]
 8006a36:	881b      	ldrh	r3, [r3, #0]
 8006a38:	847b      	strh	r3, [r7, #34]	; 0x22
			for (i = 0; i < 16; i++) {
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a3e:	e015      	b.n	8006a6c <gen_numname+0x60>
				sr = (sr << 1) + (wc & 1);
 8006a40:	69fb      	ldr	r3, [r7, #28]
 8006a42:	005a      	lsls	r2, r3, #1
 8006a44:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a46:	f003 0301 	and.w	r3, r3, #1
 8006a4a:	4413      	add	r3, r2
 8006a4c:	61fb      	str	r3, [r7, #28]
				wc >>= 1;
 8006a4e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8006a50:	085b      	lsrs	r3, r3, #1
 8006a52:	847b      	strh	r3, [r7, #34]	; 0x22
				if (sr & 0x10000) sr ^= 0x11021;
 8006a54:	69fb      	ldr	r3, [r7, #28]
 8006a56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d003      	beq.n	8006a66 <gen_numname+0x5a>
 8006a5e:	69fa      	ldr	r2, [r7, #28]
 8006a60:	4b31      	ldr	r3, [pc, #196]	; (8006b28 <gen_numname+0x11c>)
 8006a62:	4053      	eors	r3, r2
 8006a64:	61fb      	str	r3, [r7, #28]
			for (i = 0; i < 16; i++) {
 8006a66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a68:	3301      	adds	r3, #1
 8006a6a:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006a6e:	2b0f      	cmp	r3, #15
 8006a70:	d9e6      	bls.n	8006a40 <gen_numname+0x34>
		while (*lfn) {	/* Create a CRC */
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	881b      	ldrh	r3, [r3, #0]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d1da      	bne.n	8006a30 <gen_numname+0x24>
			}
		}
		seq = (UINT)sr;
 8006a7a:	69fb      	ldr	r3, [r7, #28]
 8006a7c:	603b      	str	r3, [r7, #0]
	}

	/* itoa (hexdecimal) */
	i = 7;
 8006a7e:	2307      	movs	r3, #7
 8006a80:	62bb      	str	r3, [r7, #40]	; 0x28
	do {
		c = (BYTE)((seq % 16) + '0');
 8006a82:	683b      	ldr	r3, [r7, #0]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	f003 030f 	and.w	r3, r3, #15
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	3330      	adds	r3, #48	; 0x30
 8006a8e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (c > '9') c += 7;
 8006a92:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a96:	2b39      	cmp	r3, #57	; 0x39
 8006a98:	d904      	bls.n	8006aa4 <gen_numname+0x98>
 8006a9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006a9e:	3307      	adds	r3, #7
 8006aa0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		ns[i--] = c;
 8006aa4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aa6:	1e5a      	subs	r2, r3, #1
 8006aa8:	62ba      	str	r2, [r7, #40]	; 0x28
 8006aaa:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006aae:	4413      	add	r3, r2
 8006ab0:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006ab4:	f803 2c1c 	strb.w	r2, [r3, #-28]
		seq /= 16;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	091b      	lsrs	r3, r3, #4
 8006abc:	603b      	str	r3, [r7, #0]
	} while (seq);
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	2b00      	cmp	r3, #0
 8006ac2:	d1de      	bne.n	8006a82 <gen_numname+0x76>
	ns[i] = '~';
 8006ac4:	f107 0214 	add.w	r2, r7, #20
 8006ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aca:	4413      	add	r3, r2
 8006acc:	227e      	movs	r2, #126	; 0x7e
 8006ace:	701a      	strb	r2, [r3, #0]

	/* Append the number */
	for (j = 0; j < i && dst[j] != ' '; j++) {
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	627b      	str	r3, [r7, #36]	; 0x24
 8006ad4:	e002      	b.n	8006adc <gen_numname+0xd0>
 8006ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ad8:	3301      	adds	r3, #1
 8006ada:	627b      	str	r3, [r7, #36]	; 0x24
 8006adc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ae0:	429a      	cmp	r2, r3
 8006ae2:	d205      	bcs.n	8006af0 <gen_numname+0xe4>
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae8:	4413      	add	r3, r2
 8006aea:	781b      	ldrb	r3, [r3, #0]
 8006aec:	2b20      	cmp	r3, #32
 8006aee:	d1f2      	bne.n	8006ad6 <gen_numname+0xca>
			if (j == i - 1) break;
			j++;
		}
	}
	do {
		dst[j++] = (i < 8) ? ns[i++] : ' ';
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	2b07      	cmp	r3, #7
 8006af4:	d808      	bhi.n	8006b08 <gen_numname+0xfc>
 8006af6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af8:	1c5a      	adds	r2, r3, #1
 8006afa:	62ba      	str	r2, [r7, #40]	; 0x28
 8006afc:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8006b00:	4413      	add	r3, r2
 8006b02:	f813 1c1c 	ldrb.w	r1, [r3, #-28]
 8006b06:	e000      	b.n	8006b0a <gen_numname+0xfe>
 8006b08:	2120      	movs	r1, #32
 8006b0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b0c:	1c5a      	adds	r2, r3, #1
 8006b0e:	627a      	str	r2, [r7, #36]	; 0x24
 8006b10:	68fa      	ldr	r2, [r7, #12]
 8006b12:	4413      	add	r3, r2
 8006b14:	460a      	mov	r2, r1
 8006b16:	701a      	strb	r2, [r3, #0]
	} while (j < 8);
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	2b07      	cmp	r3, #7
 8006b1c:	d9e8      	bls.n	8006af0 <gen_numname+0xe4>
}
 8006b1e:	bf00      	nop
 8006b20:	3730      	adds	r7, #48	; 0x30
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	00011021 	.word	0x00011021

08006b2c <sum_sfn>:

static
BYTE sum_sfn (
	const BYTE* dir		/* Pointer to the SFN entry */
)
{
 8006b2c:	b480      	push	{r7}
 8006b2e:	b085      	sub	sp, #20
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	6078      	str	r0, [r7, #4]
	BYTE sum = 0;
 8006b34:	2300      	movs	r3, #0
 8006b36:	73fb      	strb	r3, [r7, #15]
	UINT n = 11;
 8006b38:	230b      	movs	r3, #11
 8006b3a:	60bb      	str	r3, [r7, #8]

	do {
		sum = (sum >> 1) + (sum << 7) + *dir++;
 8006b3c:	7bfb      	ldrb	r3, [r7, #15]
 8006b3e:	b2da      	uxtb	r2, r3
 8006b40:	0852      	lsrs	r2, r2, #1
 8006b42:	01db      	lsls	r3, r3, #7
 8006b44:	4313      	orrs	r3, r2
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	1c59      	adds	r1, r3, #1
 8006b4c:	6079      	str	r1, [r7, #4]
 8006b4e:	781b      	ldrb	r3, [r3, #0]
 8006b50:	4413      	add	r3, r2
 8006b52:	73fb      	strb	r3, [r7, #15]
	} while (--n);
 8006b54:	68bb      	ldr	r3, [r7, #8]
 8006b56:	3b01      	subs	r3, #1
 8006b58:	60bb      	str	r3, [r7, #8]
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d1ed      	bne.n	8006b3c <sum_sfn+0x10>
	return sum;
 8006b60:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b62:	4618      	mov	r0, r3
 8006b64:	3714      	adds	r7, #20
 8006b66:	46bd      	mov	sp, r7
 8006b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b6c:	4770      	bx	lr

08006b6e <dir_find>:

static
FRESULT dir_find (	/* FR_OK(0):succeeded, !=0:error */
	DIR* dp			/* Pointer to the directory object with the file name */
)
{
 8006b6e:	b580      	push	{r7, lr}
 8006b70:	b086      	sub	sp, #24
 8006b72:	af00      	add	r7, sp, #0
 8006b74:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	613b      	str	r3, [r7, #16]
	BYTE c;
#if _USE_LFN != 0
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8006b7c:	2100      	movs	r1, #0
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f7ff fca6 	bl	80064d0 <dir_sdi>
 8006b84:	4603      	mov	r3, r0
 8006b86:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8006b88:	7dfb      	ldrb	r3, [r7, #23]
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d001      	beq.n	8006b92 <dir_find+0x24>
 8006b8e:	7dfb      	ldrb	r3, [r7, #23]
 8006b90:	e0a9      	b.n	8006ce6 <dir_find+0x178>
		return res;
	}
#endif
	/* On the FAT12/16/32 volume */
#if _USE_LFN != 0
	ord = sum = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006b92:	23ff      	movs	r3, #255	; 0xff
 8006b94:	753b      	strb	r3, [r7, #20]
 8006b96:	7d3b      	ldrb	r3, [r7, #20]
 8006b98:	757b      	strb	r3, [r7, #21]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	f04f 32ff 	mov.w	r2, #4294967295
 8006ba0:	631a      	str	r2, [r3, #48]	; 0x30
#endif
	do {
		res = move_window(fs, dp->sect);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	69db      	ldr	r3, [r3, #28]
 8006ba6:	4619      	mov	r1, r3
 8006ba8:	6938      	ldr	r0, [r7, #16]
 8006baa:	f7ff f94d 	bl	8005e48 <move_window>
 8006bae:	4603      	mov	r3, r0
 8006bb0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8006bb2:	7dfb      	ldrb	r3, [r7, #23]
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	f040 8090 	bne.w	8006cda <dir_find+0x16c>
		c = dp->dir[DIR_Name];
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	781b      	ldrb	r3, [r3, #0]
 8006bc0:	75bb      	strb	r3, [r7, #22]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8006bc2:	7dbb      	ldrb	r3, [r7, #22]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d102      	bne.n	8006bce <dir_find+0x60>
 8006bc8:	2304      	movs	r3, #4
 8006bca:	75fb      	strb	r3, [r7, #23]
 8006bcc:	e08a      	b.n	8006ce4 <dir_find+0x176>
#if _USE_LFN != 0	/* LFN configuration */
		dp->obj.attr = a = dp->dir[DIR_Attr] & AM_MASK;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a1b      	ldr	r3, [r3, #32]
 8006bd2:	330b      	adds	r3, #11
 8006bd4:	781b      	ldrb	r3, [r3, #0]
 8006bd6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006bda:	73fb      	strb	r3, [r7, #15]
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7bfa      	ldrb	r2, [r7, #15]
 8006be0:	719a      	strb	r2, [r3, #6]
		if (c == DDEM || ((a & AM_VOL) && a != AM_LFN)) {	/* An entry without valid data */
 8006be2:	7dbb      	ldrb	r3, [r7, #22]
 8006be4:	2be5      	cmp	r3, #229	; 0xe5
 8006be6:	d007      	beq.n	8006bf8 <dir_find+0x8a>
 8006be8:	7bfb      	ldrb	r3, [r7, #15]
 8006bea:	f003 0308 	and.w	r3, r3, #8
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d009      	beq.n	8006c06 <dir_find+0x98>
 8006bf2:	7bfb      	ldrb	r3, [r7, #15]
 8006bf4:	2b0f      	cmp	r3, #15
 8006bf6:	d006      	beq.n	8006c06 <dir_find+0x98>
			ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006bf8:	23ff      	movs	r3, #255	; 0xff
 8006bfa:	757b      	strb	r3, [r7, #21]
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f04f 32ff 	mov.w	r2, #4294967295
 8006c02:	631a      	str	r2, [r3, #48]	; 0x30
 8006c04:	e05e      	b.n	8006cc4 <dir_find+0x156>
		} else {
			if (a == AM_LFN) {			/* An LFN entry is found */
 8006c06:	7bfb      	ldrb	r3, [r7, #15]
 8006c08:	2b0f      	cmp	r3, #15
 8006c0a:	d136      	bne.n	8006c7a <dir_find+0x10c>
				if (!(dp->fn[NSFLAG] & NS_NOLFN)) {
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d154      	bne.n	8006cc4 <dir_find+0x156>
					if (c & LLEF) {		/* Is it start of LFN sequence? */
 8006c1a:	7dbb      	ldrb	r3, [r7, #22]
 8006c1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d00d      	beq.n	8006c40 <dir_find+0xd2>
						sum = dp->dir[LDIR_Chksum];
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
 8006c28:	7b5b      	ldrb	r3, [r3, #13]
 8006c2a:	753b      	strb	r3, [r7, #20]
						c &= (BYTE)~LLEF; ord = c;	/* LFN start order */
 8006c2c:	7dbb      	ldrb	r3, [r7, #22]
 8006c2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c32:	75bb      	strb	r3, [r7, #22]
 8006c34:	7dbb      	ldrb	r3, [r7, #22]
 8006c36:	757b      	strb	r3, [r7, #21]
						dp->blk_ofs = dp->dptr;	/* Start offset of LFN */
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	695a      	ldr	r2, [r3, #20]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	631a      	str	r2, [r3, #48]	; 0x30
					}
					/* Check validity of the LFN entry and compare it with given name */
					ord = (c == ord && sum == dp->dir[LDIR_Chksum] && cmp_lfn(fs->lfnbuf, dp->dir)) ? ord - 1 : 0xFF;
 8006c40:	7dba      	ldrb	r2, [r7, #22]
 8006c42:	7d7b      	ldrb	r3, [r7, #21]
 8006c44:	429a      	cmp	r2, r3
 8006c46:	d115      	bne.n	8006c74 <dir_find+0x106>
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	6a1b      	ldr	r3, [r3, #32]
 8006c4c:	330d      	adds	r3, #13
 8006c4e:	781b      	ldrb	r3, [r3, #0]
 8006c50:	7d3a      	ldrb	r2, [r7, #20]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d10e      	bne.n	8006c74 <dir_find+0x106>
 8006c56:	693b      	ldr	r3, [r7, #16]
 8006c58:	68da      	ldr	r2, [r3, #12]
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6a1b      	ldr	r3, [r3, #32]
 8006c5e:	4619      	mov	r1, r3
 8006c60:	4610      	mov	r0, r2
 8006c62:	f7ff fdfb 	bl	800685c <cmp_lfn>
 8006c66:	4603      	mov	r3, r0
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d003      	beq.n	8006c74 <dir_find+0x106>
 8006c6c:	7d7b      	ldrb	r3, [r7, #21]
 8006c6e:	3b01      	subs	r3, #1
 8006c70:	b2db      	uxtb	r3, r3
 8006c72:	e000      	b.n	8006c76 <dir_find+0x108>
 8006c74:	23ff      	movs	r3, #255	; 0xff
 8006c76:	757b      	strb	r3, [r7, #21]
 8006c78:	e024      	b.n	8006cc4 <dir_find+0x156>
				}
			} else {					/* An SFN entry is found */
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006c7a:	7d7b      	ldrb	r3, [r7, #21]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d109      	bne.n	8006c94 <dir_find+0x126>
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a1b      	ldr	r3, [r3, #32]
 8006c84:	4618      	mov	r0, r3
 8006c86:	f7ff ff51 	bl	8006b2c <sum_sfn>
 8006c8a:	4603      	mov	r3, r0
 8006c8c:	461a      	mov	r2, r3
 8006c8e:	7d3b      	ldrb	r3, [r7, #20]
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d024      	beq.n	8006cde <dir_find+0x170>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006c9a:	f003 0301 	and.w	r3, r3, #1
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d10a      	bne.n	8006cb8 <dir_find+0x14a>
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a18      	ldr	r0, [r3, #32]
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	3324      	adds	r3, #36	; 0x24
 8006caa:	220b      	movs	r2, #11
 8006cac:	4619      	mov	r1, r3
 8006cae:	f7fe fed8 	bl	8005a62 <mem_cmp>
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d014      	beq.n	8006ce2 <dir_find+0x174>
				ord = 0xFF; dp->blk_ofs = 0xFFFFFFFF;	/* Reset LFN sequence */
 8006cb8:	23ff      	movs	r3, #255	; 0xff
 8006cba:	757b      	strb	r3, [r7, #21]
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	f04f 32ff 	mov.w	r2, #4294967295
 8006cc2:	631a      	str	r2, [r3, #48]	; 0x30
		}
#else		/* Non LFN configuration */
		dp->obj.attr = dp->dir[DIR_Attr] & AM_MASK;
		if (!(dp->dir[DIR_Attr] & AM_VOL) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* Is it a valid entry? */
#endif
		res = dir_next(dp, 0);	/* Next entry */
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f7ff fc7d 	bl	80065c6 <dir_next>
 8006ccc:	4603      	mov	r3, r0
 8006cce:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8006cd0:	7dfb      	ldrb	r3, [r7, #23]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	f43f af65 	beq.w	8006ba2 <dir_find+0x34>
 8006cd8:	e004      	b.n	8006ce4 <dir_find+0x176>
		if (res != FR_OK) break;
 8006cda:	bf00      	nop
 8006cdc:	e002      	b.n	8006ce4 <dir_find+0x176>
				if (!ord && sum == sum_sfn(dp->dir)) break;	/* LFN matched? */
 8006cde:	bf00      	nop
 8006ce0:	e000      	b.n	8006ce4 <dir_find+0x176>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dp->dir, dp->fn, 11)) break;	/* SFN matched? */
 8006ce2:	bf00      	nop

	return res;
 8006ce4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
	...

08006cf0 <dir_register>:

static
FRESULT dir_register (	/* FR_OK:succeeded, FR_DENIED:no free entry or too many SFN collision, FR_DISK_ERR:disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08c      	sub	sp, #48	; 0x30
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs = dp->obj.fs;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	61fb      	str	r3, [r7, #28]
#if _USE_LFN != 0	/* LFN configuration */
	UINT n, nlen, nent;
	BYTE sn[12], sum;


	if (dp->fn[NSFLAG] & (NS_DOT | NS_NONAME)) return FR_INVALID_NAME;	/* Check name validity */
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 8006d04:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <dir_register+0x20>
 8006d0c:	2306      	movs	r3, #6
 8006d0e:	e0e0      	b.n	8006ed2 <dir_register+0x1e2>
	for (nlen = 0; fs->lfnbuf[nlen]; nlen++) ;	/* Get lfn length */
 8006d10:	2300      	movs	r3, #0
 8006d12:	627b      	str	r3, [r7, #36]	; 0x24
 8006d14:	e002      	b.n	8006d1c <dir_register+0x2c>
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	3301      	adds	r3, #1
 8006d1a:	627b      	str	r3, [r7, #36]	; 0x24
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	68da      	ldr	r2, [r3, #12]
 8006d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d22:	005b      	lsls	r3, r3, #1
 8006d24:	4413      	add	r3, r2
 8006d26:	881b      	ldrh	r3, [r3, #0]
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d1f4      	bne.n	8006d16 <dir_register+0x26>
		create_xdir(fs->dirbuf, fs->lfnbuf);	/* Create on-memory directory block to be written later */
		return FR_OK;
	}
#endif
	/* On the FAT12/16/32 volume */
	mem_cpy(sn, dp->fn, 12);
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006d32:	f107 030c 	add.w	r3, r7, #12
 8006d36:	220c      	movs	r2, #12
 8006d38:	4618      	mov	r0, r3
 8006d3a:	f7fe fe57 	bl	80059ec <mem_cpy>
	if (sn[NSFLAG] & NS_LOSS) {			/* When LFN is out of 8.3 format, generate a numbered name */
 8006d3e:	7dfb      	ldrb	r3, [r7, #23]
 8006d40:	f003 0301 	and.w	r3, r3, #1
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d032      	beq.n	8006dae <dir_register+0xbe>
		dp->fn[NSFLAG] = NS_NOLFN;		/* Find only SFN */
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2240      	movs	r2, #64	; 0x40
 8006d4c:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		for (n = 1; n < 100; n++) {
 8006d50:	2301      	movs	r3, #1
 8006d52:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d54:	e016      	b.n	8006d84 <dir_register+0x94>
			gen_numname(dp->fn, sn, fs->lfnbuf, n);	/* Generate a numbered name */
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8006d5c:	69fb      	ldr	r3, [r7, #28]
 8006d5e:	68da      	ldr	r2, [r3, #12]
 8006d60:	f107 010c 	add.w	r1, r7, #12
 8006d64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d66:	f7ff fe51 	bl	8006a0c <gen_numname>
			res = dir_find(dp);				/* Check if the name collides with existing SFN */
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7ff feff 	bl	8006b6e <dir_find>
 8006d70:	4603      	mov	r3, r0
 8006d72:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			if (res != FR_OK) break;
 8006d76:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d7a:	2b00      	cmp	r3, #0
 8006d7c:	d106      	bne.n	8006d8c <dir_register+0x9c>
		for (n = 1; n < 100; n++) {
 8006d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d80:	3301      	adds	r3, #1
 8006d82:	62bb      	str	r3, [r7, #40]	; 0x28
 8006d84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d86:	2b63      	cmp	r3, #99	; 0x63
 8006d88:	d9e5      	bls.n	8006d56 <dir_register+0x66>
 8006d8a:	e000      	b.n	8006d8e <dir_register+0x9e>
			if (res != FR_OK) break;
 8006d8c:	bf00      	nop
		}
		if (n == 100) return FR_DENIED;		/* Abort if too many collisions */
 8006d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d90:	2b64      	cmp	r3, #100	; 0x64
 8006d92:	d101      	bne.n	8006d98 <dir_register+0xa8>
 8006d94:	2307      	movs	r3, #7
 8006d96:	e09c      	b.n	8006ed2 <dir_register+0x1e2>
		if (res != FR_NO_FILE) return res;	/* Abort if the result is other than 'not collided' */
 8006d98:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006d9c:	2b04      	cmp	r3, #4
 8006d9e:	d002      	beq.n	8006da6 <dir_register+0xb6>
 8006da0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006da4:	e095      	b.n	8006ed2 <dir_register+0x1e2>
		dp->fn[NSFLAG] = sn[NSFLAG];
 8006da6:	7dfa      	ldrb	r2, [r7, #23]
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
	}

	/* Create an SFN with/without LFNs. */
	nent = (sn[NSFLAG] & NS_LFN) ? (nlen + 12) / 13 + 1 : 1;	/* Number of entries to allocate */
 8006dae:	7dfb      	ldrb	r3, [r7, #23]
 8006db0:	f003 0302 	and.w	r3, r3, #2
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d007      	beq.n	8006dc8 <dir_register+0xd8>
 8006db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dba:	330c      	adds	r3, #12
 8006dbc:	4a47      	ldr	r2, [pc, #284]	; (8006edc <dir_register+0x1ec>)
 8006dbe:	fba2 2303 	umull	r2, r3, r2, r3
 8006dc2:	089b      	lsrs	r3, r3, #2
 8006dc4:	3301      	adds	r3, #1
 8006dc6:	e000      	b.n	8006dca <dir_register+0xda>
 8006dc8:	2301      	movs	r3, #1
 8006dca:	623b      	str	r3, [r7, #32]
	res = dir_alloc(dp, nent);		/* Allocate entries */
 8006dcc:	6a39      	ldr	r1, [r7, #32]
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f7ff fcbe 	bl	8006750 <dir_alloc>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
	if (res == FR_OK && --nent) {	/* Set LFN entry if needed */
 8006dda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d148      	bne.n	8006e74 <dir_register+0x184>
 8006de2:	6a3b      	ldr	r3, [r7, #32]
 8006de4:	3b01      	subs	r3, #1
 8006de6:	623b      	str	r3, [r7, #32]
 8006de8:	6a3b      	ldr	r3, [r7, #32]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d042      	beq.n	8006e74 <dir_register+0x184>
		res = dir_sdi(dp, dp->dptr - nent * SZDIRE);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	695a      	ldr	r2, [r3, #20]
 8006df2:	6a3b      	ldr	r3, [r7, #32]
 8006df4:	015b      	lsls	r3, r3, #5
 8006df6:	1ad3      	subs	r3, r2, r3
 8006df8:	4619      	mov	r1, r3
 8006dfa:	6878      	ldr	r0, [r7, #4]
 8006dfc:	f7ff fb68 	bl	80064d0 <dir_sdi>
 8006e00:	4603      	mov	r3, r0
 8006e02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d132      	bne.n	8006e74 <dir_register+0x184>
			sum = sum_sfn(dp->fn);	/* Checksum value of the SFN tied to the LFN */
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	3324      	adds	r3, #36	; 0x24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7ff fe8a 	bl	8006b2c <sum_sfn>
 8006e18:	4603      	mov	r3, r0
 8006e1a:	76fb      	strb	r3, [r7, #27]
			do {					/* Store LFN entries in bottom first */
				res = move_window(fs, dp->sect);
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	69db      	ldr	r3, [r3, #28]
 8006e20:	4619      	mov	r1, r3
 8006e22:	69f8      	ldr	r0, [r7, #28]
 8006e24:	f7ff f810 	bl	8005e48 <move_window>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				if (res != FR_OK) break;
 8006e2e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e32:	2b00      	cmp	r3, #0
 8006e34:	d11d      	bne.n	8006e72 <dir_register+0x182>
				put_lfn(fs->lfnbuf, dp->dir, (BYTE)nent, sum);
 8006e36:	69fb      	ldr	r3, [r7, #28]
 8006e38:	68d8      	ldr	r0, [r3, #12]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	6a19      	ldr	r1, [r3, #32]
 8006e3e:	6a3b      	ldr	r3, [r7, #32]
 8006e40:	b2da      	uxtb	r2, r3
 8006e42:	7efb      	ldrb	r3, [r7, #27]
 8006e44:	f7ff fd7a 	bl	800693c <put_lfn>
				fs->wflag = 1;
 8006e48:	69fb      	ldr	r3, [r7, #28]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	70da      	strb	r2, [r3, #3]
				res = dir_next(dp, 0);	/* Next entry */
 8006e4e:	2100      	movs	r1, #0
 8006e50:	6878      	ldr	r0, [r7, #4]
 8006e52:	f7ff fbb8 	bl	80065c6 <dir_next>
 8006e56:	4603      	mov	r3, r0
 8006e58:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
			} while (res == FR_OK && --nent);
 8006e5c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e60:	2b00      	cmp	r3, #0
 8006e62:	d107      	bne.n	8006e74 <dir_register+0x184>
 8006e64:	6a3b      	ldr	r3, [r7, #32]
 8006e66:	3b01      	subs	r3, #1
 8006e68:	623b      	str	r3, [r7, #32]
 8006e6a:	6a3b      	ldr	r3, [r7, #32]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d1d5      	bne.n	8006e1c <dir_register+0x12c>
 8006e70:	e000      	b.n	8006e74 <dir_register+0x184>
				if (res != FR_OK) break;
 8006e72:	bf00      	nop
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */

#endif

	/* Set SFN entry */
	if (res == FR_OK) {
 8006e74:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d128      	bne.n	8006ece <dir_register+0x1de>
		res = move_window(fs, dp->sect);
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	69db      	ldr	r3, [r3, #28]
 8006e80:	4619      	mov	r1, r3
 8006e82:	69f8      	ldr	r0, [r7, #28]
 8006e84:	f7fe ffe0 	bl	8005e48 <move_window>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		if (res == FR_OK) {
 8006e8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8006e92:	2b00      	cmp	r3, #0
 8006e94:	d11b      	bne.n	8006ece <dir_register+0x1de>
			mem_set(dp->dir, 0, SZDIRE);	/* Clean the entry */
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	6a1b      	ldr	r3, [r3, #32]
 8006e9a:	2220      	movs	r2, #32
 8006e9c:	2100      	movs	r1, #0
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f7fe fdc5 	bl	8005a2e <mem_set>
			mem_cpy(dp->dir + DIR_Name, dp->fn, 11);	/* Put SFN */
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6a18      	ldr	r0, [r3, #32]
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	3324      	adds	r3, #36	; 0x24
 8006eac:	220b      	movs	r2, #11
 8006eae:	4619      	mov	r1, r3
 8006eb0:	f7fe fd9c 	bl	80059ec <mem_cpy>
#if _USE_LFN != 0
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 202f 	ldrb.w	r2, [r3, #47]	; 0x2f
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	6a1b      	ldr	r3, [r3, #32]
 8006ebe:	330c      	adds	r3, #12
 8006ec0:	f002 0218 	and.w	r2, r2, #24
 8006ec4:	b2d2      	uxtb	r2, r2
 8006ec6:	701a      	strb	r2, [r3, #0]
#endif
			fs->wflag = 1;
 8006ec8:	69fb      	ldr	r3, [r7, #28]
 8006eca:	2201      	movs	r2, #1
 8006ecc:	70da      	strb	r2, [r3, #3]
		}
	}

	return res;
 8006ece:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8006ed2:	4618      	mov	r0, r3
 8006ed4:	3730      	adds	r7, #48	; 0x30
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	4ec4ec4f 	.word	0x4ec4ec4f

08006ee0 <create_name>:
static
FRESULT create_name (	/* FR_OK: successful, FR_INVALID_NAME: could not create */
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b08a      	sub	sp, #40	; 0x28
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	6078      	str	r0, [r7, #4]
 8006ee8:	6039      	str	r1, [r7, #0]
	WCHAR w, *lfn;
	UINT i, ni, si, di;
	const TCHAR *p;

	/* Create LFN in Unicode */
	p = *path; lfn = dp->obj.fs->lfnbuf; si = di = 0;
 8006eea:	683b      	ldr	r3, [r7, #0]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	613b      	str	r3, [r7, #16]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	681b      	ldr	r3, [r3, #0]
 8006ef4:	68db      	ldr	r3, [r3, #12]
 8006ef6:	60fb      	str	r3, [r7, #12]
 8006ef8:	2300      	movs	r3, #0
 8006efa:	617b      	str	r3, [r7, #20]
 8006efc:	697b      	ldr	r3, [r7, #20]
 8006efe:	61bb      	str	r3, [r7, #24]
	for (;;) {
		w = p[si++];					/* Get a character */
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	1c5a      	adds	r2, r3, #1
 8006f04:	61ba      	str	r2, [r7, #24]
 8006f06:	693a      	ldr	r2, [r7, #16]
 8006f08:	4413      	add	r3, r2
 8006f0a:	781b      	ldrb	r3, [r3, #0]
 8006f0c:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w < ' ') break;				/* Break if end of the path name */
 8006f0e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f10:	2b1f      	cmp	r3, #31
 8006f12:	d940      	bls.n	8006f96 <create_name+0xb6>
		if (w == '/' || w == '\\') {	/* Break if a separator is found */
 8006f14:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f16:	2b2f      	cmp	r3, #47	; 0x2f
 8006f18:	d006      	beq.n	8006f28 <create_name+0x48>
 8006f1a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f1c:	2b5c      	cmp	r3, #92	; 0x5c
 8006f1e:	d110      	bne.n	8006f42 <create_name+0x62>
			while (p[si] == '/' || p[si] == '\\') si++;	/* Skip duplicated separator if exist */
 8006f20:	e002      	b.n	8006f28 <create_name+0x48>
 8006f22:	69bb      	ldr	r3, [r7, #24]
 8006f24:	3301      	adds	r3, #1
 8006f26:	61bb      	str	r3, [r7, #24]
 8006f28:	693a      	ldr	r2, [r7, #16]
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	781b      	ldrb	r3, [r3, #0]
 8006f30:	2b2f      	cmp	r3, #47	; 0x2f
 8006f32:	d0f6      	beq.n	8006f22 <create_name+0x42>
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	69bb      	ldr	r3, [r7, #24]
 8006f38:	4413      	add	r3, r2
 8006f3a:	781b      	ldrb	r3, [r3, #0]
 8006f3c:	2b5c      	cmp	r3, #92	; 0x5c
 8006f3e:	d0f0      	beq.n	8006f22 <create_name+0x42>
			break;
 8006f40:	e02a      	b.n	8006f98 <create_name+0xb8>
		}
		if (di >= _MAX_LFN) return FR_INVALID_NAME;	/* Reject too long name */
 8006f42:	697b      	ldr	r3, [r7, #20]
 8006f44:	2bfe      	cmp	r3, #254	; 0xfe
 8006f46:	d901      	bls.n	8006f4c <create_name+0x6c>
 8006f48:	2306      	movs	r3, #6
 8006f4a:	e177      	b.n	800723c <create_name+0x35c>
#if !_LFN_UNICODE
		w &= 0xFF;
 8006f4c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f4e:	b2db      	uxtb	r3, r3
 8006f50:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (IsDBCS1(w)) {				/* Check if it is a DBC 1st byte (always false on SBCS cfg) */
			b = (BYTE)p[si++];			/* Get 2nd byte */
			w = (w << 8) + b;			/* Create a DBC */
			if (!IsDBCS2(b)) return FR_INVALID_NAME;	/* Reject invalid sequence */
		}
		w = ff_convert(w, 1);			/* Convert ANSI/OEM to Unicode */
 8006f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f54:	2101      	movs	r1, #1
 8006f56:	4618      	mov	r0, r3
 8006f58:	f001 f816 	bl	8007f88 <ff_convert>
 8006f5c:	4603      	mov	r3, r0
 8006f5e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) return FR_INVALID_NAME;	/* Reject invalid code */
 8006f60:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d101      	bne.n	8006f6a <create_name+0x8a>
 8006f66:	2306      	movs	r3, #6
 8006f68:	e168      	b.n	800723c <create_name+0x35c>
#endif
		if (w < 0x80 && chk_chr("\"*:<>\?|\x7F", w)) return FR_INVALID_NAME;	/* Reject illegal characters for LFN */
 8006f6a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f6c:	2b7f      	cmp	r3, #127	; 0x7f
 8006f6e:	d809      	bhi.n	8006f84 <create_name+0xa4>
 8006f70:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006f72:	4619      	mov	r1, r3
 8006f74:	48b3      	ldr	r0, [pc, #716]	; (8007244 <create_name+0x364>)
 8006f76:	f7fe fd9b 	bl	8005ab0 <chk_chr>
 8006f7a:	4603      	mov	r3, r0
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d001      	beq.n	8006f84 <create_name+0xa4>
 8006f80:	2306      	movs	r3, #6
 8006f82:	e15b      	b.n	800723c <create_name+0x35c>
		lfn[di++] = w;					/* Store the Unicode character */
 8006f84:	697b      	ldr	r3, [r7, #20]
 8006f86:	1c5a      	adds	r2, r3, #1
 8006f88:	617a      	str	r2, [r7, #20]
 8006f8a:	005b      	lsls	r3, r3, #1
 8006f8c:	68fa      	ldr	r2, [r7, #12]
 8006f8e:	4413      	add	r3, r2
 8006f90:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8006f92:	801a      	strh	r2, [r3, #0]
		w = p[si++];					/* Get a character */
 8006f94:	e7b4      	b.n	8006f00 <create_name+0x20>
		if (w < ' ') break;				/* Break if end of the path name */
 8006f96:	bf00      	nop
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8006f98:	693a      	ldr	r2, [r7, #16]
 8006f9a:	69bb      	ldr	r3, [r7, #24]
 8006f9c:	441a      	add	r2, r3
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	601a      	str	r2, [r3, #0]
	cf = (w < ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */
 8006fa2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fa4:	2b1f      	cmp	r3, #31
 8006fa6:	d801      	bhi.n	8006fac <create_name+0xcc>
 8006fa8:	2304      	movs	r3, #4
 8006faa:	e000      	b.n	8006fae <create_name+0xce>
 8006fac:	2300      	movs	r3, #0
 8006fae:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			dp->fn[i] = (i < di) ? '.' : ' ';
		dp->fn[i] = cf | NS_DOT;		/* This is a dot entry */
		return FR_OK;
	}
#endif
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006fb2:	e011      	b.n	8006fd8 <create_name+0xf8>
		w = lfn[di - 1];
 8006fb4:	697a      	ldr	r2, [r7, #20]
 8006fb6:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8006fba:	4413      	add	r3, r2
 8006fbc:	005b      	lsls	r3, r3, #1
 8006fbe:	68fa      	ldr	r2, [r7, #12]
 8006fc0:	4413      	add	r3, r2
 8006fc2:	881b      	ldrh	r3, [r3, #0]
 8006fc4:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (w != ' ' && w != '.') break;
 8006fc6:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fc8:	2b20      	cmp	r3, #32
 8006fca:	d002      	beq.n	8006fd2 <create_name+0xf2>
 8006fcc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8006fce:	2b2e      	cmp	r3, #46	; 0x2e
 8006fd0:	d106      	bne.n	8006fe0 <create_name+0x100>
		di--;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	3b01      	subs	r3, #1
 8006fd6:	617b      	str	r3, [r7, #20]
	while (di) {						/* Snip off trailing spaces and dots if exist */
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	2b00      	cmp	r3, #0
 8006fdc:	d1ea      	bne.n	8006fb4 <create_name+0xd4>
 8006fde:	e000      	b.n	8006fe2 <create_name+0x102>
		if (w != ' ' && w != '.') break;
 8006fe0:	bf00      	nop
	}
	lfn[di] = 0;						/* LFN is created */
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	005b      	lsls	r3, r3, #1
 8006fe6:	68fa      	ldr	r2, [r7, #12]
 8006fe8:	4413      	add	r3, r2
 8006fea:	2200      	movs	r2, #0
 8006fec:	801a      	strh	r2, [r3, #0]
	if (di == 0) return FR_INVALID_NAME;	/* Reject nul name */
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d101      	bne.n	8006ff8 <create_name+0x118>
 8006ff4:	2306      	movs	r3, #6
 8006ff6:	e121      	b.n	800723c <create_name+0x35c>

	/* Create SFN in directory form */
	mem_set(dp->fn, ' ', 11);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	3324      	adds	r3, #36	; 0x24
 8006ffc:	220b      	movs	r2, #11
 8006ffe:	2120      	movs	r1, #32
 8007000:	4618      	mov	r0, r3
 8007002:	f7fe fd14 	bl	8005a2e <mem_set>
	for (si = 0; lfn[si] == ' ' || lfn[si] == '.'; si++) ;	/* Strip leading spaces and dots */
 8007006:	2300      	movs	r3, #0
 8007008:	61bb      	str	r3, [r7, #24]
 800700a:	e002      	b.n	8007012 <create_name+0x132>
 800700c:	69bb      	ldr	r3, [r7, #24]
 800700e:	3301      	adds	r3, #1
 8007010:	61bb      	str	r3, [r7, #24]
 8007012:	69bb      	ldr	r3, [r7, #24]
 8007014:	005b      	lsls	r3, r3, #1
 8007016:	68fa      	ldr	r2, [r7, #12]
 8007018:	4413      	add	r3, r2
 800701a:	881b      	ldrh	r3, [r3, #0]
 800701c:	2b20      	cmp	r3, #32
 800701e:	d0f5      	beq.n	800700c <create_name+0x12c>
 8007020:	69bb      	ldr	r3, [r7, #24]
 8007022:	005b      	lsls	r3, r3, #1
 8007024:	68fa      	ldr	r2, [r7, #12]
 8007026:	4413      	add	r3, r2
 8007028:	881b      	ldrh	r3, [r3, #0]
 800702a:	2b2e      	cmp	r3, #46	; 0x2e
 800702c:	d0ee      	beq.n	800700c <create_name+0x12c>
	if (si) cf |= NS_LOSS | NS_LFN;
 800702e:	69bb      	ldr	r3, [r7, #24]
 8007030:	2b00      	cmp	r3, #0
 8007032:	d009      	beq.n	8007048 <create_name+0x168>
 8007034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007038:	f043 0303 	orr.w	r3, r3, #3
 800703c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	while (di && lfn[di - 1] != '.') di--;	/* Find extension (di<=si: no extension) */
 8007040:	e002      	b.n	8007048 <create_name+0x168>
 8007042:	697b      	ldr	r3, [r7, #20]
 8007044:	3b01      	subs	r3, #1
 8007046:	617b      	str	r3, [r7, #20]
 8007048:	697b      	ldr	r3, [r7, #20]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d009      	beq.n	8007062 <create_name+0x182>
 800704e:	697a      	ldr	r2, [r7, #20]
 8007050:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8007054:	4413      	add	r3, r2
 8007056:	005b      	lsls	r3, r3, #1
 8007058:	68fa      	ldr	r2, [r7, #12]
 800705a:	4413      	add	r3, r2
 800705c:	881b      	ldrh	r3, [r3, #0]
 800705e:	2b2e      	cmp	r3, #46	; 0x2e
 8007060:	d1ef      	bne.n	8007042 <create_name+0x162>

	i = b = 0; ni = 8;
 8007062:	2300      	movs	r3, #0
 8007064:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007068:	2300      	movs	r3, #0
 800706a:	623b      	str	r3, [r7, #32]
 800706c:	2308      	movs	r3, #8
 800706e:	61fb      	str	r3, [r7, #28]
	for (;;) {
		w = lfn[si++];					/* Get an LFN character */
 8007070:	69bb      	ldr	r3, [r7, #24]
 8007072:	1c5a      	adds	r2, r3, #1
 8007074:	61ba      	str	r2, [r7, #24]
 8007076:	005b      	lsls	r3, r3, #1
 8007078:	68fa      	ldr	r2, [r7, #12]
 800707a:	4413      	add	r3, r2
 800707c:	881b      	ldrh	r3, [r3, #0]
 800707e:	84bb      	strh	r3, [r7, #36]	; 0x24
		if (!w) break;					/* Break on end of the LFN */
 8007080:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007082:	2b00      	cmp	r3, #0
 8007084:	f000 8090 	beq.w	80071a8 <create_name+0x2c8>
		if (w == ' ' || (w == '.' && si != di)) {	/* Remove spaces and dots */
 8007088:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800708a:	2b20      	cmp	r3, #32
 800708c:	d006      	beq.n	800709c <create_name+0x1bc>
 800708e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007090:	2b2e      	cmp	r3, #46	; 0x2e
 8007092:	d10a      	bne.n	80070aa <create_name+0x1ca>
 8007094:	69ba      	ldr	r2, [r7, #24]
 8007096:	697b      	ldr	r3, [r7, #20]
 8007098:	429a      	cmp	r2, r3
 800709a:	d006      	beq.n	80070aa <create_name+0x1ca>
			cf |= NS_LOSS | NS_LFN; continue;
 800709c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070a0:	f043 0303 	orr.w	r3, r3, #3
 80070a4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070a8:	e07d      	b.n	80071a6 <create_name+0x2c6>
		}

		if (i >= ni || si == di) {		/* Extension or end of SFN */
 80070aa:	6a3a      	ldr	r2, [r7, #32]
 80070ac:	69fb      	ldr	r3, [r7, #28]
 80070ae:	429a      	cmp	r2, r3
 80070b0:	d203      	bcs.n	80070ba <create_name+0x1da>
 80070b2:	69ba      	ldr	r2, [r7, #24]
 80070b4:	697b      	ldr	r3, [r7, #20]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d123      	bne.n	8007102 <create_name+0x222>
			if (ni == 11) {				/* Long extension */
 80070ba:	69fb      	ldr	r3, [r7, #28]
 80070bc:	2b0b      	cmp	r3, #11
 80070be:	d106      	bne.n	80070ce <create_name+0x1ee>
				cf |= NS_LOSS | NS_LFN; break;
 80070c0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070c4:	f043 0303 	orr.w	r3, r3, #3
 80070c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 80070cc:	e06f      	b.n	80071ae <create_name+0x2ce>
			}
			if (si != di) cf |= NS_LOSS | NS_LFN;	/* Out of 8.3 format */
 80070ce:	69ba      	ldr	r2, [r7, #24]
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	429a      	cmp	r2, r3
 80070d4:	d005      	beq.n	80070e2 <create_name+0x202>
 80070d6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80070da:	f043 0303 	orr.w	r3, r3, #3
 80070de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (si > di) break;			/* No extension */
 80070e2:	69ba      	ldr	r2, [r7, #24]
 80070e4:	697b      	ldr	r3, [r7, #20]
 80070e6:	429a      	cmp	r2, r3
 80070e8:	d860      	bhi.n	80071ac <create_name+0x2cc>
			si = di; i = 8; ni = 11;	/* Enter extension section */
 80070ea:	697b      	ldr	r3, [r7, #20]
 80070ec:	61bb      	str	r3, [r7, #24]
 80070ee:	2308      	movs	r3, #8
 80070f0:	623b      	str	r3, [r7, #32]
 80070f2:	230b      	movs	r3, #11
 80070f4:	61fb      	str	r3, [r7, #28]
			b <<= 2; continue;
 80070f6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80070fa:	009b      	lsls	r3, r3, #2
 80070fc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007100:	e051      	b.n	80071a6 <create_name+0x2c6>
		}

		if (w >= 0x80) {				/* Non ASCII character */
 8007102:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007104:	2b7f      	cmp	r3, #127	; 0x7f
 8007106:	d914      	bls.n	8007132 <create_name+0x252>
#ifdef _EXCVT
			w = ff_convert(w, 0);		/* Unicode -> OEM code */
 8007108:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800710a:	2100      	movs	r1, #0
 800710c:	4618      	mov	r0, r3
 800710e:	f000 ff3b 	bl	8007f88 <ff_convert>
 8007112:	4603      	mov	r3, r0
 8007114:	84bb      	strh	r3, [r7, #36]	; 0x24
			if (w) w = ExCvt[w - 0x80];	/* Convert extended character to upper (SBCS) */
 8007116:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007118:	2b00      	cmp	r3, #0
 800711a:	d004      	beq.n	8007126 <create_name+0x246>
 800711c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800711e:	3b80      	subs	r3, #128	; 0x80
 8007120:	4a49      	ldr	r2, [pc, #292]	; (8007248 <create_name+0x368>)
 8007122:	5cd3      	ldrb	r3, [r2, r3]
 8007124:	84bb      	strh	r3, [r7, #36]	; 0x24
#else
			w = ff_convert(ff_wtoupper(w), 0);	/* Upper converted Unicode -> OEM code */
#endif
			cf |= NS_LFN;				/* Force create LFN entry */
 8007126:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800712a:	f043 0302 	orr.w	r3, r3, #2
 800712e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if (i >= ni - 1) {
				cf |= NS_LOSS | NS_LFN; i = ni; continue;
			}
			dp->fn[i++] = (BYTE)(w >> 8);
		} else {						/* SBC */
			if (!w || chk_chr("+,;=[]", w)) {	/* Replace illegal characters for SFN */
 8007132:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007134:	2b00      	cmp	r3, #0
 8007136:	d007      	beq.n	8007148 <create_name+0x268>
 8007138:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800713a:	4619      	mov	r1, r3
 800713c:	4843      	ldr	r0, [pc, #268]	; (800724c <create_name+0x36c>)
 800713e:	f7fe fcb7 	bl	8005ab0 <chk_chr>
 8007142:	4603      	mov	r3, r0
 8007144:	2b00      	cmp	r3, #0
 8007146:	d008      	beq.n	800715a <create_name+0x27a>
				w = '_'; cf |= NS_LOSS | NS_LFN;/* Lossy conversion */
 8007148:	235f      	movs	r3, #95	; 0x5f
 800714a:	84bb      	strh	r3, [r7, #36]	; 0x24
 800714c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007150:	f043 0303 	orr.w	r3, r3, #3
 8007154:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8007158:	e01b      	b.n	8007192 <create_name+0x2b2>
			} else {
				if (IsUpper(w)) {		/* ASCII large capital */
 800715a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800715c:	2b40      	cmp	r3, #64	; 0x40
 800715e:	d909      	bls.n	8007174 <create_name+0x294>
 8007160:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007162:	2b5a      	cmp	r3, #90	; 0x5a
 8007164:	d806      	bhi.n	8007174 <create_name+0x294>
					b |= 2;
 8007166:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800716a:	f043 0302 	orr.w	r3, r3, #2
 800716e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8007172:	e00e      	b.n	8007192 <create_name+0x2b2>
				} else {
					if (IsLower(w)) {	/* ASCII small capital */
 8007174:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8007176:	2b60      	cmp	r3, #96	; 0x60
 8007178:	d90b      	bls.n	8007192 <create_name+0x2b2>
 800717a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800717c:	2b7a      	cmp	r3, #122	; 0x7a
 800717e:	d808      	bhi.n	8007192 <create_name+0x2b2>
						b |= 1; w -= 0x20;
 8007180:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007184:	f043 0301 	orr.w	r3, r3, #1
 8007188:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800718c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800718e:	3b20      	subs	r3, #32
 8007190:	84bb      	strh	r3, [r7, #36]	; 0x24
					}
				}
			}
		}
		dp->fn[i++] = (BYTE)w;
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	1c5a      	adds	r2, r3, #1
 8007196:	623a      	str	r2, [r7, #32]
 8007198:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800719a:	b2d1      	uxtb	r1, r2
 800719c:	687a      	ldr	r2, [r7, #4]
 800719e:	4413      	add	r3, r2
 80071a0:	460a      	mov	r2, r1
 80071a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		w = lfn[si++];					/* Get an LFN character */
 80071a6:	e763      	b.n	8007070 <create_name+0x190>
		if (!w) break;					/* Break on end of the LFN */
 80071a8:	bf00      	nop
 80071aa:	e000      	b.n	80071ae <create_name+0x2ce>
			if (si > di) break;			/* No extension */
 80071ac:	bf00      	nop
	}

	if (dp->fn[0] == DDEM) dp->fn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80071b4:	2be5      	cmp	r3, #229	; 0xe5
 80071b6:	d103      	bne.n	80071c0 <create_name+0x2e0>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2205      	movs	r2, #5
 80071bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

	if (ni == 8) b <<= 2;
 80071c0:	69fb      	ldr	r3, [r7, #28]
 80071c2:	2b08      	cmp	r3, #8
 80071c4:	d104      	bne.n	80071d0 <create_name+0x2f0>
 80071c6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
	if ((b & 0x0C) == 0x0C || (b & 0x03) == 0x03) cf |= NS_LFN;	/* Create LFN entry when there are composite capitals */
 80071d0:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071d4:	f003 030c 	and.w	r3, r3, #12
 80071d8:	2b0c      	cmp	r3, #12
 80071da:	d005      	beq.n	80071e8 <create_name+0x308>
 80071dc:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80071e0:	f003 0303 	and.w	r3, r3, #3
 80071e4:	2b03      	cmp	r3, #3
 80071e6:	d105      	bne.n	80071f4 <create_name+0x314>
 80071e8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071ec:	f043 0302 	orr.w	r3, r3, #2
 80071f0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (!(cf & NS_LFN)) {						/* When LFN is in 8.3 format without extended character, NT flags are created */
 80071f4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071f8:	f003 0302 	and.w	r3, r3, #2
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d117      	bne.n	8007230 <create_name+0x350>
		if ((b & 0x03) == 0x01) cf |= NS_EXT;	/* NT flag (Extension has only small capital) */
 8007200:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8007204:	f003 0303 	and.w	r3, r3, #3
 8007208:	2b01      	cmp	r3, #1
 800720a:	d105      	bne.n	8007218 <create_name+0x338>
 800720c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007210:	f043 0310 	orr.w	r3, r3, #16
 8007214:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		if ((b & 0x0C) == 0x04) cf |= NS_BODY;	/* NT flag (Filename has only small capital) */
 8007218:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800721c:	f003 030c 	and.w	r3, r3, #12
 8007220:	2b04      	cmp	r3, #4
 8007222:	d105      	bne.n	8007230 <create_name+0x350>
 8007224:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007228:	f043 0308 	orr.w	r3, r3, #8
 800722c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	dp->fn[NSFLAG] = cf;	/* SFN is created */
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8007236:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f

	return FR_OK;
 800723a:	2300      	movs	r3, #0
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* If the first character collides with DDEM, replace it with RDDEM */
	sfn[NSFLAG] = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of the path */

	return FR_OK;
#endif /* _USE_LFN != 0 */
}
 800723c:	4618      	mov	r0, r3
 800723e:	3728      	adds	r7, #40	; 0x28
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}
 8007244:	080081c8 	.word	0x080081c8
 8007248:	08008244 	.word	0x08008244
 800724c:	080081d4 	.word	0x080081d4

08007250 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8007250:	b580      	push	{r7, lr}
 8007252:	b086      	sub	sp, #24
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
 8007258:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE ns;
	_FDID *obj = &dp->obj;
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	613b      	str	r3, [r7, #16]
	FATFS *fs = obj->fs;
 800725e:	693b      	ldr	r3, [r7, #16]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	60fb      	str	r3, [r7, #12]
	if (*path != '/' && *path != '\\') {	/* Without heading separator */
		obj->sclust = fs->cdir;				/* Start from current directory */
	} else
#endif
	{										/* With heading separator */
		while (*path == '/' || *path == '\\') path++;	/* Strip heading separator */
 8007264:	e002      	b.n	800726c <follow_path+0x1c>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	3301      	adds	r3, #1
 800726a:	603b      	str	r3, [r7, #0]
 800726c:	683b      	ldr	r3, [r7, #0]
 800726e:	781b      	ldrb	r3, [r3, #0]
 8007270:	2b2f      	cmp	r3, #47	; 0x2f
 8007272:	d0f8      	beq.n	8007266 <follow_path+0x16>
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	781b      	ldrb	r3, [r3, #0]
 8007278:	2b5c      	cmp	r3, #92	; 0x5c
 800727a:	d0f4      	beq.n	8007266 <follow_path+0x16>
		obj->sclust = 0;					/* Start from root directory */
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	2200      	movs	r2, #0
 8007280:	609a      	str	r2, [r3, #8]
		obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
	}
#endif
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	781b      	ldrb	r3, [r3, #0]
 8007286:	2b1f      	cmp	r3, #31
 8007288:	d80a      	bhi.n	80072a0 <follow_path+0x50>
		dp->fn[NSFLAG] = NS_NONAME;
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2280      	movs	r2, #128	; 0x80
 800728e:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
		res = dir_sdi(dp, 0);
 8007292:	2100      	movs	r1, #0
 8007294:	6878      	ldr	r0, [r7, #4]
 8007296:	f7ff f91b 	bl	80064d0 <dir_sdi>
 800729a:	4603      	mov	r3, r0
 800729c:	75fb      	strb	r3, [r7, #23]
 800729e:	e043      	b.n	8007328 <follow_path+0xd8>

	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 80072a0:	463b      	mov	r3, r7
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff fe1b 	bl	8006ee0 <create_name>
 80072aa:	4603      	mov	r3, r0
 80072ac:	75fb      	strb	r3, [r7, #23]
			if (res != FR_OK) break;
 80072ae:	7dfb      	ldrb	r3, [r7, #23]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d134      	bne.n	800731e <follow_path+0xce>
			res = dir_find(dp);				/* Find an object with the segment name */
 80072b4:	6878      	ldr	r0, [r7, #4]
 80072b6:	f7ff fc5a 	bl	8006b6e <dir_find>
 80072ba:	4603      	mov	r3, r0
 80072bc:	75fb      	strb	r3, [r7, #23]
			ns = dp->fn[NSFLAG];
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f893 302f 	ldrb.w	r3, [r3, #47]	; 0x2f
 80072c4:	72fb      	strb	r3, [r7, #11]
			if (res != FR_OK) {				/* Failed to find the object */
 80072c6:	7dfb      	ldrb	r3, [r7, #23]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d00a      	beq.n	80072e2 <follow_path+0x92>
				if (res == FR_NO_FILE) {	/* Object is not found */
 80072cc:	7dfb      	ldrb	r3, [r7, #23]
 80072ce:	2b04      	cmp	r3, #4
 80072d0:	d127      	bne.n	8007322 <follow_path+0xd2>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, stay there */
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
						dp->fn[NSFLAG] = NS_NONAME;
						res = FR_OK;
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 80072d2:	7afb      	ldrb	r3, [r7, #11]
 80072d4:	f003 0304 	and.w	r3, r3, #4
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d122      	bne.n	8007322 <follow_path+0xd2>
 80072dc:	2305      	movs	r3, #5
 80072de:	75fb      	strb	r3, [r7, #23]
					}
				}
				break;
 80072e0:	e01f      	b.n	8007322 <follow_path+0xd2>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 80072e2:	7afb      	ldrb	r3, [r7, #11]
 80072e4:	f003 0304 	and.w	r3, r3, #4
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d11c      	bne.n	8007326 <follow_path+0xd6>
			/* Get into the sub-directory */
			if (!(obj->attr & AM_DIR)) {		/* It is not a sub-directory and cannot follow */
 80072ec:	693b      	ldr	r3, [r7, #16]
 80072ee:	799b      	ldrb	r3, [r3, #6]
 80072f0:	f003 0310 	and.w	r3, r3, #16
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d102      	bne.n	80072fe <follow_path+0xae>
				res = FR_NO_PATH; break;
 80072f8:	2305      	movs	r3, #5
 80072fa:	75fb      	strb	r3, [r7, #23]
 80072fc:	e014      	b.n	8007328 <follow_path+0xd8>
				obj->stat = fs->dirbuf[XDIR_GenFlags] & 2;
				obj->objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
			} else
#endif
			{
				obj->sclust = ld_clust(fs, fs->win + dp->dptr % SS(fs));	/* Open next directory */
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	695b      	ldr	r3, [r3, #20]
 8007308:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800730c:	4413      	add	r3, r2
 800730e:	4619      	mov	r1, r3
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff fa64 	bl	80067de <ld_clust>
 8007316:	4602      	mov	r2, r0
 8007318:	693b      	ldr	r3, [r7, #16]
 800731a:	609a      	str	r2, [r3, #8]
			res = create_name(dp, &path);	/* Get a segment name of the path */
 800731c:	e7c0      	b.n	80072a0 <follow_path+0x50>
			if (res != FR_OK) break;
 800731e:	bf00      	nop
 8007320:	e002      	b.n	8007328 <follow_path+0xd8>
				break;
 8007322:	bf00      	nop
 8007324:	e000      	b.n	8007328 <follow_path+0xd8>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 8007326:	bf00      	nop
			}
		}
	}

	return res;
 8007328:	7dfb      	ldrb	r3, [r7, #23]
}
 800732a:	4618      	mov	r0, r3
 800732c:	3718      	adds	r7, #24
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 8007332:	b480      	push	{r7}
 8007334:	b087      	sub	sp, #28
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 800733a:	f04f 33ff 	mov.w	r3, #4294967295
 800733e:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d031      	beq.n	80073ac <get_ldnumber+0x7a>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	617b      	str	r3, [r7, #20]
 800734e:	e002      	b.n	8007356 <get_ldnumber+0x24>
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	3301      	adds	r3, #1
 8007354:	617b      	str	r3, [r7, #20]
 8007356:	697b      	ldr	r3, [r7, #20]
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	2b1f      	cmp	r3, #31
 800735c:	d903      	bls.n	8007366 <get_ldnumber+0x34>
 800735e:	697b      	ldr	r3, [r7, #20]
 8007360:	781b      	ldrb	r3, [r3, #0]
 8007362:	2b3a      	cmp	r3, #58	; 0x3a
 8007364:	d1f4      	bne.n	8007350 <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 8007366:	697b      	ldr	r3, [r7, #20]
 8007368:	781b      	ldrb	r3, [r3, #0]
 800736a:	2b3a      	cmp	r3, #58	; 0x3a
 800736c:	d11c      	bne.n	80073a8 <get_ldnumber+0x76>
			tp = *path;
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	60fb      	str	r3, [r7, #12]
			i = *tp++ - '0';
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	1c5a      	adds	r2, r3, #1
 8007378:	60fa      	str	r2, [r7, #12]
 800737a:	781b      	ldrb	r3, [r3, #0]
 800737c:	3b30      	subs	r3, #48	; 0x30
 800737e:	60bb      	str	r3, [r7, #8]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 8007380:	68bb      	ldr	r3, [r7, #8]
 8007382:	2b09      	cmp	r3, #9
 8007384:	d80e      	bhi.n	80073a4 <get_ldnumber+0x72>
 8007386:	68fa      	ldr	r2, [r7, #12]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	429a      	cmp	r2, r3
 800738c:	d10a      	bne.n	80073a4 <get_ldnumber+0x72>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800738e:	68bb      	ldr	r3, [r7, #8]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d107      	bne.n	80073a4 <get_ldnumber+0x72>
					vol = (int)i;
 8007394:	68bb      	ldr	r3, [r7, #8]
 8007396:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8007398:	697b      	ldr	r3, [r7, #20]
 800739a:	3301      	adds	r3, #1
 800739c:	617b      	str	r3, [r7, #20]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	697a      	ldr	r2, [r7, #20]
 80073a2:	601a      	str	r2, [r3, #0]
					vol = (int)i;
					*path = tt;
				}
			}
#endif
			return vol;
 80073a4:	693b      	ldr	r3, [r7, #16]
 80073a6:	e002      	b.n	80073ae <get_ldnumber+0x7c>
		}
#if _FS_RPATH != 0 && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
#else
		vol = 0;		/* Drive 0 */
 80073a8:	2300      	movs	r3, #0
 80073aa:	613b      	str	r3, [r7, #16]
#endif
	}
	return vol;
 80073ac:	693b      	ldr	r3, [r7, #16]
}
 80073ae:	4618      	mov	r0, r3
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
	...

080073bc <check_fs>:
static
BYTE check_fs (	/* 0:FAT, 1:exFAT, 2:Valid BS but not FAT, 3:Not a BS, 4:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to load and check if it is an FAT-VBR or not */
)
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b082      	sub	sp, #8
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;		/* Invaidate window */
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2200      	movs	r2, #0
 80073ca:	70da      	strb	r2, [r3, #3]
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	f04f 32ff 	mov.w	r2, #4294967295
 80073d2:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK) return 4;	/* Load boot record */
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7fe fd36 	bl	8005e48 <move_window>
 80073dc:	4603      	mov	r3, r0
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d001      	beq.n	80073e6 <check_fs+0x2a>
 80073e2:	2304      	movs	r3, #4
 80073e4:	e038      	b.n	8007458 <check_fs+0x9c>

	if (ld_word(fs->win + BS_55AA) != 0xAA55) return 3;	/* Check boot record signature (always placed here even if the sector size is >512) */
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	3334      	adds	r3, #52	; 0x34
 80073ea:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 80073ee:	4618      	mov	r0, r3
 80073f0:	f7fe fa7a 	bl	80058e8 <ld_word>
 80073f4:	4603      	mov	r3, r0
 80073f6:	461a      	mov	r2, r3
 80073f8:	f64a 2355 	movw	r3, #43605	; 0xaa55
 80073fc:	429a      	cmp	r2, r3
 80073fe:	d001      	beq.n	8007404 <check_fs+0x48>
 8007400:	2303      	movs	r3, #3
 8007402:	e029      	b.n	8007458 <check_fs+0x9c>

	if (fs->win[BS_JmpBoot] == 0xE9 || (fs->win[BS_JmpBoot] == 0xEB && fs->win[BS_JmpBoot + 2] == 0x90)) {
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800740a:	2be9      	cmp	r3, #233	; 0xe9
 800740c:	d009      	beq.n	8007422 <check_fs+0x66>
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007414:	2beb      	cmp	r3, #235	; 0xeb
 8007416:	d11e      	bne.n	8007456 <check_fs+0x9a>
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 800741e:	2b90      	cmp	r3, #144	; 0x90
 8007420:	d119      	bne.n	8007456 <check_fs+0x9a>
		if ((ld_dword(fs->win + BS_FilSysType) & 0xFFFFFF) == 0x544146) return 0;	/* Check "FAT" string */
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	3334      	adds	r3, #52	; 0x34
 8007426:	3336      	adds	r3, #54	; 0x36
 8007428:	4618      	mov	r0, r3
 800742a:	f7fe fa75 	bl	8005918 <ld_dword>
 800742e:	4603      	mov	r3, r0
 8007430:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8007434:	4a0a      	ldr	r2, [pc, #40]	; (8007460 <check_fs+0xa4>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d101      	bne.n	800743e <check_fs+0x82>
 800743a:	2300      	movs	r3, #0
 800743c:	e00c      	b.n	8007458 <check_fs+0x9c>
		if (ld_dword(fs->win + BS_FilSysType32) == 0x33544146) return 0;			/* Check "FAT3" string */
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	3334      	adds	r3, #52	; 0x34
 8007442:	3352      	adds	r3, #82	; 0x52
 8007444:	4618      	mov	r0, r3
 8007446:	f7fe fa67 	bl	8005918 <ld_dword>
 800744a:	4602      	mov	r2, r0
 800744c:	4b05      	ldr	r3, [pc, #20]	; (8007464 <check_fs+0xa8>)
 800744e:	429a      	cmp	r2, r3
 8007450:	d101      	bne.n	8007456 <check_fs+0x9a>
 8007452:	2300      	movs	r3, #0
 8007454:	e000      	b.n	8007458 <check_fs+0x9c>
	}
#if _FS_EXFAT
	if (!mem_cmp(fs->win + BS_JmpBoot, "\xEB\x76\x90" "EXFAT   ", 11)) return 1;
#endif
	return 2;
 8007456:	2302      	movs	r3, #2
}
 8007458:	4618      	mov	r0, r3
 800745a:	3708      	adds	r7, #8
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}
 8007460:	00544146 	.word	0x00544146
 8007464:	33544146 	.word	0x33544146

08007468 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	BYTE mode			/* !=0: Check write protection for write access */
)
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b096      	sub	sp, #88	; 0x58
 800746c:	af00      	add	r7, sp, #0
 800746e:	60f8      	str	r0, [r7, #12]
 8007470:	60b9      	str	r1, [r7, #8]
 8007472:	4613      	mov	r3, r2
 8007474:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number */
	*rfs = 0;
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	2200      	movs	r2, #0
 800747a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800747c:	68f8      	ldr	r0, [r7, #12]
 800747e:	f7ff ff58 	bl	8007332 <get_ldnumber>
 8007482:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8007484:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007486:	2b00      	cmp	r3, #0
 8007488:	da01      	bge.n	800748e <find_volume+0x26>
 800748a:	230b      	movs	r3, #11
 800748c:	e231      	b.n	80078f2 <find_volume+0x48a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800748e:	4aa8      	ldr	r2, [pc, #672]	; (8007730 <find_volume+0x2c8>)
 8007490:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007496:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 8007498:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800749a:	2b00      	cmp	r3, #0
 800749c:	d101      	bne.n	80074a2 <find_volume+0x3a>
 800749e:	230c      	movs	r3, #12
 80074a0:	e227      	b.n	80078f2 <find_volume+0x48a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80074a6:	601a      	str	r2, [r3, #0]

	mode &= (BYTE)~FA_READ;				/* Desired access mode, write access or not */
 80074a8:	79fb      	ldrb	r3, [r7, #7]
 80074aa:	f023 0301 	bic.w	r3, r3, #1
 80074ae:	71fb      	strb	r3, [r7, #7]
	if (fs->fs_type) {					/* If the volume has been mounted */
 80074b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074b2:	781b      	ldrb	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d01a      	beq.n	80074ee <find_volume+0x86>
		stat = disk_status(fs->drv);
 80074b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074ba:	785b      	ldrb	r3, [r3, #1]
 80074bc:	4618      	mov	r0, r3
 80074be:	f7fe f975 	bl	80057ac <disk_status>
 80074c2:	4603      	mov	r3, r0
 80074c4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80074c8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074cc:	f003 0301 	and.w	r3, r3, #1
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d10c      	bne.n	80074ee <find_volume+0x86>
			if (!_FS_READONLY && mode && (stat & STA_PROTECT)) {	/* Check write protection if needed */
 80074d4:	79fb      	ldrb	r3, [r7, #7]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d007      	beq.n	80074ea <find_volume+0x82>
 80074da:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80074de:	f003 0304 	and.w	r3, r3, #4
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d001      	beq.n	80074ea <find_volume+0x82>
				return FR_WRITE_PROTECTED;
 80074e6:	230a      	movs	r3, #10
 80074e8:	e203      	b.n	80078f2 <find_volume+0x48a>
			}
			return FR_OK;				/* The file system object is valid */
 80074ea:	2300      	movs	r3, #0
 80074ec:	e201      	b.n	80078f2 <find_volume+0x48a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80074ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074f0:	2200      	movs	r2, #0
 80074f2:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80074f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074f6:	b2da      	uxtb	r2, r3
 80074f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fa:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 80074fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80074fe:	785b      	ldrb	r3, [r3, #1]
 8007500:	4618      	mov	r0, r3
 8007502:	f7fe f96d 	bl	80057e0 <disk_initialize>
 8007506:	4603      	mov	r3, r0
 8007508:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT) { 			/* Check if the initialization succeeded */
 800750c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007510:	f003 0301 	and.w	r3, r3, #1
 8007514:	2b00      	cmp	r3, #0
 8007516:	d001      	beq.n	800751c <find_volume+0xb4>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8007518:	2303      	movs	r3, #3
 800751a:	e1ea      	b.n	80078f2 <find_volume+0x48a>
	}
	if (!_FS_READONLY && mode && (stat & STA_PROTECT)) { /* Check disk write protection if needed */
 800751c:	79fb      	ldrb	r3, [r7, #7]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d007      	beq.n	8007532 <find_volume+0xca>
 8007522:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8007526:	f003 0304 	and.w	r3, r3, #4
 800752a:	2b00      	cmp	r3, #0
 800752c:	d001      	beq.n	8007532 <find_volume+0xca>
		return FR_WRITE_PROTECTED;
 800752e:	230a      	movs	r3, #10
 8007530:	e1df      	b.n	80078f2 <find_volume+0x48a>
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK) return FR_DISK_ERR;
	if (SS(fs) > _MAX_SS || SS(fs) < _MIN_SS || (SS(fs) & (SS(fs) - 1))) return FR_DISK_ERR;
#endif

	/* Find an FAT partition on the drive. Supports only generic partitioning rules, FDISK and SFD. */
	bsect = 0;
 8007532:	2300      	movs	r3, #0
 8007534:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);			/* Load sector 0 and check if it is an FAT-VBR as SFD */
 8007536:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007538:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800753a:	f7ff ff3f 	bl	80073bc <check_fs>
 800753e:	4603      	mov	r3, r0
 8007540:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 2 || (fmt < 2 && LD2PT(vol) != 0)) {	/* Not an FAT-VBR or forced partition number */
 8007544:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007548:	2b02      	cmp	r3, #2
 800754a:	d14b      	bne.n	80075e4 <find_volume+0x17c>
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800754c:	2300      	movs	r3, #0
 800754e:	643b      	str	r3, [r7, #64]	; 0x40
 8007550:	e01f      	b.n	8007592 <find_volume+0x12a>
			pt = fs->win + (MBR_Table + i * SZ_PTE);
 8007552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007554:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8007558:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800755a:	011b      	lsls	r3, r3, #4
 800755c:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8007560:	4413      	add	r3, r2
 8007562:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[PTE_System] ? ld_dword(pt + PTE_StLba) : 0;
 8007564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007566:	3304      	adds	r3, #4
 8007568:	781b      	ldrb	r3, [r3, #0]
 800756a:	2b00      	cmp	r3, #0
 800756c:	d006      	beq.n	800757c <find_volume+0x114>
 800756e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007570:	3308      	adds	r3, #8
 8007572:	4618      	mov	r0, r3
 8007574:	f7fe f9d0 	bl	8005918 <ld_dword>
 8007578:	4602      	mov	r2, r0
 800757a:	e000      	b.n	800757e <find_volume+0x116>
 800757c:	2200      	movs	r2, #0
 800757e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007580:	009b      	lsls	r3, r3, #2
 8007582:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8007586:	440b      	add	r3, r1
 8007588:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {		/* Get partition offset */
 800758c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800758e:	3301      	adds	r3, #1
 8007590:	643b      	str	r3, [r7, #64]	; 0x40
 8007592:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007594:	2b03      	cmp	r3, #3
 8007596:	d9dc      	bls.n	8007552 <find_volume+0xea>
		}
		i = LD2PT(vol);					/* Partition number: 0:auto, 1-4:forced */
 8007598:	2300      	movs	r3, #0
 800759a:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 800759c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d002      	beq.n	80075a8 <find_volume+0x140>
 80075a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075a4:	3b01      	subs	r3, #1
 80075a6:	643b      	str	r3, [r7, #64]	; 0x40
		do {							/* Find an FAT volume */
			bsect = br[i];
 80075a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075aa:	009b      	lsls	r3, r3, #2
 80075ac:	f107 0258 	add.w	r2, r7, #88	; 0x58
 80075b0:	4413      	add	r3, r2
 80075b2:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80075b6:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 3;	/* Check the partition */
 80075b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d005      	beq.n	80075ca <find_volume+0x162>
 80075be:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80075c0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80075c2:	f7ff fefb 	bl	80073bc <check_fs>
 80075c6:	4603      	mov	r3, r0
 80075c8:	e000      	b.n	80075cc <find_volume+0x164>
 80075ca:	2303      	movs	r3, #3
 80075cc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (LD2PT(vol) == 0 && fmt >= 2 && ++i < 4);
 80075d0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075d4:	2b01      	cmp	r3, #1
 80075d6:	d905      	bls.n	80075e4 <find_volume+0x17c>
 80075d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075da:	3301      	adds	r3, #1
 80075dc:	643b      	str	r3, [r7, #64]	; 0x40
 80075de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e0:	2b03      	cmp	r3, #3
 80075e2:	d9e1      	bls.n	80075a8 <find_volume+0x140>
	}
	if (fmt == 4) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 80075e4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075e8:	2b04      	cmp	r3, #4
 80075ea:	d101      	bne.n	80075f0 <find_volume+0x188>
 80075ec:	2301      	movs	r3, #1
 80075ee:	e180      	b.n	80078f2 <find_volume+0x48a>
	if (fmt >= 2) return FR_NO_FILESYSTEM;	/* No FAT volume is found */
 80075f0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80075f4:	2b01      	cmp	r3, #1
 80075f6:	d901      	bls.n	80075fc <find_volume+0x194>
 80075f8:	230d      	movs	r3, #13
 80075fa:	e17a      	b.n	80078f2 <find_volume+0x48a>
#endif
		fmt = FS_EXFAT;			/* FAT sub-type */
	} else
#endif	/* _FS_EXFAT */
	{
		if (ld_word(fs->win + BPB_BytsPerSec) != SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 80075fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80075fe:	3334      	adds	r3, #52	; 0x34
 8007600:	330b      	adds	r3, #11
 8007602:	4618      	mov	r0, r3
 8007604:	f7fe f970 	bl	80058e8 <ld_word>
 8007608:	4603      	mov	r3, r0
 800760a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800760e:	d001      	beq.n	8007614 <find_volume+0x1ac>
 8007610:	230d      	movs	r3, #13
 8007612:	e16e      	b.n	80078f2 <find_volume+0x48a>

		fasize = ld_word(fs->win + BPB_FATSz16);		/* Number of sectors per FAT */
 8007614:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007616:	3334      	adds	r3, #52	; 0x34
 8007618:	3316      	adds	r3, #22
 800761a:	4618      	mov	r0, r3
 800761c:	f7fe f964 	bl	80058e8 <ld_word>
 8007620:	4603      	mov	r3, r0
 8007622:	64fb      	str	r3, [r7, #76]	; 0x4c
		if (fasize == 0) fasize = ld_dword(fs->win + BPB_FATSz32);
 8007624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007626:	2b00      	cmp	r3, #0
 8007628:	d106      	bne.n	8007638 <find_volume+0x1d0>
 800762a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800762c:	3334      	adds	r3, #52	; 0x34
 800762e:	3324      	adds	r3, #36	; 0x24
 8007630:	4618      	mov	r0, r3
 8007632:	f7fe f971 	bl	8005918 <ld_dword>
 8007636:	64f8      	str	r0, [r7, #76]	; 0x4c
		fs->fsize = fasize;
 8007638:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800763a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800763c:	61da      	str	r2, [r3, #28]

		fs->n_fats = fs->win[BPB_NumFATs];				/* Number of FATs */
 800763e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007640:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 8007644:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007646:	709a      	strb	r2, [r3, #2]
		if (fs->n_fats != 1 && fs->n_fats != 2) return FR_NO_FILESYSTEM;	/* (Must be 1 or 2) */
 8007648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800764a:	789b      	ldrb	r3, [r3, #2]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d005      	beq.n	800765c <find_volume+0x1f4>
 8007650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007652:	789b      	ldrb	r3, [r3, #2]
 8007654:	2b02      	cmp	r3, #2
 8007656:	d001      	beq.n	800765c <find_volume+0x1f4>
 8007658:	230d      	movs	r3, #13
 800765a:	e14a      	b.n	80078f2 <find_volume+0x48a>
		fasize *= fs->n_fats;							/* Number of sectors for FAT area */
 800765c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800765e:	789b      	ldrb	r3, [r3, #2]
 8007660:	461a      	mov	r2, r3
 8007662:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007664:	fb02 f303 	mul.w	r3, r2, r3
 8007668:	64fb      	str	r3, [r7, #76]	; 0x4c

		fs->csize = fs->win[BPB_SecPerClus];			/* Cluster size */
 800766a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800766c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007670:	b29a      	uxth	r2, r3
 8007672:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007674:	815a      	strh	r2, [r3, #10]
		if (fs->csize == 0 || (fs->csize & (fs->csize - 1))) return FR_NO_FILESYSTEM;	/* (Must be power of 2) */
 8007676:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007678:	895b      	ldrh	r3, [r3, #10]
 800767a:	2b00      	cmp	r3, #0
 800767c:	d008      	beq.n	8007690 <find_volume+0x228>
 800767e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007680:	895b      	ldrh	r3, [r3, #10]
 8007682:	461a      	mov	r2, r3
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	895b      	ldrh	r3, [r3, #10]
 8007688:	3b01      	subs	r3, #1
 800768a:	4013      	ands	r3, r2
 800768c:	2b00      	cmp	r3, #0
 800768e:	d001      	beq.n	8007694 <find_volume+0x22c>
 8007690:	230d      	movs	r3, #13
 8007692:	e12e      	b.n	80078f2 <find_volume+0x48a>

		fs->n_rootdir = ld_word(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 8007694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007696:	3334      	adds	r3, #52	; 0x34
 8007698:	3311      	adds	r3, #17
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe f924 	bl	80058e8 <ld_word>
 80076a0:	4603      	mov	r3, r0
 80076a2:	461a      	mov	r2, r3
 80076a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076a6:	811a      	strh	r2, [r3, #8]
		if (fs->n_rootdir % (SS(fs) / SZDIRE)) return FR_NO_FILESYSTEM;	/* (Must be sector aligned) */
 80076a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076aa:	891b      	ldrh	r3, [r3, #8]
 80076ac:	f003 030f 	and.w	r3, r3, #15
 80076b0:	b29b      	uxth	r3, r3
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d001      	beq.n	80076ba <find_volume+0x252>
 80076b6:	230d      	movs	r3, #13
 80076b8:	e11b      	b.n	80078f2 <find_volume+0x48a>

		tsect = ld_word(fs->win + BPB_TotSec16);		/* Number of sectors on the volume */
 80076ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076bc:	3334      	adds	r3, #52	; 0x34
 80076be:	3313      	adds	r3, #19
 80076c0:	4618      	mov	r0, r3
 80076c2:	f7fe f911 	bl	80058e8 <ld_word>
 80076c6:	4603      	mov	r3, r0
 80076c8:	64bb      	str	r3, [r7, #72]	; 0x48
		if (tsect == 0) tsect = ld_dword(fs->win + BPB_TotSec32);
 80076ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d106      	bne.n	80076de <find_volume+0x276>
 80076d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076d2:	3334      	adds	r3, #52	; 0x34
 80076d4:	3320      	adds	r3, #32
 80076d6:	4618      	mov	r0, r3
 80076d8:	f7fe f91e 	bl	8005918 <ld_dword>
 80076dc:	64b8      	str	r0, [r7, #72]	; 0x48

		nrsv = ld_word(fs->win + BPB_RsvdSecCnt);		/* Number of reserved sectors */
 80076de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076e0:	3334      	adds	r3, #52	; 0x34
 80076e2:	330e      	adds	r3, #14
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fe f8ff 	bl	80058e8 <ld_word>
 80076ea:	4603      	mov	r3, r0
 80076ec:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (nrsv == 0) return FR_NO_FILESYSTEM;			/* (Must not be 0) */
 80076ee:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	d101      	bne.n	80076f8 <find_volume+0x290>
 80076f4:	230d      	movs	r3, #13
 80076f6:	e0fc      	b.n	80078f2 <find_volume+0x48a>

		/* Determine the FAT sub type */
		sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZDIRE);	/* RSV + FAT + DIR */
 80076f8:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80076fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076fc:	4413      	add	r3, r2
 80076fe:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007700:	8912      	ldrh	r2, [r2, #8]
 8007702:	0912      	lsrs	r2, r2, #4
 8007704:	b292      	uxth	r2, r2
 8007706:	4413      	add	r3, r2
 8007708:	62bb      	str	r3, [r7, #40]	; 0x28
		if (tsect < sysect) return FR_NO_FILESYSTEM;	/* (Invalid volume size) */
 800770a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800770c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800770e:	429a      	cmp	r2, r3
 8007710:	d201      	bcs.n	8007716 <find_volume+0x2ae>
 8007712:	230d      	movs	r3, #13
 8007714:	e0ed      	b.n	80078f2 <find_volume+0x48a>
		nclst = (tsect - sysect) / fs->csize;			/* Number of clusters */
 8007716:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007718:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771a:	1ad3      	subs	r3, r2, r3
 800771c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800771e:	8952      	ldrh	r2, [r2, #10]
 8007720:	fbb3 f3f2 	udiv	r3, r3, r2
 8007724:	627b      	str	r3, [r7, #36]	; 0x24
		if (nclst == 0) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8007726:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007728:	2b00      	cmp	r3, #0
 800772a:	d103      	bne.n	8007734 <find_volume+0x2cc>
 800772c:	230d      	movs	r3, #13
 800772e:	e0e0      	b.n	80078f2 <find_volume+0x48a>
 8007730:	20000030 	.word	0x20000030
		fmt = FS_FAT32;
 8007734:	2303      	movs	r3, #3
 8007736:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT16) fmt = FS_FAT16;
 800773a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800773c:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 8007740:	4293      	cmp	r3, r2
 8007742:	d802      	bhi.n	800774a <find_volume+0x2e2>
 8007744:	2302      	movs	r3, #2
 8007746:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		if (nclst <= MAX_FAT12) fmt = FS_FAT12;
 800774a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800774c:	f640 72f5 	movw	r2, #4085	; 0xff5
 8007750:	4293      	cmp	r3, r2
 8007752:	d802      	bhi.n	800775a <find_volume+0x2f2>
 8007754:	2301      	movs	r3, #1
 8007756:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

		/* Boundaries and Limits */
		fs->n_fatent = nclst + 2;						/* Number of FAT entries */
 800775a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800775c:	1c9a      	adds	r2, r3, #2
 800775e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007760:	619a      	str	r2, [r3, #24]
		fs->volbase = bsect;							/* Volume start sector */
 8007762:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007764:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007766:	621a      	str	r2, [r3, #32]
		fs->fatbase = bsect + nrsv; 					/* FAT start sector */
 8007768:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800776a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800776c:	441a      	add	r2, r3
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	625a      	str	r2, [r3, #36]	; 0x24
		fs->database = bsect + sysect;					/* Data start sector */
 8007772:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8007774:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007776:	441a      	add	r2, r3
 8007778:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800777a:	62da      	str	r2, [r3, #44]	; 0x2c
		if (fmt == FS_FAT32) {
 800777c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007780:	2b03      	cmp	r3, #3
 8007782:	d11e      	bne.n	80077c2 <find_volume+0x35a>
			if (ld_word(fs->win + BPB_FSVer32) != 0) return FR_NO_FILESYSTEM;	/* (Must be FAT32 revision 0.0) */
 8007784:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007786:	3334      	adds	r3, #52	; 0x34
 8007788:	332a      	adds	r3, #42	; 0x2a
 800778a:	4618      	mov	r0, r3
 800778c:	f7fe f8ac 	bl	80058e8 <ld_word>
 8007790:	4603      	mov	r3, r0
 8007792:	2b00      	cmp	r3, #0
 8007794:	d001      	beq.n	800779a <find_volume+0x332>
 8007796:	230d      	movs	r3, #13
 8007798:	e0ab      	b.n	80078f2 <find_volume+0x48a>
			if (fs->n_rootdir) return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must be 0) */
 800779a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800779c:	891b      	ldrh	r3, [r3, #8]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d001      	beq.n	80077a6 <find_volume+0x33e>
 80077a2:	230d      	movs	r3, #13
 80077a4:	e0a5      	b.n	80078f2 <find_volume+0x48a>
			fs->dirbase = ld_dword(fs->win + BPB_RootClus32);	/* Root directory start cluster */
 80077a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077a8:	3334      	adds	r3, #52	; 0x34
 80077aa:	332c      	adds	r3, #44	; 0x2c
 80077ac:	4618      	mov	r0, r3
 80077ae:	f7fe f8b3 	bl	8005918 <ld_dword>
 80077b2:	4602      	mov	r2, r0
 80077b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077b6:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = fs->n_fatent * 4;					/* (Needed FAT size) */
 80077b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	009b      	lsls	r3, r3, #2
 80077be:	647b      	str	r3, [r7, #68]	; 0x44
 80077c0:	e01f      	b.n	8007802 <find_volume+0x39a>
		} else {
			if (fs->n_rootdir == 0)	return FR_NO_FILESYSTEM;/* (BPB_RootEntCnt must not be 0) */
 80077c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077c4:	891b      	ldrh	r3, [r3, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d101      	bne.n	80077ce <find_volume+0x366>
 80077ca:	230d      	movs	r3, #13
 80077cc:	e091      	b.n	80078f2 <find_volume+0x48a>
			fs->dirbase = fs->fatbase + fasize;			/* Root directory start sector */
 80077ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80077d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80077d4:	441a      	add	r2, r3
 80077d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077d8:	629a      	str	r2, [r3, #40]	; 0x28
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
				fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 80077da:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80077de:	2b02      	cmp	r3, #2
 80077e0:	d103      	bne.n	80077ea <find_volume+0x382>
 80077e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077e4:	699b      	ldr	r3, [r3, #24]
 80077e6:	005b      	lsls	r3, r3, #1
 80077e8:	e00a      	b.n	8007800 <find_volume+0x398>
 80077ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077ec:	699a      	ldr	r2, [r3, #24]
 80077ee:	4613      	mov	r3, r2
 80077f0:	005b      	lsls	r3, r3, #1
 80077f2:	4413      	add	r3, r2
 80077f4:	085a      	lsrs	r2, r3, #1
 80077f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80077f8:	699b      	ldr	r3, [r3, #24]
 80077fa:	f003 0301 	and.w	r3, r3, #1
 80077fe:	4413      	add	r3, r2
			szbfat = (fmt == FS_FAT16) ?				/* (Needed FAT size) */
 8007800:	647b      	str	r3, [r7, #68]	; 0x44
		}
		if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs)) return FR_NO_FILESYSTEM;	/* (BPB_FATSz must not be less than the size needed) */
 8007802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007804:	69da      	ldr	r2, [r3, #28]
 8007806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007808:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 800780c:	0a5b      	lsrs	r3, r3, #9
 800780e:	429a      	cmp	r2, r3
 8007810:	d201      	bcs.n	8007816 <find_volume+0x3ae>
 8007812:	230d      	movs	r3, #13
 8007814:	e06d      	b.n	80078f2 <find_volume+0x48a>

#if !_FS_READONLY
		/* Get FSINFO if available */
		fs->last_clst = fs->free_clst = 0xFFFFFFFF;		/* Initialize cluster allocation information */
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007818:	f04f 32ff 	mov.w	r2, #4294967295
 800781c:	615a      	str	r2, [r3, #20]
 800781e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007820:	695a      	ldr	r2, [r3, #20]
 8007822:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007824:	611a      	str	r2, [r3, #16]
		fs->fsi_flag = 0x80;
 8007826:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007828:	2280      	movs	r2, #128	; 0x80
 800782a:	711a      	strb	r2, [r3, #4]
#if (_FS_NOFSINFO & 3) != 3
		if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo32 == 1 */
 800782c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8007830:	2b03      	cmp	r3, #3
 8007832:	d149      	bne.n	80078c8 <find_volume+0x460>
			&& ld_word(fs->win + BPB_FSInfo32) == 1
 8007834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007836:	3334      	adds	r3, #52	; 0x34
 8007838:	3330      	adds	r3, #48	; 0x30
 800783a:	4618      	mov	r0, r3
 800783c:	f7fe f854 	bl	80058e8 <ld_word>
 8007840:	4603      	mov	r3, r0
 8007842:	2b01      	cmp	r3, #1
 8007844:	d140      	bne.n	80078c8 <find_volume+0x460>
			&& move_window(fs, bsect + 1) == FR_OK)
 8007846:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007848:	3301      	adds	r3, #1
 800784a:	4619      	mov	r1, r3
 800784c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800784e:	f7fe fafb 	bl	8005e48 <move_window>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d137      	bne.n	80078c8 <find_volume+0x460>
		{
			fs->fsi_flag = 0;
 8007858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800785a:	2200      	movs	r2, #0
 800785c:	711a      	strb	r2, [r3, #4]
			if (ld_word(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 800785e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007860:	3334      	adds	r3, #52	; 0x34
 8007862:	f503 73ff 	add.w	r3, r3, #510	; 0x1fe
 8007866:	4618      	mov	r0, r3
 8007868:	f7fe f83e 	bl	80058e8 <ld_word>
 800786c:	4603      	mov	r3, r0
 800786e:	461a      	mov	r2, r3
 8007870:	f64a 2355 	movw	r3, #43605	; 0xaa55
 8007874:	429a      	cmp	r2, r3
 8007876:	d127      	bne.n	80078c8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_LeadSig) == 0x41615252
 8007878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800787a:	3334      	adds	r3, #52	; 0x34
 800787c:	4618      	mov	r0, r3
 800787e:	f7fe f84b 	bl	8005918 <ld_dword>
 8007882:	4602      	mov	r2, r0
 8007884:	4b1d      	ldr	r3, [pc, #116]	; (80078fc <find_volume+0x494>)
 8007886:	429a      	cmp	r2, r3
 8007888:	d11e      	bne.n	80078c8 <find_volume+0x460>
				&& ld_dword(fs->win + FSI_StrucSig) == 0x61417272)
 800788a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800788c:	3334      	adds	r3, #52	; 0x34
 800788e:	f503 73f2 	add.w	r3, r3, #484	; 0x1e4
 8007892:	4618      	mov	r0, r3
 8007894:	f7fe f840 	bl	8005918 <ld_dword>
 8007898:	4602      	mov	r2, r0
 800789a:	4b19      	ldr	r3, [pc, #100]	; (8007900 <find_volume+0x498>)
 800789c:	429a      	cmp	r2, r3
 800789e:	d113      	bne.n	80078c8 <find_volume+0x460>
			{
#if (_FS_NOFSINFO & 1) == 0
				fs->free_clst = ld_dword(fs->win + FSI_Free_Count);
 80078a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078a2:	3334      	adds	r3, #52	; 0x34
 80078a4:	f503 73f4 	add.w	r3, r3, #488	; 0x1e8
 80078a8:	4618      	mov	r0, r3
 80078aa:	f7fe f835 	bl	8005918 <ld_dword>
 80078ae:	4602      	mov	r2, r0
 80078b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b2:	615a      	str	r2, [r3, #20]
#endif
#if (_FS_NOFSINFO & 2) == 0
				fs->last_clst = ld_dword(fs->win + FSI_Nxt_Free);
 80078b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078b6:	3334      	adds	r3, #52	; 0x34
 80078b8:	f503 73f6 	add.w	r3, r3, #492	; 0x1ec
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe f82b 	bl	8005918 <ld_dword>
 80078c2:	4602      	mov	r2, r0
 80078c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078c6:	611a      	str	r2, [r3, #16]
		}
#endif	/* (_FS_NOFSINFO & 3) != 3 */
#endif	/* !_FS_READONLY */
	}

	fs->fs_type = fmt;		/* FAT sub-type */
 80078c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ca:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80078ce:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;		/* File system mount ID */
 80078d0:	4b0c      	ldr	r3, [pc, #48]	; (8007904 <find_volume+0x49c>)
 80078d2:	881b      	ldrh	r3, [r3, #0]
 80078d4:	3301      	adds	r3, #1
 80078d6:	b29a      	uxth	r2, r3
 80078d8:	4b0a      	ldr	r3, [pc, #40]	; (8007904 <find_volume+0x49c>)
 80078da:	801a      	strh	r2, [r3, #0]
 80078dc:	4b09      	ldr	r3, [pc, #36]	; (8007904 <find_volume+0x49c>)
 80078de:	881a      	ldrh	r2, [r3, #0]
 80078e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e2:	80da      	strh	r2, [r3, #6]
#if _USE_LFN == 1
	fs->lfnbuf = LfnBuf;	/* Static LFN working buffer */
 80078e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078e6:	4a08      	ldr	r2, [pc, #32]	; (8007908 <find_volume+0x4a0>)
 80078e8:	60da      	str	r2, [r3, #12]
#endif
#if _FS_RPATH != 0
	fs->cdir = 0;			/* Initialize current directory */
#endif
#if _FS_LOCK != 0			/* Clear file lock semaphores */
	clear_lock(fs);
 80078ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80078ec:	f7fe fa44 	bl	8005d78 <clear_lock>
#endif
	return FR_OK;
 80078f0:	2300      	movs	r3, #0
}
 80078f2:	4618      	mov	r0, r3
 80078f4:	3758      	adds	r7, #88	; 0x58
 80078f6:	46bd      	mov	sp, r7
 80078f8:	bd80      	pop	{r7, pc}
 80078fa:	bf00      	nop
 80078fc:	41615252 	.word	0x41615252
 8007900:	61417272 	.word	0x61417272
 8007904:	20000034 	.word	0x20000034
 8007908:	20000058 	.word	0x20000058

0800790c <validate>:
static
FRESULT validate (	/* Returns FR_OK or FR_INVALID_OBJECT */
	_FDID* obj,		/* Pointer to the _OBJ, the 1st member in the FIL/DIR object, to check validity */
	FATFS** fs		/* Pointer to pointer to the owner file system object to return */
)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_INVALID_OBJECT;
 8007916:	2309      	movs	r3, #9
 8007918:	73fb      	strb	r3, [r7, #15]


	if (obj && obj->fs && obj->fs->fs_type && obj->id == obj->fs->id) {	/* Test if the object is valid */
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d01c      	beq.n	800795a <validate+0x4e>
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	2b00      	cmp	r3, #0
 8007926:	d018      	beq.n	800795a <validate+0x4e>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	781b      	ldrb	r3, [r3, #0]
 800792e:	2b00      	cmp	r3, #0
 8007930:	d013      	beq.n	800795a <validate+0x4e>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	889a      	ldrh	r2, [r3, #4]
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
 800793a:	88db      	ldrh	r3, [r3, #6]
 800793c:	429a      	cmp	r2, r3
 800793e:	d10c      	bne.n	800795a <validate+0x4e>
			}
		} else {
			res = FR_TIMEOUT;
		}
#else
		if (!(disk_status(obj->fs->drv) & STA_NOINIT)) { /* Test if the phsical drive is kept initialized */
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	785b      	ldrb	r3, [r3, #1]
 8007946:	4618      	mov	r0, r3
 8007948:	f7fd ff30 	bl	80057ac <disk_status>
 800794c:	4603      	mov	r3, r0
 800794e:	f003 0301 	and.w	r3, r3, #1
 8007952:	2b00      	cmp	r3, #0
 8007954:	d101      	bne.n	800795a <validate+0x4e>
			res = FR_OK;
 8007956:	2300      	movs	r3, #0
 8007958:	73fb      	strb	r3, [r7, #15]
		}
#endif
	}
	*fs = (res == FR_OK) ? obj->fs : 0;	/* Corresponding filesystem object */
 800795a:	7bfb      	ldrb	r3, [r7, #15]
 800795c:	2b00      	cmp	r3, #0
 800795e:	d102      	bne.n	8007966 <validate+0x5a>
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	e000      	b.n	8007968 <validate+0x5c>
 8007966:	2300      	movs	r3, #0
 8007968:	683a      	ldr	r2, [r7, #0]
 800796a:	6013      	str	r3, [r2, #0]
	return res;
 800796c:	7bfb      	ldrb	r3, [r7, #15]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3710      	adds	r7, #16
 8007972:	46bd      	mov	sp, r7
 8007974:	bd80      	pop	{r7, pc}
	...

08007978 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* Mode option 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b088      	sub	sp, #32
 800797c:	af00      	add	r7, sp, #0
 800797e:	60f8      	str	r0, [r7, #12]
 8007980:	60b9      	str	r1, [r7, #8]
 8007982:	4613      	mov	r3, r2
 8007984:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8007986:	68bb      	ldr	r3, [r7, #8]
 8007988:	613b      	str	r3, [r7, #16]


	/* Get logical drive number */
	vol = get_ldnumber(&rp);
 800798a:	f107 0310 	add.w	r3, r7, #16
 800798e:	4618      	mov	r0, r3
 8007990:	f7ff fccf 	bl	8007332 <get_ldnumber>
 8007994:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8007996:	69fb      	ldr	r3, [r7, #28]
 8007998:	2b00      	cmp	r3, #0
 800799a:	da01      	bge.n	80079a0 <f_mount+0x28>
 800799c:	230b      	movs	r3, #11
 800799e:	e02b      	b.n	80079f8 <f_mount+0x80>
	cfs = FatFs[vol];					/* Pointer to fs object */
 80079a0:	4a17      	ldr	r2, [pc, #92]	; (8007a00 <f_mount+0x88>)
 80079a2:	69fb      	ldr	r3, [r7, #28]
 80079a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80079a8:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 80079aa:	69bb      	ldr	r3, [r7, #24]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d005      	beq.n	80079bc <f_mount+0x44>
#if _FS_LOCK != 0
		clear_lock(cfs);
 80079b0:	69b8      	ldr	r0, [r7, #24]
 80079b2:	f7fe f9e1 	bl	8005d78 <clear_lock>
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 80079b6:	69bb      	ldr	r3, [r7, #24]
 80079b8:	2200      	movs	r2, #0
 80079ba:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d002      	beq.n	80079c8 <f_mount+0x50>
		fs->fs_type = 0;				/* Clear new fs object */
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	2200      	movs	r2, #0
 80079c6:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 80079c8:	68fa      	ldr	r2, [r7, #12]
 80079ca:	490d      	ldr	r1, [pc, #52]	; (8007a00 <f_mount+0x88>)
 80079cc:	69fb      	ldr	r3, [r7, #28]
 80079ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2b00      	cmp	r3, #0
 80079d6:	d002      	beq.n	80079de <f_mount+0x66>
 80079d8:	79fb      	ldrb	r3, [r7, #7]
 80079da:	2b01      	cmp	r3, #1
 80079dc:	d001      	beq.n	80079e2 <f_mount+0x6a>
 80079de:	2300      	movs	r3, #0
 80079e0:	e00a      	b.n	80079f8 <f_mount+0x80>

	res = find_volume(&path, &fs, 0);	/* Force mounted the volume */
 80079e2:	f107 010c 	add.w	r1, r7, #12
 80079e6:	f107 0308 	add.w	r3, r7, #8
 80079ea:	2200      	movs	r2, #0
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7ff fd3b 	bl	8007468 <find_volume>
 80079f2:	4603      	mov	r3, r0
 80079f4:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80079f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3720      	adds	r7, #32
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}
 8007a00:	20000030 	.word	0x20000030

08007a04 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b09a      	sub	sp, #104	; 0x68
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	60f8      	str	r0, [r7, #12]
 8007a0c:	60b9      	str	r1, [r7, #8]
 8007a0e:	4613      	mov	r3, r2
 8007a10:	71fb      	strb	r3, [r7, #7]
	FSIZE_t ofs;
#endif
	DEF_NAMBUF


	if (!fp) return FR_INVALID_OBJECT;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d101      	bne.n	8007a1c <f_open+0x18>
 8007a18:	2309      	movs	r3, #9
 8007a1a:	e1ad      	b.n	8007d78 <f_open+0x374>

	/* Get logical drive */
	mode &= _FS_READONLY ? FA_READ : FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_CREATE_NEW | FA_OPEN_ALWAYS | FA_OPEN_APPEND | FA_SEEKEND;
 8007a1c:	79fb      	ldrb	r3, [r7, #7]
 8007a1e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007a22:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&path, &fs, mode);
 8007a24:	79fa      	ldrb	r2, [r7, #7]
 8007a26:	f107 0114 	add.w	r1, r7, #20
 8007a2a:	f107 0308 	add.w	r3, r7, #8
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7ff fd1a 	bl	8007468 <find_volume>
 8007a34:	4603      	mov	r3, r0
 8007a36:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
	if (res == FR_OK) {
 8007a3a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	f040 8191 	bne.w	8007d66 <f_open+0x362>
		dj.obj.fs = fs;
 8007a44:	697b      	ldr	r3, [r7, #20]
 8007a46:	61bb      	str	r3, [r7, #24]
		INIT_NAMBUF(fs);
		res = follow_path(&dj, path);	/* Follow the file path */
 8007a48:	68ba      	ldr	r2, [r7, #8]
 8007a4a:	f107 0318 	add.w	r3, r7, #24
 8007a4e:	4611      	mov	r1, r2
 8007a50:	4618      	mov	r0, r3
 8007a52:	f7ff fbfd 	bl	8007250 <follow_path>
 8007a56:	4603      	mov	r3, r0
 8007a58:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 8007a5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d11a      	bne.n	8007a9a <f_open+0x96>
			if (dj.fn[NSFLAG] & NS_NONAME) {	/* Origin directory itself? */
 8007a64:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007a68:	b25b      	sxtb	r3, r3
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	da03      	bge.n	8007a76 <f_open+0x72>
				res = FR_INVALID_NAME;
 8007a6e:	2306      	movs	r3, #6
 8007a70:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007a74:	e011      	b.n	8007a9a <f_open+0x96>
			}
#if _FS_LOCK != 0
			else {
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	f023 0301 	bic.w	r3, r3, #1
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	bf14      	ite	ne
 8007a80:	2301      	movne	r3, #1
 8007a82:	2300      	moveq	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	461a      	mov	r2, r3
 8007a88:	f107 0318 	add.w	r3, r7, #24
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	4618      	mov	r0, r3
 8007a90:	f7fe f82a 	bl	8005ae8 <chk_lock>
 8007a94:	4603      	mov	r3, r0
 8007a96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
			}
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 8007a9a:	79fb      	ldrb	r3, [r7, #7]
 8007a9c:	f003 031c 	and.w	r3, r3, #28
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d07f      	beq.n	8007ba4 <f_open+0x1a0>
			if (res != FR_OK) {					/* No file, create new */
 8007aa4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d017      	beq.n	8007adc <f_open+0xd8>
				if (res == FR_NO_FILE) {		/* There is no file to open, create a new entry */
 8007aac:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ab0:	2b04      	cmp	r3, #4
 8007ab2:	d10e      	bne.n	8007ad2 <f_open+0xce>
#if _FS_LOCK != 0
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
 8007ab4:	f7fe f874 	bl	8005ba0 <enq_lock>
 8007ab8:	4603      	mov	r3, r0
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d006      	beq.n	8007acc <f_open+0xc8>
 8007abe:	f107 0318 	add.w	r3, r7, #24
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f7ff f914 	bl	8006cf0 <dir_register>
 8007ac8:	4603      	mov	r3, r0
 8007aca:	e000      	b.n	8007ace <f_open+0xca>
 8007acc:	2312      	movs	r3, #18
 8007ace:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
#else
					res = dir_register(&dj);
#endif
				}
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 8007ad2:	79fb      	ldrb	r3, [r7, #7]
 8007ad4:	f043 0308 	orr.w	r3, r3, #8
 8007ad8:	71fb      	strb	r3, [r7, #7]
 8007ada:	e010      	b.n	8007afe <f_open+0xfa>
			}
			else {								/* Any object is already existing */
				if (dj.obj.attr & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8007adc:	7fbb      	ldrb	r3, [r7, #30]
 8007ade:	f003 0311 	and.w	r3, r3, #17
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <f_open+0xea>
					res = FR_DENIED;
 8007ae6:	2307      	movs	r3, #7
 8007ae8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007aec:	e007      	b.n	8007afe <f_open+0xfa>
				} else {
					if (mode & FA_CREATE_NEW) res = FR_EXIST;	/* Cannot create as new file */
 8007aee:	79fb      	ldrb	r3, [r7, #7]
 8007af0:	f003 0304 	and.w	r3, r3, #4
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d002      	beq.n	8007afe <f_open+0xfa>
 8007af8:	2308      	movs	r3, #8
 8007afa:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 8007afe:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d168      	bne.n	8007bd8 <f_open+0x1d4>
 8007b06:	79fb      	ldrb	r3, [r7, #7]
 8007b08:	f003 0308 	and.w	r3, r3, #8
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d063      	beq.n	8007bd8 <f_open+0x1d4>
				dw = GET_FATTIME();
 8007b10:	f7fd fbfc 	bl	800530c <get_fattime>
 8007b14:	65b8      	str	r0, [r7, #88]	; 0x58
					}
				} else
#endif
				{
					/* Clean directory info */
					st_dword(dj.dir + DIR_CrtTime, dw);	/* Set created time */
 8007b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b18:	330e      	adds	r3, #14
 8007b1a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b1c:	4618      	mov	r0, r3
 8007b1e:	f7fd ff39 	bl	8005994 <st_dword>
					st_dword(dj.dir + DIR_ModTime, dw);	/* Set modified time */
 8007b22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b24:	3316      	adds	r3, #22
 8007b26:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b28:	4618      	mov	r0, r3
 8007b2a:	f7fd ff33 	bl	8005994 <st_dword>
					dj.dir[DIR_Attr] = AM_ARC;			/* Reset attribute */
 8007b2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b30:	330b      	adds	r3, #11
 8007b32:	2220      	movs	r2, #32
 8007b34:	701a      	strb	r2, [r3, #0]
					cl = ld_clust(fs, dj.dir);			/* Get cluster chain */
 8007b36:	697b      	ldr	r3, [r7, #20]
 8007b38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007b3a:	4611      	mov	r1, r2
 8007b3c:	4618      	mov	r0, r3
 8007b3e:	f7fe fe4e 	bl	80067de <ld_clust>
 8007b42:	6578      	str	r0, [r7, #84]	; 0x54
					st_clust(fs, dj.dir, 0);			/* Reset file allocation info */
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8007b48:	2200      	movs	r2, #0
 8007b4a:	4618      	mov	r0, r3
 8007b4c:	f7fe fe66 	bl	800681c <st_clust>
					st_dword(dj.dir + DIR_FileSize, 0);
 8007b50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007b52:	331c      	adds	r3, #28
 8007b54:	2100      	movs	r1, #0
 8007b56:	4618      	mov	r0, r3
 8007b58:	f7fd ff1c 	bl	8005994 <st_dword>
					fs->wflag = 1;
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	70da      	strb	r2, [r3, #3]

					if (cl) {							/* Remove the cluster chain if exist */
 8007b62:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d037      	beq.n	8007bd8 <f_open+0x1d4>
						dw = fs->winsect;
 8007b68:	697b      	ldr	r3, [r7, #20]
 8007b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b6c:	65bb      	str	r3, [r7, #88]	; 0x58
						res = remove_chain(&dj.obj, cl, 0);
 8007b6e:	f107 0318 	add.w	r3, r7, #24
 8007b72:	2200      	movs	r2, #0
 8007b74:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007b76:	4618      	mov	r0, r3
 8007b78:	f7fe fbad 	bl	80062d6 <remove_chain>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
						if (res == FR_OK) {
 8007b82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d126      	bne.n	8007bd8 <f_open+0x1d4>
							res = move_window(fs, dw);
 8007b8a:	697b      	ldr	r3, [r7, #20]
 8007b8c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007b8e:	4618      	mov	r0, r3
 8007b90:	f7fe f95a 	bl	8005e48 <move_window>
 8007b94:	4603      	mov	r3, r0
 8007b96:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
							fs->last_clst = cl - 1;		/* Reuse the cluster hole */
 8007b9a:	697b      	ldr	r3, [r7, #20]
 8007b9c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007b9e:	3a01      	subs	r2, #1
 8007ba0:	611a      	str	r2, [r3, #16]
 8007ba2:	e019      	b.n	8007bd8 <f_open+0x1d4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Following succeeded */
 8007ba4:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d115      	bne.n	8007bd8 <f_open+0x1d4>
				if (dj.obj.attr & AM_DIR) {		/* It is a directory */
 8007bac:	7fbb      	ldrb	r3, [r7, #30]
 8007bae:	f003 0310 	and.w	r3, r3, #16
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d003      	beq.n	8007bbe <f_open+0x1ba>
					res = FR_NO_FILE;
 8007bb6:	2304      	movs	r3, #4
 8007bb8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007bbc:	e00c      	b.n	8007bd8 <f_open+0x1d4>
				} else {
					if ((mode & FA_WRITE) && (dj.obj.attr & AM_RDO)) { /* R/O violation */
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	f003 0302 	and.w	r3, r3, #2
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d007      	beq.n	8007bd8 <f_open+0x1d4>
 8007bc8:	7fbb      	ldrb	r3, [r7, #30]
 8007bca:	f003 0301 	and.w	r3, r3, #1
 8007bce:	2b00      	cmp	r3, #0
 8007bd0:	d002      	beq.n	8007bd8 <f_open+0x1d4>
						res = FR_DENIED;
 8007bd2:	2307      	movs	r3, #7
 8007bd4:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					}
				}
			}
		}
		if (res == FR_OK) {
 8007bd8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d128      	bne.n	8007c32 <f_open+0x22e>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8007be0:	79fb      	ldrb	r3, [r7, #7]
 8007be2:	f003 0308 	and.w	r3, r3, #8
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d003      	beq.n	8007bf2 <f_open+0x1ee>
				mode |= FA_MODIFIED;
 8007bea:	79fb      	ldrb	r3, [r7, #7]
 8007bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007bf0:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = fs->winsect;			/* Pointer to the directory entry */
 8007bf2:	697b      	ldr	r3, [r7, #20]
 8007bf4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007bf6:	68fb      	ldr	r3, [r7, #12]
 8007bf8:	625a      	str	r2, [r3, #36]	; 0x24
			fp->dir_ptr = dj.dir;
 8007bfa:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007bfc:	68fb      	ldr	r3, [r7, #12]
 8007bfe:	629a      	str	r2, [r3, #40]	; 0x28
#if _FS_LOCK != 0
			fp->obj.lockid = inc_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
 8007c00:	79fb      	ldrb	r3, [r7, #7]
 8007c02:	f023 0301 	bic.w	r3, r3, #1
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	bf14      	ite	ne
 8007c0a:	2301      	movne	r3, #1
 8007c0c:	2300      	moveq	r3, #0
 8007c0e:	b2db      	uxtb	r3, r3
 8007c10:	461a      	mov	r2, r3
 8007c12:	f107 0318 	add.w	r3, r7, #24
 8007c16:	4611      	mov	r1, r2
 8007c18:	4618      	mov	r0, r3
 8007c1a:	f7fd ffe3 	bl	8005be4 <inc_lock>
 8007c1e:	4602      	mov	r2, r0
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	611a      	str	r2, [r3, #16]
			if (!fp->obj.lockid) res = FR_INT_ERR;
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	2b00      	cmp	r3, #0
 8007c2a:	d102      	bne.n	8007c32 <f_open+0x22e>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				}
			}
		}
#endif

		if (res == FR_OK) {
 8007c32:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	f040 8095 	bne.w	8007d66 <f_open+0x362>
				fp->obj.objsize = ld_qword(fs->dirbuf + XDIR_FileSize);
				fp->obj.stat = fs->dirbuf[XDIR_GenFlags] & 2;
			} else
#endif
			{
				fp->obj.sclust = ld_clust(fs, dj.dir);					/* Get object allocation info */
 8007c3c:	697b      	ldr	r3, [r7, #20]
 8007c3e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007c40:	4611      	mov	r1, r2
 8007c42:	4618      	mov	r0, r3
 8007c44:	f7fe fdcb 	bl	80067de <ld_clust>
 8007c48:	4602      	mov	r2, r0
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	609a      	str	r2, [r3, #8]
				fp->obj.objsize = ld_dword(dj.dir + DIR_FileSize);
 8007c4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c50:	331c      	adds	r3, #28
 8007c52:	4618      	mov	r0, r3
 8007c54:	f7fd fe60 	bl	8005918 <ld_dword>
 8007c58:	4602      	mov	r2, r0
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	60da      	str	r2, [r3, #12]
			}
#if _USE_FASTSEEK
			fp->cltbl = 0;			/* Disable fast seek mode */
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	62da      	str	r2, [r3, #44]	; 0x2c
#endif
			fp->obj.fs = fs;	 	/* Validate the file object */
 8007c64:	697a      	ldr	r2, [r7, #20]
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	601a      	str	r2, [r3, #0]
			fp->obj.id = fs->id;
 8007c6a:	697b      	ldr	r3, [r7, #20]
 8007c6c:	88da      	ldrh	r2, [r3, #6]
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	809a      	strh	r2, [r3, #4]
			fp->flag = mode;		/* Set file access mode */
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	79fa      	ldrb	r2, [r7, #7]
 8007c76:	751a      	strb	r2, [r3, #20]
			fp->err = 0;			/* Clear error flag */
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	755a      	strb	r2, [r3, #21]
			fp->sect = 0;			/* Invalidate current data sector */
 8007c7e:	68fb      	ldr	r3, [r7, #12]
 8007c80:	2200      	movs	r2, #0
 8007c82:	621a      	str	r2, [r3, #32]
			fp->fptr = 0;			/* Set file pointer top of the file */
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	2200      	movs	r2, #0
 8007c88:	619a      	str	r2, [r3, #24]
#if !_FS_READONLY
#if !_FS_TINY
			mem_set(fp->buf, 0, _MAX_SS);	/* Clear sector buffer */
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3330      	adds	r3, #48	; 0x30
 8007c8e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007c92:	2100      	movs	r1, #0
 8007c94:	4618      	mov	r0, r3
 8007c96:	f7fd feca 	bl	8005a2e <mem_set>
#endif
			if ((mode & FA_SEEKEND) && fp->obj.objsize > 0) {	/* Seek to end of file if FA_OPEN_APPEND is specified */
 8007c9a:	79fb      	ldrb	r3, [r7, #7]
 8007c9c:	f003 0320 	and.w	r3, r3, #32
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d060      	beq.n	8007d66 <f_open+0x362>
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	2b00      	cmp	r3, #0
 8007caa:	d05c      	beq.n	8007d66 <f_open+0x362>
				fp->fptr = fp->obj.objsize;			/* Offset to seek */
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	68da      	ldr	r2, [r3, #12]
 8007cb0:	68fb      	ldr	r3, [r7, #12]
 8007cb2:	619a      	str	r2, [r3, #24]
				bcs = (DWORD)fs->csize * SS(fs);	/* Cluster size in byte */
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	895b      	ldrh	r3, [r3, #10]
 8007cb8:	025b      	lsls	r3, r3, #9
 8007cba:	653b      	str	r3, [r7, #80]	; 0x50
				clst = fp->obj.sclust;				/* Follow the cluster chain */
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	689b      	ldr	r3, [r3, #8]
 8007cc0:	663b      	str	r3, [r7, #96]	; 0x60
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007cc2:	68fb      	ldr	r3, [r7, #12]
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cc8:	e016      	b.n	8007cf8 <f_open+0x2f4>
					clst = get_fat(&fp->obj, clst);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe f975 	bl	8005fbe <get_fat>
 8007cd4:	6638      	str	r0, [r7, #96]	; 0x60
					if (clst <= 1) res = FR_INT_ERR;
 8007cd6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007cd8:	2b01      	cmp	r3, #1
 8007cda:	d802      	bhi.n	8007ce2 <f_open+0x2de>
 8007cdc:	2302      	movs	r3, #2
 8007cde:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					if (clst == 0xFFFFFFFF) res = FR_DISK_ERR;
 8007ce2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007ce4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ce8:	d102      	bne.n	8007cf0 <f_open+0x2ec>
 8007cea:	2301      	movs	r3, #1
 8007cec:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
				for (ofs = fp->obj.objsize; res == FR_OK && ofs > bcs; ofs -= bcs) {
 8007cf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007cf2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cf4:	1ad3      	subs	r3, r2, r3
 8007cf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007cf8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d103      	bne.n	8007d08 <f_open+0x304>
 8007d00:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007d02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007d04:	429a      	cmp	r2, r3
 8007d06:	d8e0      	bhi.n	8007cca <f_open+0x2c6>
				}
				fp->clust = clst;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007d0c:	61da      	str	r2, [r3, #28]
				if (res == FR_OK && ofs % SS(fs)) {	/* Fill sector buffer if not on the sector boundary */
 8007d0e:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d127      	bne.n	8007d66 <f_open+0x362>
 8007d16:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d022      	beq.n	8007d66 <f_open+0x362>
					if ((sc = clust2sect(fs, clst)) == 0) {
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8007d24:	4618      	mov	r0, r3
 8007d26:	f7fe f92b 	bl	8005f80 <clust2sect>
 8007d2a:	64f8      	str	r0, [r7, #76]	; 0x4c
 8007d2c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <f_open+0x336>
						res = FR_INT_ERR;
 8007d32:	2302      	movs	r3, #2
 8007d34:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8007d38:	e015      	b.n	8007d66 <f_open+0x362>
					} else {
						fp->sect = sc + (DWORD)(ofs / SS(fs));
 8007d3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d3c:	0a5a      	lsrs	r2, r3, #9
 8007d3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d40:	441a      	add	r2, r3
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	621a      	str	r2, [r3, #32]
#if !_FS_TINY
						if (disk_read(fs->drv, fp->buf, fp->sect, 1) != RES_OK) res = FR_DISK_ERR;
 8007d46:	697b      	ldr	r3, [r7, #20]
 8007d48:	7858      	ldrb	r0, [r3, #1]
 8007d4a:	68fb      	ldr	r3, [r7, #12]
 8007d4c:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	6a1a      	ldr	r2, [r3, #32]
 8007d54:	2301      	movs	r3, #1
 8007d56:	f7fd fd69 	bl	800582c <disk_read>
 8007d5a:	4603      	mov	r3, r0
 8007d5c:	2b00      	cmp	r3, #0
 8007d5e:	d002      	beq.n	8007d66 <f_open+0x362>
 8007d60:	2301      	movs	r3, #1
 8007d62:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
		}

		FREE_NAMBUF();
	}

	if (res != FR_OK) fp->obj.fs = 0;	/* Invalidate file object on error */
 8007d66:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d002      	beq.n	8007d74 <f_open+0x370>
 8007d6e:	68fb      	ldr	r3, [r7, #12]
 8007d70:	2200      	movs	r2, #0
 8007d72:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 8007d74:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8007d78:	4618      	mov	r0, r3
 8007d7a:	3768      	adds	r7, #104	; 0x68
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	bd80      	pop	{r7, pc}

08007d80 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8007d80:	b580      	push	{r7, lr}
 8007d82:	b086      	sub	sp, #24
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
#if _FS_EXFAT
	DIR dj;
	DEF_NAMBUF
#endif

	res = validate(&fp->obj, &fs);	/* Check validity of the file object */
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f107 0208 	add.w	r2, r7, #8
 8007d8e:	4611      	mov	r1, r2
 8007d90:	4618      	mov	r0, r3
 8007d92:	f7ff fdbb 	bl	800790c <validate>
 8007d96:	4603      	mov	r3, r0
 8007d98:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8007d9a:	7dfb      	ldrb	r3, [r7, #23]
 8007d9c:	2b00      	cmp	r3, #0
 8007d9e:	d168      	bne.n	8007e72 <f_sync+0xf2>
		if (fp->flag & FA_MODIFIED) {	/* Is there any change to the file? */
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	7d1b      	ldrb	r3, [r3, #20]
 8007da4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d062      	beq.n	8007e72 <f_sync+0xf2>
#if !_FS_TINY
			if (fp->flag & FA_DIRTY) {	/* Write-back cached data if needed */
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	7d1b      	ldrb	r3, [r3, #20]
 8007db0:	b25b      	sxtb	r3, r3
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	da15      	bge.n	8007de2 <f_sync+0x62>
				if (disk_write(fs->drv, fp->buf, fp->sect, 1) != RES_OK) LEAVE_FF(fs, FR_DISK_ERR);
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	7858      	ldrb	r0, [r3, #1]
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	f103 0130 	add.w	r1, r3, #48	; 0x30
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6a1a      	ldr	r2, [r3, #32]
 8007dc4:	2301      	movs	r3, #1
 8007dc6:	f7fd fd51 	bl	800586c <disk_write>
 8007dca:	4603      	mov	r3, r0
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d001      	beq.n	8007dd4 <f_sync+0x54>
 8007dd0:	2301      	movs	r3, #1
 8007dd2:	e04f      	b.n	8007e74 <f_sync+0xf4>
				fp->flag &= (BYTE)~FA_DIRTY;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	7d1b      	ldrb	r3, [r3, #20]
 8007dd8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007ddc:	b2da      	uxtb	r2, r3
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	751a      	strb	r2, [r3, #20]
			}
#endif
			/* Update the directory entry */
			tm = GET_FATTIME();				/* Modified time */
 8007de2:	f7fd fa93 	bl	800530c <get_fattime>
 8007de6:	6138      	str	r0, [r7, #16]
					FREE_NAMBUF();
				}
			} else
#endif
			{
				res = move_window(fs, fp->dir_sect);
 8007de8:	68ba      	ldr	r2, [r7, #8]
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dee:	4619      	mov	r1, r3
 8007df0:	4610      	mov	r0, r2
 8007df2:	f7fe f829 	bl	8005e48 <move_window>
 8007df6:	4603      	mov	r3, r0
 8007df8:	75fb      	strb	r3, [r7, #23]
				if (res == FR_OK) {
 8007dfa:	7dfb      	ldrb	r3, [r7, #23]
 8007dfc:	2b00      	cmp	r3, #0
 8007dfe:	d138      	bne.n	8007e72 <f_sync+0xf2>
					dir = fp->dir_ptr;
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007e04:	60fb      	str	r3, [r7, #12]
					dir[DIR_Attr] |= AM_ARC;						/* Set archive bit */
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	330b      	adds	r3, #11
 8007e0a:	781a      	ldrb	r2, [r3, #0]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	330b      	adds	r3, #11
 8007e10:	f042 0220 	orr.w	r2, r2, #32
 8007e14:	b2d2      	uxtb	r2, r2
 8007e16:	701a      	strb	r2, [r3, #0]
					st_clust(fp->obj.fs, dir, fp->obj.sclust);		/* Update file allocation info  */
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	6818      	ldr	r0, [r3, #0]
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	461a      	mov	r2, r3
 8007e22:	68f9      	ldr	r1, [r7, #12]
 8007e24:	f7fe fcfa 	bl	800681c <st_clust>
					st_dword(dir + DIR_FileSize, (DWORD)fp->obj.objsize);	/* Update file size */
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f103 021c 	add.w	r2, r3, #28
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	4619      	mov	r1, r3
 8007e34:	4610      	mov	r0, r2
 8007e36:	f7fd fdad 	bl	8005994 <st_dword>
					st_dword(dir + DIR_ModTime, tm);				/* Update modified time */
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	3316      	adds	r3, #22
 8007e3e:	6939      	ldr	r1, [r7, #16]
 8007e40:	4618      	mov	r0, r3
 8007e42:	f7fd fda7 	bl	8005994 <st_dword>
					st_word(dir + DIR_LstAccDate, 0);
 8007e46:	68fb      	ldr	r3, [r7, #12]
 8007e48:	3312      	adds	r3, #18
 8007e4a:	2100      	movs	r1, #0
 8007e4c:	4618      	mov	r0, r3
 8007e4e:	f7fd fd86 	bl	800595e <st_word>
					fs->wflag = 1;
 8007e52:	68bb      	ldr	r3, [r7, #8]
 8007e54:	2201      	movs	r2, #1
 8007e56:	70da      	strb	r2, [r3, #3]
					res = sync_fs(fs);					/* Restore it to the directory */
 8007e58:	68bb      	ldr	r3, [r7, #8]
 8007e5a:	4618      	mov	r0, r3
 8007e5c:	f7fe f822 	bl	8005ea4 <sync_fs>
 8007e60:	4603      	mov	r3, r0
 8007e62:	75fb      	strb	r3, [r7, #23]
					fp->flag &= (BYTE)~FA_MODIFIED;
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	7d1b      	ldrb	r3, [r3, #20]
 8007e68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e6c:	b2da      	uxtb	r2, r3
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	751a      	strb	r2, [r3, #20]
				}
			}
		}
	}

	LEAVE_FF(fs, res);
 8007e72:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3718      	adds	r7, #24
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	bd80      	pop	{r7, pc}

08007e7c <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL* fp		/* Pointer to the file object to be closed */
)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b084      	sub	sp, #16
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
	FRESULT res;
	FATFS *fs;

#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 8007e84:	6878      	ldr	r0, [r7, #4]
 8007e86:	f7ff ff7b 	bl	8007d80 <f_sync>
 8007e8a:	4603      	mov	r3, r0
 8007e8c:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d118      	bne.n	8007ec6 <f_close+0x4a>
#endif
	{
		res = validate(&fp->obj, &fs);	/* Lock volume */
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	f107 0208 	add.w	r2, r7, #8
 8007e9a:	4611      	mov	r1, r2
 8007e9c:	4618      	mov	r0, r3
 8007e9e:	f7ff fd35 	bl	800790c <validate>
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	2b00      	cmp	r3, #0
 8007eaa:	d10c      	bne.n	8007ec6 <f_close+0x4a>
#if _FS_LOCK != 0
			res = dec_lock(fp->obj.lockid);	/* Decrement file open counter */
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	691b      	ldr	r3, [r3, #16]
 8007eb0:	4618      	mov	r0, r3
 8007eb2:	f7fd ff25 	bl	8005d00 <dec_lock>
 8007eb6:	4603      	mov	r3, r0
 8007eb8:	73fb      	strb	r3, [r7, #15]
			if (res == FR_OK)
 8007eba:	7bfb      	ldrb	r3, [r7, #15]
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d102      	bne.n	8007ec6 <f_close+0x4a>
#endif
			{
				fp->obj.fs = 0;			/* Invalidate file object */
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	2200      	movs	r2, #0
 8007ec4:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8007ec6:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ec8:	4618      	mov	r0, r3
 8007eca:	3710      	adds	r7, #16
 8007ecc:	46bd      	mov	sp, r7
 8007ece:	bd80      	pop	{r7, pc}

08007ed0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8007ed0:	b480      	push	{r7}
 8007ed2:	b087      	sub	sp, #28
 8007ed4:	af00      	add	r7, sp, #0
 8007ed6:	60f8      	str	r0, [r7, #12]
 8007ed8:	60b9      	str	r1, [r7, #8]
 8007eda:	4613      	mov	r3, r2
 8007edc:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8007ede:	2301      	movs	r3, #1
 8007ee0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8007ee6:	4b1f      	ldr	r3, [pc, #124]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007ee8:	7a5b      	ldrb	r3, [r3, #9]
 8007eea:	b2db      	uxtb	r3, r3
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d131      	bne.n	8007f54 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8007ef0:	4b1c      	ldr	r3, [pc, #112]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007ef2:	7a5b      	ldrb	r3, [r3, #9]
 8007ef4:	b2db      	uxtb	r3, r3
 8007ef6:	461a      	mov	r2, r3
 8007ef8:	4b1a      	ldr	r3, [pc, #104]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007efa:	2100      	movs	r1, #0
 8007efc:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8007efe:	4b19      	ldr	r3, [pc, #100]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007f00:	7a5b      	ldrb	r3, [r3, #9]
 8007f02:	b2db      	uxtb	r3, r3
 8007f04:	4a17      	ldr	r2, [pc, #92]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007f06:	009b      	lsls	r3, r3, #2
 8007f08:	4413      	add	r3, r2
 8007f0a:	68fa      	ldr	r2, [r7, #12]
 8007f0c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8007f0e:	4b15      	ldr	r3, [pc, #84]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007f10:	7a5b      	ldrb	r3, [r3, #9]
 8007f12:	b2db      	uxtb	r3, r3
 8007f14:	461a      	mov	r2, r3
 8007f16:	4b13      	ldr	r3, [pc, #76]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007f18:	4413      	add	r3, r2
 8007f1a:	79fa      	ldrb	r2, [r7, #7]
 8007f1c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8007f1e:	4b11      	ldr	r3, [pc, #68]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007f20:	7a5b      	ldrb	r3, [r3, #9]
 8007f22:	b2db      	uxtb	r3, r3
 8007f24:	1c5a      	adds	r2, r3, #1
 8007f26:	b2d1      	uxtb	r1, r2
 8007f28:	4a0e      	ldr	r2, [pc, #56]	; (8007f64 <FATFS_LinkDriverEx+0x94>)
 8007f2a:	7251      	strb	r1, [r2, #9]
 8007f2c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8007f2e:	7dbb      	ldrb	r3, [r7, #22]
 8007f30:	3330      	adds	r3, #48	; 0x30
 8007f32:	b2da      	uxtb	r2, r3
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8007f38:	68bb      	ldr	r3, [r7, #8]
 8007f3a:	3301      	adds	r3, #1
 8007f3c:	223a      	movs	r2, #58	; 0x3a
 8007f3e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8007f40:	68bb      	ldr	r3, [r7, #8]
 8007f42:	3302      	adds	r3, #2
 8007f44:	222f      	movs	r2, #47	; 0x2f
 8007f46:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	3303      	adds	r3, #3
 8007f4c:	2200      	movs	r2, #0
 8007f4e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8007f50:	2300      	movs	r3, #0
 8007f52:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8007f54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f56:	4618      	mov	r0, r3
 8007f58:	371c      	adds	r7, #28
 8007f5a:	46bd      	mov	sp, r7
 8007f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f60:	4770      	bx	lr
 8007f62:	bf00      	nop
 8007f64:	20000258 	.word	0x20000258

08007f68 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8007f68:	b580      	push	{r7, lr}
 8007f6a:	b082      	sub	sp, #8
 8007f6c:	af00      	add	r7, sp, #0
 8007f6e:	6078      	str	r0, [r7, #4]
 8007f70:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8007f72:	2200      	movs	r2, #0
 8007f74:	6839      	ldr	r1, [r7, #0]
 8007f76:	6878      	ldr	r0, [r7, #4]
 8007f78:	f7ff ffaa 	bl	8007ed0 <FATFS_LinkDriverEx>
 8007f7c:	4603      	mov	r3, r0
}
 8007f7e:	4618      	mov	r0, r3
 8007f80:	3708      	adds	r7, #8
 8007f82:	46bd      	mov	sp, r7
 8007f84:	bd80      	pop	{r7, pc}
	...

08007f88 <ff_convert>:

WCHAR ff_convert (	/* Converted character, Returns zero on error */
	WCHAR	chr,	/* Character code to be converted */
	UINT	dir		/* 0: Unicode to OEM code, 1: OEM code to Unicode */
)
{
 8007f88:	b480      	push	{r7}
 8007f8a:	b085      	sub	sp, #20
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	6039      	str	r1, [r7, #0]
 8007f92:	80fb      	strh	r3, [r7, #6]
	WCHAR c;


	if (chr < 0x80) {	/* ASCII */
 8007f94:	88fb      	ldrh	r3, [r7, #6]
 8007f96:	2b7f      	cmp	r3, #127	; 0x7f
 8007f98:	d802      	bhi.n	8007fa0 <ff_convert+0x18>
		c = chr;
 8007f9a:	88fb      	ldrh	r3, [r7, #6]
 8007f9c:	81fb      	strh	r3, [r7, #14]
 8007f9e:	e025      	b.n	8007fec <ff_convert+0x64>

	} else {
		if (dir) {		/* OEM code to Unicode */
 8007fa0:	683b      	ldr	r3, [r7, #0]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d00b      	beq.n	8007fbe <ff_convert+0x36>
			c = (chr >= 0x100) ? 0 : Tbl[chr - 0x80];
 8007fa6:	88fb      	ldrh	r3, [r7, #6]
 8007fa8:	2bff      	cmp	r3, #255	; 0xff
 8007faa:	d805      	bhi.n	8007fb8 <ff_convert+0x30>
 8007fac:	88fb      	ldrh	r3, [r7, #6]
 8007fae:	3b80      	subs	r3, #128	; 0x80
 8007fb0:	4a12      	ldr	r2, [pc, #72]	; (8007ffc <ff_convert+0x74>)
 8007fb2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fb6:	e000      	b.n	8007fba <ff_convert+0x32>
 8007fb8:	2300      	movs	r3, #0
 8007fba:	81fb      	strh	r3, [r7, #14]
 8007fbc:	e016      	b.n	8007fec <ff_convert+0x64>

		} else {		/* Unicode to OEM code */
			for (c = 0; c < 0x80; c++) {
 8007fbe:	2300      	movs	r3, #0
 8007fc0:	81fb      	strh	r3, [r7, #14]
 8007fc2:	e009      	b.n	8007fd8 <ff_convert+0x50>
				if (chr == Tbl[c]) break;
 8007fc4:	89fb      	ldrh	r3, [r7, #14]
 8007fc6:	4a0d      	ldr	r2, [pc, #52]	; (8007ffc <ff_convert+0x74>)
 8007fc8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007fcc:	88fa      	ldrh	r2, [r7, #6]
 8007fce:	429a      	cmp	r2, r3
 8007fd0:	d006      	beq.n	8007fe0 <ff_convert+0x58>
			for (c = 0; c < 0x80; c++) {
 8007fd2:	89fb      	ldrh	r3, [r7, #14]
 8007fd4:	3301      	adds	r3, #1
 8007fd6:	81fb      	strh	r3, [r7, #14]
 8007fd8:	89fb      	ldrh	r3, [r7, #14]
 8007fda:	2b7f      	cmp	r3, #127	; 0x7f
 8007fdc:	d9f2      	bls.n	8007fc4 <ff_convert+0x3c>
 8007fde:	e000      	b.n	8007fe2 <ff_convert+0x5a>
				if (chr == Tbl[c]) break;
 8007fe0:	bf00      	nop
			}
			c = (c + 0x80) & 0xFF;
 8007fe2:	89fb      	ldrh	r3, [r7, #14]
 8007fe4:	3380      	adds	r3, #128	; 0x80
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	b2db      	uxtb	r3, r3
 8007fea:	81fb      	strh	r3, [r7, #14]
		}
	}

	return c;
 8007fec:	89fb      	ldrh	r3, [r7, #14]
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3714      	adds	r7, #20
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ff8:	4770      	bx	lr
 8007ffa:	bf00      	nop
 8007ffc:	080082d4 	.word	0x080082d4

08008000 <ff_wtoupper>:


WCHAR ff_wtoupper (	/* Returns upper converted character */
	WCHAR chr		/* Unicode character to be upper converted (BMP only) */
)
{
 8008000:	b480      	push	{r7}
 8008002:	b087      	sub	sp, #28
 8008004:	af00      	add	r7, sp, #0
 8008006:	4603      	mov	r3, r0
 8008008:	80fb      	strh	r3, [r7, #6]
	};
	const WCHAR *p;
	WCHAR bc, nc, cmd;


	p = chr < 0x1000 ? cvt1 : cvt2;
 800800a:	88fb      	ldrh	r3, [r7, #6]
 800800c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008010:	d201      	bcs.n	8008016 <ff_wtoupper+0x16>
 8008012:	4b3e      	ldr	r3, [pc, #248]	; (800810c <ff_wtoupper+0x10c>)
 8008014:	e000      	b.n	8008018 <ff_wtoupper+0x18>
 8008016:	4b3e      	ldr	r3, [pc, #248]	; (8008110 <ff_wtoupper+0x110>)
 8008018:	617b      	str	r3, [r7, #20]
	for (;;) {
		bc = *p++;								/* Get block base */
 800801a:	697b      	ldr	r3, [r7, #20]
 800801c:	1c9a      	adds	r2, r3, #2
 800801e:	617a      	str	r2, [r7, #20]
 8008020:	881b      	ldrh	r3, [r3, #0]
 8008022:	827b      	strh	r3, [r7, #18]
		if (!bc || chr < bc) break;
 8008024:	8a7b      	ldrh	r3, [r7, #18]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d068      	beq.n	80080fc <ff_wtoupper+0xfc>
 800802a:	88fa      	ldrh	r2, [r7, #6]
 800802c:	8a7b      	ldrh	r3, [r7, #18]
 800802e:	429a      	cmp	r2, r3
 8008030:	d364      	bcc.n	80080fc <ff_wtoupper+0xfc>
		nc = *p++; cmd = nc >> 8; nc &= 0xFF;	/* Get processing command and block size */
 8008032:	697b      	ldr	r3, [r7, #20]
 8008034:	1c9a      	adds	r2, r3, #2
 8008036:	617a      	str	r2, [r7, #20]
 8008038:	881b      	ldrh	r3, [r3, #0]
 800803a:	823b      	strh	r3, [r7, #16]
 800803c:	8a3b      	ldrh	r3, [r7, #16]
 800803e:	0a1b      	lsrs	r3, r3, #8
 8008040:	81fb      	strh	r3, [r7, #14]
 8008042:	8a3b      	ldrh	r3, [r7, #16]
 8008044:	b2db      	uxtb	r3, r3
 8008046:	823b      	strh	r3, [r7, #16]
		if (chr < bc + nc) {	/* In the block? */
 8008048:	88fa      	ldrh	r2, [r7, #6]
 800804a:	8a79      	ldrh	r1, [r7, #18]
 800804c:	8a3b      	ldrh	r3, [r7, #16]
 800804e:	440b      	add	r3, r1
 8008050:	429a      	cmp	r2, r3
 8008052:	da49      	bge.n	80080e8 <ff_wtoupper+0xe8>
			switch (cmd) {
 8008054:	89fb      	ldrh	r3, [r7, #14]
 8008056:	2b08      	cmp	r3, #8
 8008058:	d84f      	bhi.n	80080fa <ff_wtoupper+0xfa>
 800805a:	a201      	add	r2, pc, #4	; (adr r2, 8008060 <ff_wtoupper+0x60>)
 800805c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008060:	08008085 	.word	0x08008085
 8008064:	08008097 	.word	0x08008097
 8008068:	080080ad 	.word	0x080080ad
 800806c:	080080b5 	.word	0x080080b5
 8008070:	080080bd 	.word	0x080080bd
 8008074:	080080c5 	.word	0x080080c5
 8008078:	080080cd 	.word	0x080080cd
 800807c:	080080d5 	.word	0x080080d5
 8008080:	080080dd 	.word	0x080080dd
			case 0:	chr = p[chr - bc]; break;		/* Table conversion */
 8008084:	88fa      	ldrh	r2, [r7, #6]
 8008086:	8a7b      	ldrh	r3, [r7, #18]
 8008088:	1ad3      	subs	r3, r2, r3
 800808a:	005b      	lsls	r3, r3, #1
 800808c:	697a      	ldr	r2, [r7, #20]
 800808e:	4413      	add	r3, r2
 8008090:	881b      	ldrh	r3, [r3, #0]
 8008092:	80fb      	strh	r3, [r7, #6]
 8008094:	e027      	b.n	80080e6 <ff_wtoupper+0xe6>
			case 1:	chr -= (chr - bc) & 1; break;	/* Case pairs */
 8008096:	88fa      	ldrh	r2, [r7, #6]
 8008098:	8a7b      	ldrh	r3, [r7, #18]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	b29b      	uxth	r3, r3
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	b29b      	uxth	r3, r3
 80080a4:	88fa      	ldrh	r2, [r7, #6]
 80080a6:	1ad3      	subs	r3, r2, r3
 80080a8:	80fb      	strh	r3, [r7, #6]
 80080aa:	e01c      	b.n	80080e6 <ff_wtoupper+0xe6>
			case 2: chr -= 16; break;				/* Shift -16 */
 80080ac:	88fb      	ldrh	r3, [r7, #6]
 80080ae:	3b10      	subs	r3, #16
 80080b0:	80fb      	strh	r3, [r7, #6]
 80080b2:	e018      	b.n	80080e6 <ff_wtoupper+0xe6>
			case 3:	chr -= 32; break;				/* Shift -32 */
 80080b4:	88fb      	ldrh	r3, [r7, #6]
 80080b6:	3b20      	subs	r3, #32
 80080b8:	80fb      	strh	r3, [r7, #6]
 80080ba:	e014      	b.n	80080e6 <ff_wtoupper+0xe6>
			case 4:	chr -= 48; break;				/* Shift -48 */
 80080bc:	88fb      	ldrh	r3, [r7, #6]
 80080be:	3b30      	subs	r3, #48	; 0x30
 80080c0:	80fb      	strh	r3, [r7, #6]
 80080c2:	e010      	b.n	80080e6 <ff_wtoupper+0xe6>
			case 5:	chr -= 26; break;				/* Shift -26 */
 80080c4:	88fb      	ldrh	r3, [r7, #6]
 80080c6:	3b1a      	subs	r3, #26
 80080c8:	80fb      	strh	r3, [r7, #6]
 80080ca:	e00c      	b.n	80080e6 <ff_wtoupper+0xe6>
			case 6:	chr += 8; break;				/* Shift +8 */
 80080cc:	88fb      	ldrh	r3, [r7, #6]
 80080ce:	3308      	adds	r3, #8
 80080d0:	80fb      	strh	r3, [r7, #6]
 80080d2:	e008      	b.n	80080e6 <ff_wtoupper+0xe6>
			case 7: chr -= 80; break;				/* Shift -80 */
 80080d4:	88fb      	ldrh	r3, [r7, #6]
 80080d6:	3b50      	subs	r3, #80	; 0x50
 80080d8:	80fb      	strh	r3, [r7, #6]
 80080da:	e004      	b.n	80080e6 <ff_wtoupper+0xe6>
			case 8:	chr -= 0x1C60; break;			/* Shift -0x1C60 */
 80080dc:	88fb      	ldrh	r3, [r7, #6]
 80080de:	f5a3 53e3 	sub.w	r3, r3, #7264	; 0x1c60
 80080e2:	80fb      	strh	r3, [r7, #6]
 80080e4:	bf00      	nop
			}
			break;
 80080e6:	e008      	b.n	80080fa <ff_wtoupper+0xfa>
		}
		if (!cmd) p += nc;
 80080e8:	89fb      	ldrh	r3, [r7, #14]
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d195      	bne.n	800801a <ff_wtoupper+0x1a>
 80080ee:	8a3b      	ldrh	r3, [r7, #16]
 80080f0:	005b      	lsls	r3, r3, #1
 80080f2:	697a      	ldr	r2, [r7, #20]
 80080f4:	4413      	add	r3, r2
 80080f6:	617b      	str	r3, [r7, #20]
		bc = *p++;								/* Get block base */
 80080f8:	e78f      	b.n	800801a <ff_wtoupper+0x1a>
			break;
 80080fa:	bf00      	nop
	}

	return chr;
 80080fc:	88fb      	ldrh	r3, [r7, #6]
}
 80080fe:	4618      	mov	r0, r3
 8008100:	371c      	adds	r7, #28
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
 800810a:	bf00      	nop
 800810c:	080083d4 	.word	0x080083d4
 8008110:	080085c8 	.word	0x080085c8

08008114 <__libc_init_array>:
 8008114:	b570      	push	{r4, r5, r6, lr}
 8008116:	4e0d      	ldr	r6, [pc, #52]	; (800814c <__libc_init_array+0x38>)
 8008118:	4c0d      	ldr	r4, [pc, #52]	; (8008150 <__libc_init_array+0x3c>)
 800811a:	1ba4      	subs	r4, r4, r6
 800811c:	10a4      	asrs	r4, r4, #2
 800811e:	2500      	movs	r5, #0
 8008120:	42a5      	cmp	r5, r4
 8008122:	d109      	bne.n	8008138 <__libc_init_array+0x24>
 8008124:	4e0b      	ldr	r6, [pc, #44]	; (8008154 <__libc_init_array+0x40>)
 8008126:	4c0c      	ldr	r4, [pc, #48]	; (8008158 <__libc_init_array+0x44>)
 8008128:	f000 f820 	bl	800816c <_init>
 800812c:	1ba4      	subs	r4, r4, r6
 800812e:	10a4      	asrs	r4, r4, #2
 8008130:	2500      	movs	r5, #0
 8008132:	42a5      	cmp	r5, r4
 8008134:	d105      	bne.n	8008142 <__libc_init_array+0x2e>
 8008136:	bd70      	pop	{r4, r5, r6, pc}
 8008138:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800813c:	4798      	blx	r3
 800813e:	3501      	adds	r5, #1
 8008140:	e7ee      	b.n	8008120 <__libc_init_array+0xc>
 8008142:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008146:	4798      	blx	r3
 8008148:	3501      	adds	r5, #1
 800814a:	e7f2      	b.n	8008132 <__libc_init_array+0x1e>
 800814c:	0800868c 	.word	0x0800868c
 8008150:	0800868c 	.word	0x0800868c
 8008154:	0800868c 	.word	0x0800868c
 8008158:	08008690 	.word	0x08008690

0800815c <memset>:
 800815c:	4402      	add	r2, r0
 800815e:	4603      	mov	r3, r0
 8008160:	4293      	cmp	r3, r2
 8008162:	d100      	bne.n	8008166 <memset+0xa>
 8008164:	4770      	bx	lr
 8008166:	f803 1b01 	strb.w	r1, [r3], #1
 800816a:	e7f9      	b.n	8008160 <memset+0x4>

0800816c <_init>:
 800816c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800816e:	bf00      	nop
 8008170:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008172:	bc08      	pop	{r3}
 8008174:	469e      	mov	lr, r3
 8008176:	4770      	bx	lr

08008178 <_fini>:
 8008178:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800817a:	bf00      	nop
 800817c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800817e:	bc08      	pop	{r3}
 8008180:	469e      	mov	lr, r3
 8008182:	4770      	bx	lr
